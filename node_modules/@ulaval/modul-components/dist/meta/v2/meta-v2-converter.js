var MetaV2Converter = /** @class */ (function () {
    function MetaV2Converter(metaV2) {
        this.metaV2 = metaV2;
    }
    /**
     * Extract a ComponentMeta from Meta-v2
     *
     * this will be used as a bridge to support legacy behavior of meta.ts.
     *
     * @param tagName
     */
    MetaV2Converter.prototype.extractComponentMetaFromV2 = function (tagName) {
        var metaComponent = this.metaV2.findMetaComponentByTagName(tagName);
        var componentMetaOutput = {
            tag: tagName,
            metaV2: metaComponent
        };
        // set attribute
        if (metaComponent.props) {
            componentMetaOutput.attributes = this.extractComponentAttributesFromMetaProp(metaComponent.props);
        }
        // set mixins
        if (metaComponent.mixins) {
            componentMetaOutput.mixins = metaComponent.mixins.slice();
        }
        return componentMetaOutput;
    };
    MetaV2Converter.prototype.extractComponentAttributesFromMetaProp = function (metaProps) {
        var componentAttributesOuput = {};
        metaProps.forEach(function (metaProps) {
            componentAttributesOuput[metaProps.name] = {
                type: metaProps.type,
                values: []
            };
            if (metaProps.values) {
                componentAttributesOuput[metaProps.name].values = metaProps.values.slice();
            }
            componentAttributesOuput[metaProps.name].optional = metaProps.optional;
            if (metaProps.default) {
                componentAttributesOuput[metaProps.name].defaultValue = metaProps.default;
            }
        });
        return componentAttributesOuput;
    };
    return MetaV2Converter;
}());
export { MetaV2Converter };
//# sourceMappingURL=meta-v2-converter.js.map