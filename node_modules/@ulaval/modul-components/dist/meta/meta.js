var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Meta = /** @class */ (function () {
    function Meta() {
        this.componentMeta = {};
    }
    Meta.prototype.mergeComponentMeta = function (tag, meta) {
        var _this = this;
        var metaObject = this.componentMeta[tag];
        if (!metaObject) {
            metaObject = { tag: tag };
        }
        var mergedMeta = __assign({}, metaObject, meta);
        this.componentMeta[tag] = mergedMeta;
        if (mergedMeta.mixins) {
            mergedMeta.mixins.forEach(function (mixin) {
                _this.mergeComponentAttributes(mergedMeta, mixin);
            });
        }
        return mergedMeta;
    };
    Meta.prototype.getMeta = function () {
        var _this = this;
        return Object.keys(this.componentMeta).filter(function (key) { return _this.componentMeta.hasOwnProperty(key); }).map(function (key) { return _this.componentMeta[key]; });
    };
    Meta.prototype.getTags = function () {
        var _this = this;
        return Object.keys(this.componentMeta).filter(function (key) { return _this.componentMeta.hasOwnProperty(key); });
    };
    Meta.prototype.getMetaByTag = function (tag) {
        return this.componentMeta[tag];
    };
    Meta.prototype.getComponentAttributes = function (componentMeta) {
        if (componentMeta.attributes) {
            return Object.keys(componentMeta.attributes).filter(function (key) { return componentMeta.attributes && componentMeta.attributes.hasOwnProperty(key); });
        }
        else {
            return [];
        }
    };
    Meta.prototype.mergeComponentAttributes = function (componentMeta, mixin) {
        var _this = this;
        var mixinMeta = this.componentMeta[mixin];
        if (!mixinMeta) {
            throw new Error("There is not meta information for mixin " + mixin + ". Make sure to call the mergeComponentMeta('" + mixin + "', '<path-to-meta.json>', ...) method or to register the mixin before the " + componentMeta.tag + " component.");
        }
        if (mixinMeta.attributes) {
            Object.keys(mixinMeta.attributes)
                .filter(function (key) { return mixinMeta.attributes && mixinMeta.attributes.hasOwnProperty(key); })
                .forEach(function (attribute) {
                if (mixinMeta.attributes) {
                    mixinMeta.attributes[attribute].origin = mixinMeta;
                }
            });
            componentMeta.attributes = __assign({}, componentMeta.attributes, mixinMeta.attributes);
            if (mixinMeta.mixins) {
                mixinMeta.mixins.forEach(function (mixin) {
                    _this.mergeComponentAttributes(componentMeta, mixin);
                });
            }
        }
    };
    return Meta;
}());
export { Meta };
export default new Meta();
//# sourceMappingURL=meta.js.map