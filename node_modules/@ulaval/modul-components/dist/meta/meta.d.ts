import { MetaComponent } from './v2';
export declare type Preview = string | boolean;
export interface ComponentAttribute {
    type: string;
    values: string[];
    default?: number;
    defaultValue?: string;
    optional?: boolean;
    origin?: ComponentMeta;
}
export interface ComponentMethodArgument {
    name: string;
    type: string;
    description: string;
}
export interface ComponentMethodReturn {
    type: string;
    description: string;
}
export interface ComponentMethod {
    description: string;
    arguments: ComponentMethodArgument[];
    return?: ComponentMethodReturn;
}
export interface ComponentAttributes {
    [attribute: string]: ComponentAttribute;
}
export interface ComponentMethods {
    [method: string]: ComponentMethod;
}
export interface ComponentEnums {
    [enumName: string]: string[];
}
export interface ComponentMeta {
    tag: string;
    attributes?: ComponentAttributes;
    mixins?: string[];
    methods?: ComponentMethods;
    enums?: ComponentEnums;
    metaV2?: MetaComponent;
}
export declare type ComponentMetaMap = {
    [key: string]: ComponentMeta;
};
export declare class Meta {
    private componentMeta;
    mergeComponentMeta(tag: string, meta: ComponentMeta | undefined): ComponentMeta;
    getMeta(): ComponentMeta[];
    getTags(): string[];
    getMetaByTag(tag: string): ComponentMeta;
    getComponentAttributes(componentMeta: ComponentMeta): string[];
    private mergeComponentAttributes;
}
declare const _default: Meta;
export default _default;
//# sourceMappingURL=meta.d.ts.map