var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Vue from 'vue';
import Component from 'vue-class-component';
import { Prop } from 'vue-property-decorator';
import { ICON_BUTTON_NAME } from '../component-names';
import IconPlugin from '../icon/icon';
import WithRender from './icon-button.html?style=./icon-button.scss';
export var MIconButtonSkin;
(function (MIconButtonSkin) {
    MIconButtonSkin["Light"] = "light";
    MIconButtonSkin["Dark"] = "dark";
    MIconButtonSkin["Primary"] = "primary";
    MIconButtonSkin["Secondary"] = "secondary";
    MIconButtonSkin["Link"] = "link";
})(MIconButtonSkin || (MIconButtonSkin = {}));
var MIconButton = /** @class */ (function (_super) {
    __extends(MIconButton, _super);
    function MIconButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.hasSlot = false;
        return _this;
    }
    MIconButton.prototype.mounted = function () {
        this.hasSlot = !!this.$slots.default;
        if (!this.hasSlot) {
            // Vue.prototype.$log.warn('<' + ICON_BUTTON_NAME + '> needs a text in its default slot that will describe its function. This text will be hidden and only read by the screen readers.');
        }
    };
    MIconButton.prototype.onClick = function (event) {
        this.$emit('click', event);
        this.$el.blur();
    };
    MIconButton.prototype.onFocus = function (event) {
        this.$emit('focus');
    };
    MIconButton.prototype.onBlur = function (event) {
        this.$emit('blur');
    };
    Object.defineProperty(MIconButton.prototype, "isSkinLight", {
        get: function () {
            return this.skin === MIconButtonSkin.Light;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MIconButton.prototype, "isSkinDark", {
        get: function () {
            return this.skin === MIconButtonSkin.Dark;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MIconButton.prototype, "isSkinPrimary", {
        get: function () {
            return this.skin === MIconButtonSkin.Primary;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MIconButton.prototype, "isSkinSecondary", {
        get: function () {
            return this.skin === MIconButtonSkin.Secondary;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MIconButton.prototype, "isSkinLink", {
        get: function () {
            return this.skin === MIconButtonSkin.Link;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Prop({
            default: MIconButtonSkin.Light,
            validator: function (value) {
                return value === MIconButtonSkin.Light ||
                    value === MIconButtonSkin.Dark ||
                    value === MIconButtonSkin.Primary ||
                    value === MIconButtonSkin.Secondary ||
                    value === MIconButtonSkin.Link;
            }
        })
    ], MIconButton.prototype, "skin", void 0);
    __decorate([
        Prop()
    ], MIconButton.prototype, "disabled", void 0);
    __decorate([
        Prop({ default: '44px' })
    ], MIconButton.prototype, "buttonSize", void 0);
    __decorate([
        Prop({ default: 'm-svg__close-clear' })
    ], MIconButton.prototype, "iconName", void 0);
    __decorate([
        Prop({ default: '20px' })
    ], MIconButton.prototype, "iconSize", void 0);
    __decorate([
        Prop({ default: true })
    ], MIconButton.prototype, "ripple", void 0);
    __decorate([
        Prop()
    ], MIconButton.prototype, "title", void 0);
    MIconButton = __decorate([
        WithRender,
        Component
    ], MIconButton);
    return MIconButton;
}(Vue));
export { MIconButton };
var IconButtonPlugin = {
    install: function (v, options) {
        v.prototype.$log.debug(ICON_BUTTON_NAME, 'plugin.install');
        v.use(IconPlugin);
        v.component(ICON_BUTTON_NAME, MIconButton);
    }
};
export default IconButtonPlugin;
//# sourceMappingURL=icon-button.js.map