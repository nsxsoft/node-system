var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Component from 'vue-class-component';
import { Prop, Watch } from 'vue-property-decorator';
import { ModulVue } from '../../../utils/vue/vue';
import { BaseNavbar } from '../navbar';
import NavbarItemHelper from './navbar-item-helper';
import WithRender from './navbar-item.html?style=./navbar-item.scss';
// must be sync with selected css class
var FAKE_SELECTED_CLASS = 'm--is-fake-selected';
var MNavbarItem = /** @class */ (function (_super) {
    __extends(MNavbarItem, _super);
    function MNavbarItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // should be initialized to be reactive
        // tslint:disable-next-line:no-null-keyword
        _this.parentNavbar = null;
        return _this;
    }
    MNavbarItem.prototype.mounted = function () {
        var parentNavbar;
        parentNavbar = this.getParent(function (p) { return p instanceof BaseNavbar || // these will fail with Jest, but should pass in prod mode
            p.$options.name === 'MNavbar'; } // these are necessary for Jest, but the first two should pass in prod mode
        );
        if (parentNavbar) {
            this.parentNavbar = parentNavbar;
            this.setDimension();
            if (this.parentNavbar.autoSelect && NavbarItemHelper.isRouterLinkActive(this)) {
                this.parentNavbar.updateValue(this.value);
            }
        }
        else {
            console.error('m-navbar-item need to be inside m-navbar');
        }
        this.$modul.event.$on('resize', this.setDimension);
    };
    MNavbarItem.prototype.beforeDestroy = function () {
        this.$modul.event.$off('resize', this.setDimension);
    };
    Object.defineProperty(MNavbarItem.prototype, "isMultiline", {
        get: function () {
            return this.parentNavbar ? this.parentNavbar.multiline : false;
        },
        enumerable: true,
        configurable: true
    });
    MNavbarItem.prototype.isMultilineChanged = function () {
        this.setDimension();
    };
    MNavbarItem.prototype.routeChanged = function () {
        var _this = this;
        this.$nextTick(function () {
            if (_this.parentNavbar && _this.parentNavbar.autoSelect && NavbarItemHelper.isRouterLinkActive(_this)) {
                _this.parentNavbar.updateValue(_this.value);
            }
        });
    };
    MNavbarItem.prototype.setDimension = function () {
        var itemEl = this.$refs.item;
        if (itemEl && itemEl.style) {
            itemEl.style.removeProperty('width');
            itemEl.style.removeProperty('max-width');
            itemEl.style.removeProperty('white-space');
            if (this.isMultiline && ((itemEl.innerText === undefined ? '' : itemEl.innerText).trim().length > 15)) {
                var itemElComputedStyle = window.getComputedStyle(itemEl);
                var fontSize = parseFloat(itemElComputedStyle.getPropertyValue('font-size'));
                var paddingH = parseInt(itemElComputedStyle.getPropertyValue('padding-top'), 10) + parseInt(itemElComputedStyle.getPropertyValue('padding-bottom'), 10);
                // must subtract the padding, create a infinite loop
                var itemElHeight = itemEl.clientHeight - paddingH;
                var lines = Math.floor(itemElHeight / fontSize);
                if (lines > 2) {
                    // use selected class to reserve space for when selected
                    this.$el.classList.add(FAKE_SELECTED_CLASS);
                    // create a infinite loop if the parent has 'align-items: stretch'
                    this.$parent.$refs.list.style.alignItems = 'flex-start';
                    do {
                        itemEl.style.width = itemEl.clientWidth + 1 + 'px'; // increment width
                        // update values
                        itemElHeight = itemEl.clientHeight - paddingH;
                        lines = Math.floor(itemElHeight / fontSize);
                    } while (lines > 2);
                    // reset styles once completed
                    this.$el.classList.remove(FAKE_SELECTED_CLASS);
                    this.$parent.$refs.list.style.removeProperty('align-items');
                }
            }
            else {
                itemEl.style.whiteSpace = 'nowrap';
            }
        }
    };
    Object.defineProperty(MNavbarItem.prototype, "isDisabled", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MNavbarItem.prototype, "isSelected", {
        get: function () {
            return !!this.parentNavbar && !this.disabled && this.value === this.parentNavbar.model;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MNavbarItem.prototype, "hasDefaultSlot", {
        get: function () {
            return !!this.$slots.default;
        },
        enumerable: true,
        configurable: true
    });
    MNavbarItem.prototype.onClick = function (event) {
        if (!this.disabled && this.parentNavbar) {
            this.parentNavbar.onClick(event, this.value);
            if (this.value !== this.parentNavbar.model) {
                this.parentNavbar.updateValue(this.value);
            }
            this.$emit('click', event);
        }
    };
    MNavbarItem.prototype.onMouseover = function (event) {
        if (!this.disabled && this.parentNavbar) {
            this.parentNavbar.onMouseover(event, this.value);
            this.$emit('mouseover', event);
        }
    };
    MNavbarItem.prototype.onMouseleave = function (event) {
        if (!this.disabled && this.parentNavbar) {
            this.parentNavbar.onMouseleave(event, this.value);
            this.$emit('mouseleave', event);
        }
    };
    __decorate([
        Prop()
    ], MNavbarItem.prototype, "value", void 0);
    __decorate([
        Prop()
    ], MNavbarItem.prototype, "disabled", void 0);
    __decorate([
        Prop()
    ], MNavbarItem.prototype, "url", void 0);
    __decorate([
        Prop()
    ], MNavbarItem.prototype, "ariaHaspopup", void 0);
    __decorate([
        Prop()
    ], MNavbarItem.prototype, "ariaExpanded", void 0);
    __decorate([
        Prop()
    ], MNavbarItem.prototype, "ariaControls", void 0);
    __decorate([
        Watch('isMultiline')
    ], MNavbarItem.prototype, "isMultilineChanged", null);
    __decorate([
        Watch('$route')
    ], MNavbarItem.prototype, "routeChanged", null);
    MNavbarItem = __decorate([
        WithRender,
        Component
    ], MNavbarItem);
    return MNavbarItem;
}(ModulVue));
export { MNavbarItem };
//# sourceMappingURL=navbar-item.js.map