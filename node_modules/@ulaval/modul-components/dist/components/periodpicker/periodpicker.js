var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Component from 'vue-class-component';
import { Emit, Prop } from 'vue-property-decorator';
import { InputState } from '../../mixins/input-state/input-state';
import { MediaQueries } from '../../mixins/media-queries/media-queries';
import ModulDate from '../../utils/modul-date/modul-date';
import { ModulVue } from '../../utils/vue/vue';
import { PERIODPICKER_NAME } from '../component-names';
import ValidationMessagePlugin from '../validation-message/validation-message';
import WithRender from './periodpicker.html';
var MDateRange = /** @class */ (function () {
    function MDateRange() {
    }
    return MDateRange;
}());
export { MDateRange };
var MPeriodpicker = /** @class */ (function (_super) {
    __extends(MPeriodpicker, _super);
    function MPeriodpicker() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.toIsFocused = false;
        return _this;
    }
    Object.defineProperty(MPeriodpicker.prototype, "firstInputState", {
        get: function () {
            var _this = this;
            return {
                props: {
                    value: this.internalValue.from,
                    min: this.min,
                    max: this.max,
                    disabled: this.as().isDisabled,
                    waiting: this.as().isWaiting,
                    error: this.as().hasError,
                    valid: this.as().isValid,
                    readonly: this.as().readonly
                },
                handlers: {
                    change: function (newValue) { return _this.onDateFromChange(newValue); },
                    open: function () { return _this.onDateFromOpen(); }
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MPeriodpicker.prototype, "secondInputState", {
        get: function () {
            var _this = this;
            return {
                props: {
                    focus: this.toIsFocused,
                    value: this.internalValue.to,
                    min: this.minDateTo,
                    max: this.max,
                    disabled: this.as().isDisabled,
                    waiting: this.as().isWaiting,
                    error: this.as().hasError,
                    valid: this.as().isValid,
                    readonly: this.as().readonly
                },
                handlers: {
                    change: function (newValue) { return _this.onDateToChange(newValue); },
                    close: function () { return _this.onDateToClose(); }
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MPeriodpicker.prototype, "internalValue", {
        get: function () {
            return this.value || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MPeriodpicker.prototype, "minDateTo", {
        get: function () {
            return this.internalValue.from ? this.internalValue.from : this.min;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MPeriodpicker.prototype, "hasTextfieldError", {
        get: function () {
            return this.as().hasError;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MPeriodpicker.prototype, "isTextfieldValid", {
        get: function () {
            return this.as().isValid;
        },
        enumerable: true,
        configurable: true
    });
    MPeriodpicker.prototype.onDateFromChange = function (newValue) {
        var dateToValue = this.getNewModelValue(this.internalValue.to, true);
        if (newValue) {
            if (this.as().isMqMinS) {
                this.toIsFocused = true;
            }
            this.emitNewValue({ from: this.getNewModelValue(newValue), to: dateToValue });
        }
        else {
            this.emitNewValue({ from: undefined, to: dateToValue });
        }
    };
    MPeriodpicker.prototype.onDateToChange = function (newValue) {
        var dateFromValue = this.getNewModelValue(this.internalValue.from);
        if (newValue) {
            this.unfocusDateToField();
            this.emitNewValue({ from: dateFromValue, to: this.getNewModelValue(newValue, true) });
        }
        else {
            this.emitNewValue({ from: dateFromValue, to: undefined });
        }
    };
    MPeriodpicker.prototype.emitNewValue = function (newValue) { };
    MPeriodpicker.prototype.onDateFromOpen = function () {
        this.unfocusDateToField();
    };
    MPeriodpicker.prototype.onDateToClose = function () {
        this.unfocusDateToField();
    };
    MPeriodpicker.prototype.unfocusDateToField = function () {
        this.toIsFocused = false;
    };
    MPeriodpicker.prototype.getNewModelValue = function (newValue, endOfDay) {
        if (endOfDay === void 0) { endOfDay = false; }
        if (!newValue) {
            return;
        }
        var modulDate = new ModulDate(newValue);
        var isoString = endOfDay ? modulDate.endOfDay().toISOString() : modulDate.toISOString();
        return new Date(isoString);
    };
    __decorate([
        Prop()
    ], MPeriodpicker.prototype, "value", void 0);
    __decorate([
        Prop()
    ], MPeriodpicker.prototype, "min", void 0);
    __decorate([
        Prop()
    ], MPeriodpicker.prototype, "max", void 0);
    __decorate([
        Emit('input')
    ], MPeriodpicker.prototype, "emitNewValue", null);
    MPeriodpicker = __decorate([
        WithRender,
        Component({
            mixins: [MediaQueries, InputState]
        })
    ], MPeriodpicker);
    return MPeriodpicker;
}(ModulVue));
export { MPeriodpicker };
var PeriodpickerPlugin = {
    install: function (v) {
        v.use(ValidationMessagePlugin);
        v.component(PERIODPICKER_NAME, MPeriodpicker);
    }
};
export default PeriodpickerPlugin;
//# sourceMappingURL=periodpicker.js.map