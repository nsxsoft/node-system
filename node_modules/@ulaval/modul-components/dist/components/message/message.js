var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Vue from 'vue';
import Component from 'vue-class-component';
import { Emit, Prop, Watch } from 'vue-property-decorator';
import I18nFilterPlugin from '../../filters/i18n/i18n';
import { MESSAGE_NAME } from '../component-names';
import I18nPlugin from '../i18n/i18n';
import IconButtonPlugin from '../icon-button/icon-button';
import IconPlugin from '../icon/icon';
import MessagePagePlugin, { MMessagePageSkin } from '../message-page/message-page';
import WithRender from './message.html?style=./message.scss';
export var MMessageState;
(function (MMessageState) {
    MMessageState["Confirmation"] = "confirmation";
    MMessageState["Information"] = "information";
    MMessageState["Warning"] = "warning";
    MMessageState["Error"] = "error";
})(MMessageState || (MMessageState = {}));
export var MMessageSkin;
(function (MMessageSkin) {
    MMessageSkin["Default"] = "default";
    MMessageSkin["Light"] = "light";
    MMessageSkin["PageLight"] = "page-light";
    MMessageSkin["Page"] = "page";
})(MMessageSkin || (MMessageSkin = {}));
var MMessage = /** @class */ (function (_super) {
    __extends(MMessage, _super);
    function MMessage() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.internalVisible = true;
        _this.animReady = false;
        return _this;
    }
    MMessage.prototype.onClose = function (event) {
        this.propVisible = false;
    };
    MMessage.prototype.mounted = function () {
        var _this = this;
        this.propVisible = this.visible;
        setTimeout(function () {
            _this.animReady = true;
        });
    };
    MMessage.prototype.onVisibleChange = function (value) {
        this.propVisible = value;
    };
    Object.defineProperty(MMessage.prototype, "propVisible", {
        get: function () {
            return this.internalVisible;
        },
        set: function (visible) {
            this.internalVisible = visible === undefined ? true : visible;
            this.$emit('update:visible', this.internalVisible);
        },
        enumerable: true,
        configurable: true
    });
    MMessage.prototype.getIcon = function () {
        var icon = '';
        switch (this.state) {
            case MMessageState.Confirmation:
                icon = 'm-svg__confirmation';
                break;
            case MMessageState.Information:
                icon = 'm-svg__information';
                break;
            case MMessageState.Warning:
                icon = 'm-svg__warning';
                break;
            case MMessageState.Error:
                icon = 'm-svg__error';
                break;
            default:
                break;
        }
        return icon;
    };
    Object.defineProperty(MMessage.prototype, "isSkinDefault", {
        get: function () {
            return this.skin === MMessageSkin.Default;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMessage.prototype, "isSkinLight", {
        get: function () {
            return this.skin === MMessageSkin.Light;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMessage.prototype, "isNotSkinPage", {
        get: function () {
            return !this.isSkinPage && !this.isSkinPageLight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMessage.prototype, "skinPageValue", {
        get: function () {
            return this.isSkinPage ? MMessagePageSkin.Default : MMessagePageSkin.Light;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMessage.prototype, "isSkinPage", {
        get: function () {
            return this.skin === MMessageSkin.Page;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMessage.prototype, "isSkinPageLight", {
        get: function () {
            return this.skin === MMessageSkin.PageLight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMessage.prototype, "isStateInformation", {
        get: function () {
            return this.state === MMessageState.Information;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMessage.prototype, "isStateWarning", {
        get: function () {
            return this.state === MMessageState.Warning;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMessage.prototype, "isStateError", {
        get: function () {
            return this.state === MMessageState.Error;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMessage.prototype, "isStateConfirmation", {
        get: function () {
            return this.state === MMessageState.Confirmation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMessage.prototype, "showCloseButton", {
        get: function () {
            return this.skin === MMessageSkin.Default && this.closeButton;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Prop({
            default: MMessageState.Confirmation,
            validator: function (value) {
                return value === MMessageState.Confirmation ||
                    value === MMessageState.Information ||
                    value === MMessageState.Warning ||
                    value === MMessageState.Error;
            }
        })
    ], MMessage.prototype, "state", void 0);
    __decorate([
        Prop({
            default: MMessageSkin.Default,
            validator: function (value) {
                return value === MMessageSkin.Default ||
                    value === MMessageSkin.Light ||
                    value === MMessageSkin.PageLight ||
                    value === MMessageSkin.Page;
            }
        })
    ], MMessage.prototype, "skin", void 0);
    __decorate([
        Prop({ default: true })
    ], MMessage.prototype, "icon", void 0);
    __decorate([
        Prop()
    ], MMessage.prototype, "title", void 0);
    __decorate([
        Prop()
    ], MMessage.prototype, "closeButton", void 0);
    __decorate([
        Prop({ default: true })
    ], MMessage.prototype, "visible", void 0);
    __decorate([
        Emit('close')
    ], MMessage.prototype, "onClose", null);
    __decorate([
        Watch('visible')
    ], MMessage.prototype, "onVisibleChange", null);
    MMessage = __decorate([
        WithRender,
        Component
    ], MMessage);
    return MMessage;
}(Vue));
export { MMessage };
var MessagePlugin = {
    install: function (v, options) {
        v.use(IconPlugin);
        v.use(IconButtonPlugin);
        v.use(MessagePagePlugin);
        v.use(I18nFilterPlugin);
        v.use(I18nPlugin);
        v.component(MESSAGE_NAME, MMessage);
    }
};
export default MessagePlugin;
//# sourceMappingURL=message.js.map