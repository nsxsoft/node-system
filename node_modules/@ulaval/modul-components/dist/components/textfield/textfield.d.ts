import { PluginObject } from 'vue';
import { InputManagementData } from '../../mixins/input-management/input-management';
import { ModulVue } from '../../utils/vue/vue';
export declare enum MTextfieldType {
    Text = "text",
    Password = "password",
    Email = "email",
    Url = "url",
    Telephone = "tel",
    Search = "search",
    Number = "number",
    Integer = "integer"
}
export declare class MTextfield extends ModulVue implements InputManagementData {
    type: MTextfieldType;
    icon: boolean;
    wordWrap: boolean;
    characterCount: boolean;
    maxLength: number;
    lengthOverflow: boolean;
    characterCountThreshold: number;
    readonly internalValue: string;
    $refs: {
        input: HTMLInputElement;
    };
    private passwordAsText;
    private iconDescriptionShowPassword;
    private iconDescriptionHidePassword;
    private searchIconDescription;
    private id;
    protected created(): void;
    protected mounted(): void;
    private typeChanged;
    private inputTypeChanged;
    private wordWrapChanged;
    private onPasteTextfield;
    private onKeydownTextfield;
    private isNumberKeycode;
    private onDropTextfield;
    private togglePasswordVisibility;
    private onEnter;
    private search;
    private reset;
    readonly inputType: MTextfieldType;
    private readonly passwordIcon;
    private readonly passwordIconName;
    private readonly passwordIconDescription;
    private readonly searchIcon;
    private readonly hasWordWrap;
    readonly valueLength: number;
    private readonly maxLengthNumber;
    private readonly hasTextfieldError;
    private readonly isTextfieldValid;
    private readonly isTypeSearch;
    private readonly hasCounterTransition;
    private readonly inputPattern;
    private readonly inputMode;
    private resetModel;
}
declare const TextfieldPlugin: PluginObject<any>;
export default TextfieldPlugin;
//# sourceMappingURL=textfield.d.ts.map