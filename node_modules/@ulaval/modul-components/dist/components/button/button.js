var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Vue from 'vue';
import Component from 'vue-class-component';
import { Emit, Prop } from 'vue-property-decorator';
import { BUTTON_NAME } from '../component-names';
import IconPlugin from '../icon/icon';
import SpinnerPlugin from '../spinner/spinner';
import WithRender from './button.html?style=./button.scss';
export var MButtonType;
(function (MButtonType) {
    MButtonType["Button"] = "button";
    MButtonType["Submit"] = "submit";
    MButtonType["Reset"] = "reset";
})(MButtonType || (MButtonType = {}));
export var MButtonSkin;
(function (MButtonSkin) {
    MButtonSkin["Primary"] = "primary";
    MButtonSkin["Secondary"] = "secondary";
})(MButtonSkin || (MButtonSkin = {}));
export var MButtonIconPosition;
(function (MButtonIconPosition) {
    MButtonIconPosition["Left"] = "left";
    MButtonIconPosition["Right"] = "right";
})(MButtonIconPosition || (MButtonIconPosition = {}));
var MButton = /** @class */ (function (_super) {
    __extends(MButton, _super);
    function MButton() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MButton.prototype.onClick = function (event) {
        this.$el.blur();
    };
    MButton.prototype.onFocus = function (event) { };
    MButton.prototype.onBlur = function (event) { };
    Object.defineProperty(MButton.prototype, "isSkinPrimary", {
        get: function () {
            return this.skin === MButtonSkin.Primary;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MButton.prototype, "isSkinSecondary", {
        get: function () {
            return this.skin === MButtonSkin.Secondary;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MButton.prototype, "isWaiting", {
        get: function () {
            return !this.disabled ? this.waiting : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MButton.prototype, "hasIcone", {
        get: function () {
            return !!this.iconName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MButton.prototype, "hasIconLeft", {
        get: function () {
            return this.iconPosition === MButtonIconPosition.Left && this.hasIcone && !this.waiting;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MButton.prototype, "hasIconRight", {
        get: function () {
            return this.iconPosition === MButtonIconPosition.Right && this.hasIcone && !this.waiting;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MButton.prototype, "hasWaitingIconLeft", {
        get: function () {
            return this.iconPosition === MButtonIconPosition.Left && this.waiting;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MButton.prototype, "hasWaitingIconRight", {
        get: function () {
            return this.iconPosition === MButtonIconPosition.Right && this.waiting;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MButton.prototype, "hasPrecision", {
        get: function () {
            return !!this.precision || !!this.$slots.precision;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Prop({
            default: MButtonType.Button,
            validator: function (value) {
                return value === MButtonType.Button ||
                    value === MButtonType.Submit ||
                    value === MButtonType.Reset;
            }
        })
    ], MButton.prototype, "type", void 0);
    __decorate([
        Prop({
            default: MButtonSkin.Primary,
            validator: function (value) {
                return value === MButtonSkin.Primary ||
                    value === MButtonSkin.Secondary;
            }
        })
    ], MButton.prototype, "skin", void 0);
    __decorate([
        Prop()
    ], MButton.prototype, "precision", void 0);
    __decorate([
        Prop()
    ], MButton.prototype, "disabled", void 0);
    __decorate([
        Prop()
    ], MButton.prototype, "waiting", void 0);
    __decorate([
        Prop()
    ], MButton.prototype, "fullSize", void 0);
    __decorate([
        Prop()
    ], MButton.prototype, "iconName", void 0);
    __decorate([
        Prop({
            default: MButtonIconPosition.Left,
            validator: function (value) {
                return value === MButtonIconPosition.Left ||
                    value === MButtonIconPosition.Right;
            }
        })
    ], MButton.prototype, "iconPosition", void 0);
    __decorate([
        Prop({ default: '12px' })
    ], MButton.prototype, "iconSize", void 0);
    __decorate([
        Emit('click')
    ], MButton.prototype, "onClick", null);
    __decorate([
        Emit('focus')
    ], MButton.prototype, "onFocus", null);
    __decorate([
        Emit('blur')
    ], MButton.prototype, "onBlur", null);
    MButton = __decorate([
        WithRender,
        Component
    ], MButton);
    return MButton;
}(Vue));
export { MButton };
var ButtonPlugin = {
    install: function (v, options) {
        v.prototype.$log.debug(BUTTON_NAME, 'plugin.install');
        v.use(IconPlugin);
        v.use(SpinnerPlugin);
        v.component(BUTTON_NAME, MButton);
    }
};
export default ButtonPlugin;
//# sourceMappingURL=button.js.map