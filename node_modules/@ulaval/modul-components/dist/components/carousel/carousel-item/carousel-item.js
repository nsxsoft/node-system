var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Vue from 'vue';
import Component from 'vue-class-component';
import WithRender from './carousel-item.html?style=./carousel-item.scss';
var MCarouselItem = /** @class */ (function (_super) {
    __extends(MCarouselItem, _super);
    function MCarouselItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isVisible = false;
        _this.position = 0;
        _this.margin = 0;
        _this.animNotReady = true;
        return _this;
    }
    MCarouselItem.prototype.beforeEnter = function () {
        this.$emit('animationStart');
    };
    MCarouselItem.prototype.afterLeave = function () {
        this.$emit('animationDone');
    };
    Object.defineProperty(MCarouselItem.prototype, "translate", {
        get: function () {
            if (this.position === 0) {
                return 'translate(0)';
            }
            else {
                return "translate(calc(" + 100 * this.position + "% + " + (this.margin / 2) * this.position + "px))";
            }
        },
        enumerable: true,
        configurable: true
    });
    MCarouselItem.prototype.mounted = function () {
        var _this = this;
        setTimeout(function () {
            _this.animNotReady = false;
        });
    };
    MCarouselItem = __decorate([
        WithRender,
        Component
    ], MCarouselItem);
    return MCarouselItem;
}(Vue));
export { MCarouselItem };
//# sourceMappingURL=carousel-item.js.map