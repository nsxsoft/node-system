var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import ElementQueries from 'css-element-queries/src/ElementQueries';
import Vue from 'vue';
import Component from 'vue-class-component';
import { Emit, Prop } from 'vue-property-decorator';
import { PANEL_NAME } from '../component-names';
import WithRender from './panel.html?style=./panel.scss';
export var MPanelSkin;
(function (MPanelSkin) {
    MPanelSkin["Light"] = "light";
    MPanelSkin["Dark"] = "dark";
    MPanelSkin["Darker"] = "darker";
})(MPanelSkin || (MPanelSkin = {}));
var HEADER_RIGHT_CONTENT = 'header-right-content';
var MENU = 'menu';
var MPanel = /** @class */ (function (_super) {
    __extends(MPanel, _super);
    function MPanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MPanel.prototype.onClick = function () { };
    MPanel.prototype.mounted = function () {
        ElementQueries.init();
    };
    MPanel.prototype.beforeDestroy = function () {
        ElementQueries.detach(this.$el);
    };
    Object.defineProperty(MPanel.prototype, "lightSkin", {
        get: function () {
            return this.skin === MPanelSkin.Light;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MPanel.prototype, "darkSkin", {
        get: function () {
            return this.skin === MPanelSkin.Dark;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MPanel.prototype, "darkerSkin", {
        get: function () {
            return this.skin === MPanelSkin.Darker;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MPanel.prototype, "hasHeader", {
        get: function () {
            if (this.$slots.header || this.$slots[HEADER_RIGHT_CONTENT]) {
                return true;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MPanel.prototype, "hasHeaderRightContentSlot", {
        get: function () {
            return !!this.$slots[HEADER_RIGHT_CONTENT];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MPanel.prototype, "hasHeaderMenuSlot", {
        get: function () {
            return !!this.$slots[MENU];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MPanel.prototype, "hasHeaderSlot", {
        get: function () {
            return !!this.$slots.header;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MPanel.prototype, "hasDefaultSlot", {
        get: function () {
            return !!this.$slots.default;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MPanel.prototype, "hasFooterSlot", {
        get: function () {
            return !!this.$slots.footer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MPanel.prototype, "hasPaddingHeader", {
        get: function () {
            return this.paddingHeader && this.padding;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MPanel.prototype, "hasPaddingBody", {
        get: function () {
            return this.paddingBody && this.padding;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MPanel.prototype, "hasPaddingFooter", {
        get: function () {
            return this.paddingFooter && this.padding;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Prop({
            default: MPanelSkin.Light,
            validator: function (value) {
                return value === MPanelSkin.Light ||
                    value === MPanelSkin.Dark ||
                    value === MPanelSkin.Darker;
            }
        })
    ], MPanel.prototype, "skin", void 0);
    __decorate([
        Prop()
    ], MPanel.prototype, "highlighted", void 0);
    __decorate([
        Prop()
    ], MPanel.prototype, "shadow", void 0);
    __decorate([
        Prop({ default: true })
    ], MPanel.prototype, "border", void 0);
    __decorate([
        Prop()
    ], MPanel.prototype, "borderLarge", void 0);
    __decorate([
        Prop({ default: true })
    ], MPanel.prototype, "padding", void 0);
    __decorate([
        Prop()
    ], MPanel.prototype, "paddingLarge", void 0);
    __decorate([
        Prop({ default: true })
    ], MPanel.prototype, "paddingHeader", void 0);
    __decorate([
        Prop({ default: true })
    ], MPanel.prototype, "paddingBody", void 0);
    __decorate([
        Prop({ default: true })
    ], MPanel.prototype, "paddingFooter", void 0);
    __decorate([
        Emit('click')
    ], MPanel.prototype, "onClick", null);
    MPanel = __decorate([
        WithRender,
        Component
    ], MPanel);
    return MPanel;
}(Vue));
export { MPanel };
var PanelPlugin = {
    install: function (v, options) {
        v.component(PANEL_NAME, MPanel);
    }
};
export default PanelPlugin;
//# sourceMappingURL=panel.js.map