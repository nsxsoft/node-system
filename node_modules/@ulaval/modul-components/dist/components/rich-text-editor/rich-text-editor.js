var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Component from 'vue-class-component';
import { Emit, Prop } from 'vue-property-decorator';
import { ElementQueries } from '../../mixins/element-queries/element-queries';
import { InputLabel } from '../../mixins/input-label/input-label';
import { InputManagement } from '../../mixins/input-management/input-management';
import { InputState } from '../../mixins/input-state/input-state';
import { InputWidth } from '../../mixins/input-width/input-width';
import uuid from '../../utils/uuid/uuid';
import { ModulVue } from '../../utils/vue/vue';
import { RICH_TEXT_EDITOR_NAME } from '../component-names';
import FileUploadPlugin from '../file-upload/file-upload';
import InputStylePlugin from '../input-style/input-style';
import ValidationMessagePlugin from '../validation-message/validation-message';
import VueFroala from './adapter/vue-froala';
import { MRichTextEditorMediaOptions, MRichTextEditorStandardOptions } from './rich-text-editor-options';
import WithRender from './rich-text-editor.html?style=./rich-text-editor.scss';
var RICH_TEXT_LICENSE_KEY = 'm-rich-text-license-key';
export var MRichTextEditorMode;
(function (MRichTextEditorMode) {
    MRichTextEditorMode[MRichTextEditorMode["STANDARD"] = 0] = "STANDARD";
    MRichTextEditorMode[MRichTextEditorMode["MEDIA"] = 1] = "MEDIA";
})(MRichTextEditorMode || (MRichTextEditorMode = {}));
var MRichTextEditor = /** @class */ (function (_super) {
    __extends(MRichTextEditor, _super);
    function MRichTextEditor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selector = '.fr-element.fr-view';
        _this.customTranslations = {
            'Update': _this.$i18n.translate('m-inplace-edit:modify'),
            'URL': _this.$i18n.translate('m-rich-text-editor:URL')
        };
        _this.id = "mrich-text-" + uuid.generate();
        return _this;
    }
    MRichTextEditor.prototype.onFullscreen = function (fullscreenWasActived) { };
    MRichTextEditor.prototype.mounted = function () {
        this.testSelectorProps();
    };
    Object.defineProperty(MRichTextEditor.prototype, "internalOptions", {
        get: function () {
            var propOptions = {
                // Hack to "hide" the default froala placeholder text
                placeholderText: this.as().placeholder || ' ',
                toolbarStickyOffset: this.calculateToolbarStickyOffset(),
                scrollableContainer: this.getScrollableContainer()
            };
            return Object.assign(this.getDefaultOptions(), propOptions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MRichTextEditor.prototype, "froalaLicenseKey", {
        get: function () {
            return this.$license.getLicense(RICH_TEXT_LICENSE_KEY) || '';
        },
        enumerable: true,
        configurable: true
    });
    MRichTextEditor.prototype.getDefaultOptions = function () {
        if (this.mode === MRichTextEditorMode.STANDARD) {
            return new MRichTextEditorStandardOptions(this.froalaLicenseKey, this.$i18n.currentLang());
        }
        else if (this.mode === MRichTextEditorMode.MEDIA) {
            return new MRichTextEditorMediaOptions(this.froalaLicenseKey, this.$i18n.currentLang());
        }
        throw new Error("rich-text-edit: mode " + this.mode + " is not a valid mode.  See MRichTextEditMode Enum for a list of compatible modes.");
    };
    MRichTextEditor.prototype.getSelectorErrorMsg = function (prop) {
        return RICH_TEXT_EDITOR_NAME + ": No element has been found with the selector given in the " + prop + " prop.";
    };
    MRichTextEditor.prototype.refreshModel = function (newValue) {
        this.$emit('input', newValue);
    };
    MRichTextEditor.prototype.calculateToolbarStickyOffset = function () {
        if (this.toolbarStickyOffset) {
            if (this.isNumber(this.toolbarStickyOffset)) {
                return Number(this.toolbarStickyOffset);
            }
            else {
                var element = document.querySelector(this.toolbarStickyOffset);
                return element.offsetHeight;
            }
        }
    };
    MRichTextEditor.prototype.isNumber = function (value) {
        return /^-*\d+$/.test(this.toolbarStickyOffset);
    };
    MRichTextEditor.prototype.getScrollableContainer = function () {
        if (this.scrollableContainer) {
            return this.scrollableContainer;
        }
    };
    MRichTextEditor.prototype.testSelectorProps = function () {
        var propInError;
        if (this.scrollableContainer) {
            if (!document.querySelector(this.scrollableContainer)) {
                propInError = 'scrollable-container';
            }
        }
        if (this.toolbarStickyOffset && !this.isNumber(this.toolbarStickyOffset)) {
            if (!document.querySelector(this.toolbarStickyOffset)) {
                propInError = 'toolbar-sticky-offset';
            }
        }
        if (propInError) {
            throw new Error(this.getSelectorErrorMsg(propInError));
        }
    };
    MRichTextEditor.prototype.imageReady = function (file, storeName) {
    };
    MRichTextEditor.prototype.imageAdded = function (file, insertImage) {
    };
    MRichTextEditor.prototype.imageRemoved = function (id, storeName) {
    };
    __decorate([
        Prop({ default: '' })
    ], MRichTextEditor.prototype, "value", void 0);
    __decorate([
        Prop({
            default: MRichTextEditorMode.STANDARD,
            validator: function (value) {
                return value === MRichTextEditorMode.STANDARD
                    || value === MRichTextEditorMode.MEDIA;
            }
        })
    ], MRichTextEditor.prototype, "mode", void 0);
    __decorate([
        Prop({ default: '0' })
    ], MRichTextEditor.prototype, "toolbarStickyOffset", void 0);
    __decorate([
        Prop()
    ], MRichTextEditor.prototype, "scrollableContainer", void 0);
    __decorate([
        Emit('fullscreen')
    ], MRichTextEditor.prototype, "onFullscreen", null);
    __decorate([
        Emit('image-ready')
    ], MRichTextEditor.prototype, "imageReady", null);
    __decorate([
        Emit('image-added')
    ], MRichTextEditor.prototype, "imageAdded", null);
    __decorate([
        Emit('image-removed')
    ], MRichTextEditor.prototype, "imageRemoved", null);
    MRichTextEditor = __decorate([
        WithRender,
        Component({
            components: { Froala: VueFroala },
            mixins: [
                InputState,
                InputManagement,
                InputWidth,
                InputLabel,
                ElementQueries
            ]
        })
    ], MRichTextEditor);
    return MRichTextEditor;
}(ModulVue));
export { MRichTextEditor };
var RichTextEditorPlugin = {
    install: function (v, options) {
        v.use(FileUploadPlugin);
        v.use(InputStylePlugin);
        v.use(ValidationMessagePlugin);
        v.component(RICH_TEXT_EDITOR_NAME, MRichTextEditor);
    }
};
export default RichTextEditorPlugin;
//# sourceMappingURL=rich-text-editor.js.map