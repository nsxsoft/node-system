var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
// This code is largery borrowed from https://github.com/froala/vue-froala-wysiwyg.
// However some changes have been made to "inputify" the froala editor and render is compatible with modUL input-style.
import $ from 'jquery';
import Component from 'vue-class-component';
import { Emit, Prop, Watch } from 'vue-property-decorator';
import boldIcon from '../../../assets/icons/svg/Froala-bold.svg';
import imageAlignCenterIcon from '../../../assets/icons/svg/Froala-image-align-center.svg';
import imageAlignLeftIcon from '../../../assets/icons/svg/Froala-image-align-left.svg';
import imageAlignRightIcon from '../../../assets/icons/svg/Froala-image-align-right.svg';
import listsIcon from '../../../assets/icons/svg/Froala-lists.svg';
import replaceIcon from '../../../assets/icons/svg/Froala-replace.svg';
import stylesIcon from '../../../assets/icons/svg/Froala-styles.svg';
import { ElementQueries } from '../../../mixins/element-queries/element-queries';
import { replaceTags } from '../../../utils/clean/htmlClean';
import uuid from '../../../utils/uuid/uuid';
import { ModulVue } from '../../../utils/vue/vue';
import { PopupPlugin } from './popup-plugin';
import SubMenuPlugin from './submenu-plugin';
import WithRender from './vue-froala.html?style=./vue-froala.scss';
require('froala-editor/js/froala_editor.pkgd.min');
require('froala-editor/css/froala_editor.pkgd.min.css');
require('froala-editor/js/languages/fr.js');
var froalaEvents;
(function (froalaEvents) {
    froalaEvents["Initialized"] = "froalaEditor.initialized";
    froalaEvents["InitializationDelayed"] = "froalaEditor.initializationDelayed";
    froalaEvents["ContentChanged"] = "froalaEditor.contentChanged";
    froalaEvents["Focus"] = "froalaEditor.focus";
    froalaEvents["Blur"] = "froalaEditor.blur";
    froalaEvents["KeyUp"] = "froalaEditor.keyup";
    froalaEvents["KeyDown"] = "froalaEditor.keydown";
    froalaEvents["PasteAfter"] = "froalaEditor.paste.after";
    froalaEvents["PasteAfterCleanup"] = "froalaEditor.paste.afterCleanup";
    froalaEvents["CommandAfter"] = "froalaEditor.commands.after";
    froalaEvents["CommandBefore"] = "froalaEditor.commands.before";
    froalaEvents["ShowLinkInsert"] = "froalaEditor.popups.show.link.insert";
    froalaEvents["ImageRemoved"] = "froalaEditor.image.removed";
    froalaEvents["ImageInserted"] = "froalaEditor.image.inserted";
})(froalaEvents || (froalaEvents = {}));
var FroalaElements;
(function (FroalaElements) {
    FroalaElements["TOOLBAR"] = ".fr-toolbar";
})(FroalaElements || (FroalaElements = {}));
export var FroalaStatus;
(function (FroalaStatus) {
    FroalaStatus["Blurring"] = "blurring";
    FroalaStatus["Blurred"] = "blurred";
    FroalaStatus["Focused"] = "focused";
})(FroalaStatus || (FroalaStatus = {}));
var VueFroala = /** @class */ (function (_super) {
    __extends(VueFroala, _super);
    function VueFroala() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.internalValue = '';
        _this.currentTag = 'div';
        _this.listeningEvents = [];
        _this.froalaEditor = undefined;
        _this._$element = undefined;
        _this._$editor = undefined;
        _this.currentConfig = undefined;
        _this.defaultConfig = {
            immediateVueModelUpdate: false,
            vueIgnoreAttrs: undefined
        };
        _this.isFocused = false;
        _this.isInitialized = false;
        _this.isLoaded = false;
        _this.isDirty = false;
        _this.status = FroalaStatus.Blurred;
        _this.isFileUploadOpen = false;
        _this.fileUploadStoreName = uuid.generate();
        _this.allowedExtensions = [];
        _this.imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'svg', 'bmp'];
        _this.mousedownTriggered = false;
        _this.mousedownInsideEditor = false;
        return _this;
    }
    VueFroala.prototype.onFullscreen = function (fullscreenWasActived) { };
    VueFroala.prototype.refreshValue = function () {
        this.htmlSet();
    };
    Object.defineProperty(VueFroala.prototype, "isEmpty", {
        get: function () {
            return this.value.length === 0;
        },
        enumerable: true,
        configurable: true
    });
    VueFroala.prototype.addPopup = function (name, icon, buttonList) {
        var buttonName = name + "Popup";
        var pluginName = name + "Plugin";
        $.FroalaEditor.POPUP_TEMPLATES[pluginName + ".popup"] = '[_BUTTONS_]';
        // The custom popup is defined inside a plugin (new or existing).
        $.FroalaEditor.PLUGINS[pluginName] = function (editor) { return new PopupPlugin(name, editor, buttonList); };
        // Create the button that'll open the popup
        $.FroalaEditor.RegisterCommand(buttonName, {
            title: name,
            icon: icon,
            undo: false,
            focus: false,
            plugin: pluginName,
            callback: function () {
                this[pluginName].showPopup();
            }
        });
    };
    VueFroala.prototype.addSubMenu = function (name, icon, buttonList) {
        var buttonName = name + "-sub-menu";
        var pluginName = name + "SubMenu";
        // The custom popup is defined inside a plugin (new or existing).
        $.FroalaEditor.PLUGINS[pluginName] = function (editor) { return new SubMenuPlugin(editor, buttonList); };
        // Create the button that'll open the popup
        $.FroalaEditor.RegisterCommand(buttonName, {
            title: name,
            icon: icon,
            undo: false,
            focus: false,
            plugin: pluginName,
            callback: function () {
                this[pluginName].showSubMenu();
            }
        });
    };
    VueFroala.prototype.addCustomIcons = function () {
        $.FroalaEditor.DefineIconTemplate('custom-icons', '[SVG]');
        if (this.$i18n.currentLang() === 'fr') {
            $.FroalaEditor.DefineIcon('bold', { SVG: boldIcon, template: 'custom-icons' });
        }
        $.FroalaEditor.DefineIcon('styles', { SVG: stylesIcon, template: 'custom-icons' });
        $.FroalaEditor.DefineIcon('lists', { SVG: listsIcon, template: 'custom-icons' });
    };
    VueFroala.prototype.addPopups = function () {
        // add mobile mode popups
        $.FroalaEditor.DefineIcon('plus', { NAME: 'plus' });
        this.addPopup(this.$i18n.translate('m-rich-text-editor:styles'), 'styles', ['bold', 'italic', 'subscript', 'superscript']);
        this.addPopup(this.$i18n.translate('m-rich-text-editor:lists'), 'lists', ['formatUL', 'formatOL', 'outdent', 'indent']);
        this.addPopup(this.$i18n.translate('m-rich-text-editor:insert'), 'plus', ['insertLink', 'specialCharacters', 'insertImage']);
    };
    VueFroala.prototype.addSubMenus = function () {
        // add mobile mode submenus
        this.addSubMenu(this.$i18n.translate('m-rich-text-editor:styles'), 'styles', ['bold', 'italic', 'subscript', 'superscript']);
        this.addSubMenu(this.$i18n.translate('m-rich-text-editor:lists'), 'lists', ['formatUL', 'formatOL', 'outdent', 'indent']);
        // we'll use this submodule when we'll support images,tables,...
        //  $.FroalaEditor.DefineIcon('plus', { NAME: 'plus' });
        // this.addSubMenu(this.$i18n.translate('m-rich-text-editor:insert'), 'plus', ['insertLink', 'specialCharacters']);
        // add "hide sub-menu" button
        $.FroalaEditor.DefineIcon('angle-left', { NAME: 'angle-left' });
        $.FroalaEditor.RegisterCommand('hide', {
            title: this.$i18n.translate('m-rich-text-editor:hide-submenu'),
            icon: 'angle-left',
            undo: false,
            focus: false,
            callback: function () {
                // Important not to use an arrow function here with this.froalaEditor since the editor is corrupted for some reason.
                this.stylesSubMenu.hideSubMenu();
                this.listesSubMenu.hideSubMenu();
                // we'll use this submenu when we'll support images,tables,...
                // this.froalaEditor.insertionsSubMenu.hideSubMenu();
            }
        });
    };
    VueFroala.prototype.addImageButton = function () {
        var EDITOR_INSTANCE = this;
        $.FroalaEditor.RegisterCommand('insertImage', {
            title: this.$i18n.translate('m-rich-text-editor:insert-image'),
            undo: true,
            focus: true,
            showOnMobile: true,
            callback: function () {
                EDITOR_INSTANCE.allowedExtensions = EDITOR_INSTANCE.imageExtensions;
                EDITOR_INSTANCE.isFileUploadOpen = true;
                EDITOR_INSTANCE.selectedImage = undefined;
            }
        });
        $.FroalaEditor.DefineIcon('imageReplace', { SVG: replaceIcon, template: 'custom-icons' });
        $.FroalaEditor.RegisterCommand('imageReplace', {
            title: this.$i18n.translate('m-rich-text-editor:replace-image'),
            undo: true,
            focus: true,
            showOnMobile: true,
            callback: function () {
                EDITOR_INSTANCE.allowedExtensions = EDITOR_INSTANCE.imageExtensions;
                EDITOR_INSTANCE.isFileUploadOpen = true;
            },
            refresh: function () {
                var selectedElement = this.selection.element();
                if (selectedElement.tagName === 'IMG') {
                    EDITOR_INSTANCE.selectedImage = selectedElement;
                }
            }
        });
        $.FroalaEditor.DefineIcon('image-align-center', { SVG: imageAlignCenterIcon, template: 'custom-icons' });
        $.FroalaEditor.DefineIcon('image-align-left', { SVG: imageAlignLeftIcon, template: 'custom-icons' });
        $.FroalaEditor.DefineIcon('image-align-right', { SVG: imageAlignRightIcon, template: 'custom-icons' });
    };
    VueFroala.prototype.filesReady = function (files) {
        this.$emit('image-ready', files[0], this.fileUploadStoreName);
    };
    VueFroala.prototype.onClose = function () {
        this.froalaEditor.events.focus();
    };
    VueFroala.prototype.filesAdded = function (files) {
        var _this = this;
        this.$emit('image-added', files[0], function (file, id) {
            if (_this.selectedImage) {
                _this.froalaEditor.image.insert(file.url, false, { id: id }, $(_this.selectedImage));
            }
            else {
                _this.froalaEditor.image.insert(file.url, false, { id: id });
            }
        });
    };
    VueFroala.prototype.created = function () {
        document.addEventListener('mousedown', this.mousedownListener);
        document.addEventListener('mouseup', this.mouseupListener);
        this.currentTag = this.tag || this.currentTag;
    };
    VueFroala.prototype.mousedownListener = function (event) {
        this.mousedownTriggered = true;
        if (this.$el.contains(event.target) || $('.fr-modal.fr-active').length > 0) {
            this.mousedownInsideEditor = true;
        }
        else {
            this.mousedownInsideEditor = false;
        }
    };
    VueFroala.prototype.mouseupListener = function (event) {
        this.mousedownTriggered = false;
        if (!this.mousedownInsideEditor && !this.$el.contains(event.target) && this.isFocused) {
            this.closeEditor();
        }
    };
    VueFroala.prototype.mounted = function () {
        if ($.FE !== undefined
            && $.FE.LANGUAGE[this.config.language] !== undefined
            && this.customTranslations !== undefined) {
            Object.assign($.FE.LANGUAGE[this.config.language].translation, this.customTranslations);
        }
        this.createEditor();
        // add a dropdown arrow to popups buttons
        $("button[id*='Popup']").addClass('popup-button');
    };
    VueFroala.prototype.destroyed = function () {
        window.removeEventListener('resize', this.onResize);
        document.removeEventListener('mousedown', this.mousedownListener);
        document.removeEventListener('mouseup', this.mouseupListener);
    };
    VueFroala.prototype.beforeDestroy = function () {
        this.destroyEditor();
    };
    Object.defineProperty(VueFroala.prototype, "collapsed", {
        get: function () {
            return !this.isFocused && this.isEmpty;
        },
        enumerable: true,
        configurable: true
    });
    VueFroala.prototype.onResize = function () {
        if (!this.isFocused) {
            this.adjusteToolbarPosition();
        }
    };
    VueFroala.prototype.desktopMode = function () {
        if (this.froalaEditor && this.froalaEditor.$tb) {
            this.froalaEditor.$tb.find(".fr-command").show();
            this.froalaEditor.$tb.find(".fr-command[data-cmd*=\"-sub-menu\"]").hide();
            this.froalaEditor.$tb.find(".fr-command[data-cmd=\"hide\"]").hide();
        }
    };
    VueFroala.prototype.mobileMode = function () {
        if (this.froalaEditor && this.froalaEditor.$tb) {
            this.froalaEditor.$tb.find(".fr-command").hide();
            this.froalaEditor.$tb.find(".fr-command[data-cmd*=\"-sub-menu\"]").show();
            this.froalaEditor.$tb.find(".fr-command[data-cmd=\"fullscreen\"]").show();
            this.froalaEditor.$tb.find(".fr-command[data-cmd=\"insertLink\"]").show();
            this.froalaEditor.$tb.find(".fr-command[data-cmd=\"specialCharacters\"]").show();
            this.froalaEditor.$tb.find(".fr-command[data-cmd=\"insertImage\"]").show();
            // show submit buttons (ex: link insertion submit button)
            this.froalaEditor.$tb.find(".fr-submit").show();
        }
    };
    VueFroala.prototype.changeMode = function () {
        // mode desktop
        if (this.as().isEqMinXS) {
            this.desktopMode();
            // hide hide button
            if (this.froalaEditor && this.froalaEditor.$tb) {
                this.froalaEditor.$tb.find(".fr-command[data-cmd=\"hide\"]").hide();
            }
        }
        else {
            this.mobileMode();
        }
    };
    VueFroala.prototype.createEditor = function () {
        var _this = this;
        var _a;
        if (this.isInitialized) {
            return;
        }
        this.addCustomIcons();
        this.addSubMenus();
        if (this.config && this.config.pluginsEnabled.includes('image')) {
            this.addImageButton();
        }
        this.currentConfig = Object.assign(this.config || this.defaultConfig, {
            // we reemit each valid input events so froala can work in input-style component.
            events: (_a = {},
                _a[froalaEvents.InitializationDelayed] = function (_e, editor) {
                    _this.froalaEditor = editor;
                    _this.isLoaded = true;
                    _this.setReadOnly();
                    _this.htmlSet();
                    window.addEventListener('resize', _this.onResize);
                },
                _a[froalaEvents.Initialized] = function (_e, editor) {
                    _this.froalaEditor = editor;
                    _this.isInitialized = true;
                    // We have to delay the initialization of disabled until the rich text is initialized.
                    // It will remain glitchy otherwise when combined with init on click.
                    // See comment https://github.com/froala/angular-froala-wysiwyg/issues/75#issuecomment-310709095
                    _this.isDisabled = _this.disabled;
                    _this.manageInitialFocus(editor);
                },
                _a[froalaEvents.ContentChanged] = function (_e, _editor) {
                    _this.updateModel();
                },
                _a[froalaEvents.Focus] = function (_e) {
                    if (!_this.disabled) {
                        window.removeEventListener('resize', _this.onResize);
                        if (_this.isInitialized) {
                            _this.$emit('focus');
                        }
                        _this.showToolbar();
                        _this.isFocused = true;
                        _this.status = FroalaStatus.Focused;
                        _this.internalReadonly = _this.readonly;
                    }
                },
                _a[froalaEvents.Blur] = function () {
                    if (!_this.mousedownTriggered || _this.mousedownInsideEditor) {
                        _this.closeEditor();
                    }
                },
                _a[froalaEvents.KeyUp] = function (_e, _editor) {
                    if (_this.currentConfig.immediateVueModelUpdate) {
                        _this.updateModel();
                    }
                    _this.$emit('keyup');
                },
                _a[froalaEvents.KeyDown] = function (_e, _editor) {
                    _this.$emit('keydown');
                    _this.isDirty = true;
                },
                _a[froalaEvents.PasteAfter] = function (_e, _editor) {
                    _this.$emit('paste');
                },
                // if we use pasteBeforeCleanup, there's an error in froala's code
                _a[froalaEvents.PasteAfterCleanup] = function (_e, _editor, data) {
                    if (data.replace) {
                        data = replaceTags(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'div'], 'p', data);
                        return _editor.clean.html(data, ['table', 'video', 'u', 's', 'blockquote', 'button', 'input']);
                    }
                },
                _a[froalaEvents.CommandBefore] = function (_e, _editor, cmd) {
                    if (cmd === 'fullscreen') {
                        var fullscreenWasActivated = !_editor.fullscreen.isActive();
                        _this.onFullscreen(fullscreenWasActivated);
                        if (fullscreenWasActivated) {
                            _this.hideToolbar();
                        }
                    }
                },
                _a[froalaEvents.CommandAfter] = function (_e, _editor, cmd) {
                    if (cmd === 'fullscreen') {
                        if (_editor.fullscreen.isActive()) {
                            _this.showToolbar();
                        }
                    }
                },
                _a[froalaEvents.ShowLinkInsert] = function (_e, editor) {
                    _this.manageLinkInsert(editor);
                },
                _a[froalaEvents.ImageRemoved] = function (_e, _editor, img) {
                    _this.$emit('image-removed', img[0].dataset.id, _this.fileUploadStoreName);
                    _this.updateModel();
                },
                _a[froalaEvents.ImageInserted] = function (_e, _editor, img) {
                    img[0].alt = '';
                    _this.updateModel();
                },
                _a)
        });
        this._$element = $(this.$refs.editor);
        this.registerEvents();
        if (this._$element.froalaEditor) {
            this._$editor = this._$element.froalaEditor(this.currentConfig).data('froala.editor').$el;
        }
    };
    VueFroala.prototype.closeEditor = function () {
        this.status = FroalaStatus.Blurring;
        window.addEventListener('resize', this.onResize);
        this.$emit('blur');
        this.hideToolbar();
        this.isFocused = false;
        this.status = FroalaStatus.Blurred;
        this.isDirty = false;
        this.internalReadonly = false;
        this.isDisabled = this.disabled;
    };
    VueFroala.prototype.setDisabled = function () {
        // We have to delay the initialization of disabled until the rich text is initialized.
        // It will remain glitchy otherwise when combined with init on click.
        // See comment https://github.com/froala/angular-froala-wysiwyg/issues/75#issuecomment-310709095
        if (this.isInitialized) {
            this.isDisabled = this.disabled;
        }
    };
    Object.defineProperty(VueFroala.prototype, "isDisabled", {
        get: function () {
            return this.disabled;
        },
        set: function (value) {
            if (value) {
                this.froalaEditor.edit.off();
            }
            else {
                this.froalaEditor.edit.on();
            }
        },
        enumerable: true,
        configurable: true
    });
    VueFroala.prototype.setReadOnly = function () {
        this.internalReadonly = this.readonly;
    };
    VueFroala.prototype.simulateReadonlyBlur = function (event) {
        if (!this.$el.contains(event.target)) {
            if (this.isFocused) {
                this.froalaEditor.edit.on();
                this.froalaEditor.events.trigger('blur');
            }
            document.removeEventListener('mousedown', this.simulateReadonlyBlur, true);
        }
    };
    Object.defineProperty(VueFroala.prototype, "internalReadonly", {
        get: function () {
            return this.readonly;
        },
        set: function (value) {
            if (!this.froalaEditor) {
                return;
            }
            document.removeEventListener('mousedown', this.simulateReadonlyBlur, true);
            if (value) {
                if (this.isFocused) {
                    this.hideToolbar();
                    document.addEventListener('mousedown', this.simulateReadonlyBlur, true);
                    this.froalaEditor.edit.off();
                }
            }
            else {
                this.froalaEditor.edit.on();
            }
        },
        enumerable: true,
        configurable: true
    });
    VueFroala.prototype.editorIsAvailable = function () {
        return this.froalaEditor !== undefined && this.froalaEditor !== null && this.isInitialized;
    };
    VueFroala.prototype.manageInitialFocus = function (editor) {
        // the editor might or might not be focused when initializing.  If it is focused, we have to emit the focus event.  Otherwise, we have to hide the toolbar.
        if (!editor.core.hasFocus()) {
            this.hideToolbar();
        }
        else {
            this.$emit('focus');
        }
    };
    VueFroala.prototype.manageLinkInsert = function (editor) {
        var popup = editor.popups.get('link.insert')[0];
        var urlField = popup.querySelector("[name=\"href\"]");
        if (!urlField.value) {
            popup.querySelector("[name=\"target\"]").checked = true;
        }
    };
    VueFroala.prototype.hideToolbar = function () {
        if (this.editorIsAvailable()) {
            this.froalaEditor.toolbar.hide();
            this.adjusteToolbarPosition();
        }
    };
    VueFroala.prototype.showToolbar = function () {
        if (this.editorIsAvailable() && !this.internalReadonly) {
            this.froalaEditor.toolbar.show();
            var toolBar = this.$el.querySelector(FroalaElements.TOOLBAR);
            toolBar.style.removeProperty('margin-top');
        }
    };
    VueFroala.prototype.adjusteToolbarPosition = function () {
        var toolBar = this.$el.querySelector(FroalaElements.TOOLBAR);
        if (toolBar) {
            toolBar.style.marginTop = "-" + toolBar.offsetHeight + "px";
        }
    };
    VueFroala.prototype.destroyEditor = function () {
        if (this._$element) {
            this.isLoaded = false;
            this.isInitialized = false;
            this.isFocused = false;
            this.listeningEvents && this._$element.off(this.listeningEvents.join(' '));
            if (this.froalaEditor) {
                this.froalaEditor.destroy();
            }
            this.listeningEvents.length = 0;
            this._$element = undefined;
            this.froalaEditor = undefined;
            this.internalReadonly = false;
        }
    };
    VueFroala.prototype.updateModel = function () {
        var returnedHtml = this._$element.froalaEditor('html.get');
        if (this.internalValue === returnedHtml) {
            return;
        }
        var modelContent = this.removeEmptyHTML(returnedHtml);
        this.internalValue = returnedHtml;
        this.$emit('input', modelContent);
    };
    VueFroala.prototype.removeEmptyHTML = function (value) {
        var div = document.createElement('div');
        div.innerHTML = value;
        if ((div.textContent || div.innerText || '').trim().length > 0) {
            return value;
        }
        else if (value.includes('<img')) {
            return value;
        }
        return '';
    };
    VueFroala.prototype.registerEvent = function (element, eventName, callback) {
        if (!element || !eventName || !callback) {
            return;
        }
        this.listeningEvents.push(eventName);
        element.on(eventName, callback);
    };
    VueFroala.prototype.registerEvents = function () {
        var events = this.currentConfig.events;
        if (!events) {
            return;
        }
        for (var event_1 in events) {
            if (events.hasOwnProperty(event_1)) {
                this.registerEvent(this._$element, event_1, events[event_1]);
            }
        }
    };
    VueFroala.prototype.htmlSet = function () {
        if (this.internalValue === this.value || !this.isLoaded) {
            return;
        }
        if (this.froalaEditor) {
            this.internalValue = this.value;
            this.froalaEditor.html.set(this.value || '', true);
            if (this.froalaEditor.undo) {
                // This will reset the undo stack everytime the model changes externally. Can we fix this?
                this.froalaEditor.undo.reset();
                this.froalaEditor.undo.saveStep();
            }
        }
    };
    __decorate([
        Prop({
            default: 'div'
        })
    ], VueFroala.prototype, "tag", void 0);
    __decorate([
        Prop({ default: '' })
    ], VueFroala.prototype, "value", void 0);
    __decorate([
        Prop({ default: false })
    ], VueFroala.prototype, "disabled", void 0);
    __decorate([
        Prop({ default: false })
    ], VueFroala.prototype, "readonly", void 0);
    __decorate([
        Prop()
    ], VueFroala.prototype, "config", void 0);
    __decorate([
        Prop()
    ], VueFroala.prototype, "customTranslations", void 0);
    __decorate([
        Emit('fullscreen')
    ], VueFroala.prototype, "onFullscreen", null);
    __decorate([
        Watch('value')
    ], VueFroala.prototype, "refreshValue", null);
    __decorate([
        Watch('isEqMinXS')
    ], VueFroala.prototype, "changeMode", null);
    __decorate([
        Watch('disabled')
    ], VueFroala.prototype, "setDisabled", null);
    __decorate([
        Watch('readonly')
    ], VueFroala.prototype, "setReadOnly", null);
    VueFroala = __decorate([
        WithRender,
        Component({
            mixins: [
                ElementQueries
            ]
        })
    ], VueFroala);
    return VueFroala;
}(ModulVue));
export { VueFroala };
export default VueFroala;
//# sourceMappingURL=vue-froala.js.map