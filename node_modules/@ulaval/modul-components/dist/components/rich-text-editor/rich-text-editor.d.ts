import { PluginObject } from 'vue';
import { InputManagementData } from '../../mixins/input-management/input-management';
import { InputStateInputSelector } from '../../mixins/input-state/input-state';
import { MFile } from '../../utils/file/file';
import { ModulVue } from '../../utils/vue/vue';
import { MRichTextEditorDefaultOptions } from './rich-text-editor-options';
export declare enum MRichTextEditorMode {
    STANDARD = 0,
    MEDIA = 1
}
export declare class MRichTextEditor extends ModulVue implements InputManagementData, InputStateInputSelector {
    selector: string;
    internalValue: string;
    value: string;
    mode: MRichTextEditorMode;
    toolbarStickyOffset: string;
    scrollableContainer: string | undefined;
    onFullscreen(fullscreenWasActived: boolean): void;
    customTranslations: {
        [key: string]: string;
    };
    protected id: string;
    mounted(): void;
    readonly internalOptions: any;
    readonly froalaLicenseKey: string;
    getDefaultOptions(): MRichTextEditorDefaultOptions;
    getSelectorErrorMsg(prop: string): string;
    protected refreshModel(newValue: string): void;
    protected calculateToolbarStickyOffset(): number | undefined;
    private isNumber;
    protected getScrollableContainer(): string | undefined;
    protected testSelectorProps(): void;
    protected imageReady(file: MFile, storeName: string): void;
    protected imageAdded(file: MFile, insertImage: (file: MFile, id: string) => void): void;
    protected imageRemoved(id: string, storeName: string): void;
}
declare const RichTextEditorPlugin: PluginObject<any>;
export default RichTextEditorPlugin;
//# sourceMappingURL=rich-text-editor.d.ts.map