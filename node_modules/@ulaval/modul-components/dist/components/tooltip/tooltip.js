var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Component from 'vue-class-component';
import { Prop, Watch } from 'vue-property-decorator';
import { MediaQueries } from '../../mixins/media-queries/media-queries';
import MediaQueriesPlugin from '../../utils/media-queries/media-queries';
import uuid from '../../utils/uuid/uuid';
import { ModulVue } from '../../utils/vue/vue';
import { TOOLTIP_NAME } from '../component-names';
import I18nPlugin from '../i18n/i18n';
import IconButtonPlugin from '../icon-button/icon-button';
import IconPlugin from '../icon/icon';
import LinkPlugin from '../link/link';
import { MPopperPlacement } from '../popper/popper';
import PopupPlugin from '../popup/popup';
import WithRender from './tooltip.html?style=./tooltip.scss';
export var MTooltipMode;
(function (MTooltipMode) {
    MTooltipMode["Icon"] = "icon";
    MTooltipMode["Link"] = "link";
})(MTooltipMode || (MTooltipMode = {}));
export var MTooltipSize;
(function (MTooltipSize) {
    MTooltipSize["Small"] = "small";
    MTooltipSize["Large"] = "large";
})(MTooltipSize || (MTooltipSize = {}));
var MTooltip = /** @class */ (function (_super) {
    __extends(MTooltip, _super);
    function MTooltip() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.propOpen = false;
        _this.id = "mTooltip-" + uuid.generate();
        return _this;
    }
    MTooltip.prototype.mounted = function () {
        this.propOpen = this.open;
    };
    MTooltip.prototype.openChanged = function (open) {
        this.propOpen = open;
    };
    Object.defineProperty(MTooltip.prototype, "propMode", {
        get: function () {
            return this.mode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MTooltip.prototype, "propCloseButton", {
        get: function () {
            return this.as().isMqMaxS ? false : this.closeButton;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MTooltip.prototype, "hasDefaultSlot", {
        get: function () {
            return !!this.$slots.default;
        },
        enumerable: true,
        configurable: true
    });
    MTooltip.prototype.onOpen = function () {
        this.$emit('open');
    };
    MTooltip.prototype.onClose = function (event) {
        this.$emit('close', event);
    };
    MTooltip.prototype.onClick = function () {
        this.$emit('click');
    };
    MTooltip.prototype.getOpenTitle = function () {
        return this.openTitle === undefined ? this.$i18n.translate('m-tooltip:open') : this.openTitle;
    };
    MTooltip.prototype.getCloseTitle = function () {
        return this.closeTitle === undefined ? this.$i18n.translate('m-tooltip:close') : this.closeTitle;
    };
    Object.defineProperty(MTooltip.prototype, "propTitle", {
        get: function () {
            return this.propOpen ? this.getCloseTitle() : this.getOpenTitle();
        },
        enumerable: true,
        configurable: true
    });
    MTooltip.prototype.close = function () {
        this.propOpen = false;
    };
    Object.defineProperty(MTooltip.prototype, "ariaControls", {
        get: function () {
            return this.id + '-controls';
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Prop()
    ], MTooltip.prototype, "open", void 0);
    __decorate([
        Prop({
            default: MTooltipMode.Icon,
            validator: function (value) {
                return value === MTooltipMode.Icon ||
                    value === MTooltipMode.Link;
            }
        })
    ], MTooltip.prototype, "mode", void 0);
    __decorate([
        Prop({
            default: MPopperPlacement.Bottom,
            validator: function (value) {
                return value === MPopperPlacement.Bottom ||
                    value === MPopperPlacement.BottomEnd ||
                    value === MPopperPlacement.BottomStart ||
                    value === MPopperPlacement.Left ||
                    value === MPopperPlacement.LeftEnd ||
                    value === MPopperPlacement.LeftStart ||
                    value === MPopperPlacement.Right ||
                    value === MPopperPlacement.RightEnd ||
                    value === MPopperPlacement.RightStart ||
                    value === MPopperPlacement.Top ||
                    value === MPopperPlacement.TopEnd ||
                    value === MPopperPlacement.TopStart;
            }
        })
    ], MTooltip.prototype, "placement", void 0);
    __decorate([
        Prop({ default: true })
    ], MTooltip.prototype, "closeButton", void 0);
    __decorate([
        Prop()
    ], MTooltip.prototype, "disabled", void 0);
    __decorate([
        Prop()
    ], MTooltip.prototype, "openTitle", void 0);
    __decorate([
        Prop()
    ], MTooltip.prototype, "closeTitle", void 0);
    __decorate([
        Prop()
    ], MTooltip.prototype, "className", void 0);
    __decorate([
        Prop({
            default: MTooltipSize.Small,
            validator: function (value) {
                return value === MTooltipSize.Large ||
                    value === MTooltipSize.Small;
            }
        })
    ], MTooltip.prototype, "size", void 0);
    __decorate([
        Watch('open')
    ], MTooltip.prototype, "openChanged", null);
    MTooltip = __decorate([
        WithRender,
        Component({
            mixins: [MediaQueries]
        })
    ], MTooltip);
    return MTooltip;
}(ModulVue));
export { MTooltip };
var TooltipPlugin = {
    install: function (v, options) {
        v.use(PopupPlugin);
        v.use(IconPlugin);
        v.use(IconButtonPlugin);
        v.use(LinkPlugin);
        v.use(I18nPlugin);
        v.use(MediaQueriesPlugin);
        v.component(TOOLTIP_NAME, MTooltip);
    }
};
export default TooltipPlugin;
//# sourceMappingURL=tooltip.js.map