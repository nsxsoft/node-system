var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Component from 'vue-class-component';
import { Prop } from 'vue-property-decorator';
import TextareaAutoHeightPlugin from '../../directives/textarea-auto-height/textarea-auto-height';
import { ElementQueries } from '../../mixins/element-queries/element-queries';
import { InputLabel } from '../../mixins/input-label/input-label';
import { InputManagement } from '../../mixins/input-management/input-management';
import { InputState } from '../../mixins/input-state/input-state';
import { InputWidth } from '../../mixins/input-width/input-width';
import uuid from '../../utils/uuid/uuid';
import { ModulVue } from '../../utils/vue/vue';
import { TEXTAREA_NAME } from '../component-names';
import InputStyle from '../input-style/input-style';
import ValidationMesagePlugin from '../validation-message/validation-message';
import WithRender from './textarea.html?style=./textarea.scss';
import CharacterCountPlugin from '../character-count/character-count';
var MTextarea = /** @class */ (function (_super) {
    __extends(MTextarea, _super);
    function MTextarea() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.internalTextareaHeight = '0';
        _this.id = "mTextarea-" + uuid.generate();
        return _this;
    }
    Object.defineProperty(MTextarea.prototype, "valueLength", {
        get: function () {
            return this.internalValue.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MTextarea.prototype, "maxLengthNumber", {
        get: function () {
            return !this.lengthOverflow && this.maxLength > 0 ? this.maxLength : Infinity;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MTextarea.prototype, "hasTextareaError", {
        get: function () {
            return this.as().hasError;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MTextarea.prototype, "isTextareaValid", {
        get: function () {
            return this.as().isValid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MTextarea.prototype, "hasCounterTransition", {
        get: function () {
            return !this.as().hasErrorMessage;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Prop()
    ], MTextarea.prototype, "characterCount", void 0);
    __decorate([
        Prop({ default: 0 })
    ], MTextarea.prototype, "maxLength", void 0);
    __decorate([
        Prop({ default: true })
    ], MTextarea.prototype, "lengthOverflow", void 0);
    __decorate([
        Prop({ default: 0 })
    ], MTextarea.prototype, "characterCountThreshold", void 0);
    MTextarea = __decorate([
        WithRender,
        Component({
            mixins: [
                InputState,
                InputManagement,
                InputWidth,
                InputLabel,
                ElementQueries
            ]
        })
    ], MTextarea);
    return MTextarea;
}(ModulVue));
export { MTextarea };
var TextareaPlugin = {
    install: function (v, options) {
        v.use(InputStyle);
        v.use(ValidationMesagePlugin);
        v.use(TextareaAutoHeightPlugin);
        v.use(CharacterCountPlugin);
        v.component(TEXTAREA_NAME, MTextarea);
    }
};
export default TextareaPlugin;
//# sourceMappingURL=textarea.js.map