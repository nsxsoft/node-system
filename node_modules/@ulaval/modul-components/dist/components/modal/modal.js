var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Component from 'vue-class-component';
import { Prop } from 'vue-property-decorator';
import { BackdropMode, Portal, PortalTransitionDuration } from '../../mixins/portal/portal';
import UserAgentUtil from '../../utils/user-agent/user-agent';
import { ModulVue } from '../../utils/vue/vue';
import { MODAL_NAME } from '../component-names';
import IconButtonPlugin from '../icon-button/icon-button';
import WithRender from './modal.html?style=./modal.scss';
export var MModalSize;
(function (MModalSize) {
    MModalSize["FullScreen"] = "full-screen";
    MModalSize["Large"] = "large";
    MModalSize["Regular"] = "regular";
    MModalSize["Small"] = "small";
})(MModalSize || (MModalSize = {}));
var MModal = /** @class */ (function (_super) {
    __extends(MModal, _super);
    function MModal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.hasKeyboard = false;
        _this.closeTitle = _this.$i18n.translate('m-modal:close');
        return _this;
    }
    MModal.prototype.closeModal = function () {
        this.as().tryClose();
    };
    MModal.prototype.handlesFocus = function () {
        return this.focusManagement;
    };
    MModal.prototype.doCustomPropOpen = function (value) {
        return false;
    };
    MModal.prototype.getBackdropMode = function () {
        return this.sizeFullSceen ? BackdropMode.ScrollOnly : BackdropMode.BackdropFast;
    };
    Object.defineProperty(MModal.prototype, "sizeFullSceen", {
        get: function () {
            var fullScreen = !this.as().isMqMinS ? true : this.size === MModalSize.FullScreen ? true : false;
            this.as().transitionDuration = fullScreen ? PortalTransitionDuration.XSlow : PortalTransitionDuration.Regular;
            return fullScreen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MModal.prototype, "sizeLarge", {
        get: function () {
            return this.as().isMqMinS && this.size === MModalSize.Large;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MModal.prototype, "sizeSmall", {
        get: function () {
            return this.as().isMqMinS && this.size === MModalSize.Small;
        },
        enumerable: true,
        configurable: true
    });
    MModal.prototype.getPortalElement = function () {
        return this.$refs.article;
    };
    MModal.prototype.mounted = function () {
        if (!this.hasHeader) {
            this.$log.warn('<' + MODAL_NAME + '> needs a header slot or title prop.');
        }
    };
    Object.defineProperty(MModal.prototype, "hasDefaultSlot", {
        get: function () {
            return !!this.$slots.default;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MModal.prototype, "hasHeader", {
        get: function () {
            return this.hasTitle || !!this.$slots.header;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MModal.prototype, "hasTitle", {
        get: function () {
            return !!this.title;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MModal.prototype, "hasFooterSlot", {
        get: function () {
            return !!this.$slots.footer;
        },
        enumerable: true,
        configurable: true
    });
    MModal.prototype.backdropClick = function () {
        if (this.closeOnBackdrop) {
            this.as().tryClose();
        }
    };
    Object.defineProperty(MModal.prototype, "isAndroid", {
        get: function () {
            return UserAgentUtil.isAndroid();
        },
        enumerable: true,
        configurable: true
    });
    MModal.prototype.onFocusIn = function () {
        if (this.isAndroid) {
            this.hasKeyboard = true;
        }
    };
    MModal.prototype.onFocusOut = function () {
        if (this.isAndroid) {
            this.hasKeyboard = false;
        }
    };
    __decorate([
        Prop({
            default: MModalSize.Regular,
            validator: function (value) {
                return value === MModalSize.Regular ||
                    value === MModalSize.FullScreen ||
                    value === MModalSize.Large ||
                    value === MModalSize.Small;
            }
        })
    ], MModal.prototype, "size", void 0);
    __decorate([
        Prop({ default: true })
    ], MModal.prototype, "closeOnBackdrop", void 0);
    __decorate([
        Prop({ default: true })
    ], MModal.prototype, "focusManagement", void 0);
    __decorate([
        Prop()
    ], MModal.prototype, "title", void 0);
    __decorate([
        Prop({ default: true })
    ], MModal.prototype, "bodyMaxWidth", void 0);
    __decorate([
        Prop({ default: true })
    ], MModal.prototype, "padding", void 0);
    __decorate([
        Prop({ default: true })
    ], MModal.prototype, "paddingHeader", void 0);
    __decorate([
        Prop({ default: true })
    ], MModal.prototype, "paddingBody", void 0);
    __decorate([
        Prop({ default: true })
    ], MModal.prototype, "paddingFooter", void 0);
    MModal = __decorate([
        WithRender,
        Component({
            mixins: [Portal]
        })
    ], MModal);
    return MModal;
}(ModulVue));
export { MModal };
var ModalPlugin = {
    install: function (v, options) {
        v.use(IconButtonPlugin);
        v.component(MODAL_NAME, MModal);
    }
};
export default ModalPlugin;
//# sourceMappingURL=modal.js.map