var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import moment from 'moment';
import Vue from 'vue';
import Component from 'vue-class-component';
import { Model, Prop, Watch } from 'vue-property-decorator';
import { InputState } from '../../mixins/input-state/input-state';
import { ModulVue } from '../../utils/vue/vue';
import { DATEFIELDS_NAME } from '../component-names';
import DropdownPlugin from '../dropdown/dropdown';
import I18nPlugin from '../i18n/i18n';
import IconButtonPlugin from '../icon-button/icon-button';
import SpinnerPlugin from '../spinner/spinner';
import WithRender from './datefields.html?style=./datefields.scss';
var VIEW_DATE = 'date';
var VIEW_MONTH = 'month';
var VIEW_YEAR = 'year';
var MDatefields = /** @class */ (function (_super) {
    __extends(MDatefields, _super);
    function MDatefields() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.months = 12;
        // Model
        _this.internalYear = 0;
        _this.internalMonth = 0;
        _this.internalDate = 0;
        return _this;
    }
    MDatefields.prototype.created = function () {
        moment.locale([this.$i18n.currentLang(), 'en-ca']);
        this.setInternal(this.value);
    };
    MDatefields.prototype.setInternal = function (value) {
        var valueYear = !value ? undefined : value instanceof Date ? value.getFullYear() : value.year();
        if (!valueYear || (valueYear >= this.minYear && valueYear <= this.maxYear)) {
            this.internalYear = valueYear;
            this.internalMonth = !value ? undefined : value instanceof Date ? value.getMonth() + 1 : value.month() + 1;
            this.internalDate = !value ? undefined : value instanceof Date ? value.getDate() : value.date();
        }
        else {
            console.error(this.$i18n.translate('m-datefields:year-out-of-range'));
            this.internalYear = undefined;
            this.internalMonth = undefined;
            this.internalDate = undefined;
        }
    };
    Object.defineProperty(MDatefields.prototype, "years", {
        get: function () {
            var yearsRanges = [];
            if (this.year) {
                var currentYear = this.minYear;
                if (this.minYear <= this.maxYear) {
                    while (currentYear <= this.maxYear) {
                        yearsRanges.push(currentYear);
                        currentYear++;
                    }
                }
                else {
                    console.error(this.$i18n.translate('m-datefields:year-range-error'));
                }
            }
            return yearsRanges;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDatefields.prototype, "dates", {
        get: function () {
            var value = 31;
            if (this.date && this.internalMonth) {
                value = moment((this.internalYear ? this.internalYear : 2000) + "-" + this.internalMonth, 'YYYY-MM').daysInMonth();
            }
            return value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDatefields.prototype, "complete", {
        get: function () {
            return !!((!this.year || (this.year && this.internalYear)) &&
                (!this.month || (this.month && this.internalMonth)) &&
                (!this.date || (this.date && this.internalDate)));
        },
        enumerable: true,
        configurable: true
    });
    MDatefields.prototype.emitDate = function () {
        var date = {};
        var emitValue = true;
        var model = undefined;
        if (this.complete) {
            if (this.year && this.internalYear) {
                date[VIEW_YEAR] = this.internalYear;
            }
            if (this.month && this.internalMonth) {
                date[VIEW_MONTH] = this.internalMonth - 1;
            }
            if (this.date && this.internalDate) {
                if (this.internalDate <= moment((this.year && this.internalYear ? this.internalYear : 2000) + "-" + (this.month && this.internalMonth ? this.internalMonth : 1), 'YYYY-MM').daysInMonth()) {
                    date[VIEW_DATE] = this.internalDate;
                }
                else {
                    this.internalDate = undefined;
                    emitValue = false;
                }
            }
            if (emitValue) {
                model = this.value instanceof Date ? moment(date).toDate() : moment(date);
                this.$emit('change', model);
            }
        }
        this.$emit('complete', this.complete && emitValue);
    };
    MDatefields.prototype.getMonthLabel = function (value) {
        return moment().month(value - 1).format('MMMM');
    };
    MDatefields.prototype.getDateLabel = function (value) {
        var strValue = value.toString();
        if (strValue.length === 1) {
            strValue = '0' + strValue;
        }
        return strValue;
    };
    MDatefields.prototype.getPlaceholder = function (key) {
        return this.$i18n.translate('m-datefields:' + key);
    };
    __decorate([
        Model('change'),
        Prop()
    ], MDatefields.prototype, "value", void 0);
    __decorate([
        Prop({ default: 1900 })
    ], MDatefields.prototype, "minYear", void 0);
    __decorate([
        Prop({ default: moment().year() + 5 })
    ], MDatefields.prototype, "maxYear", void 0);
    __decorate([
        Prop({ default: true })
    ], MDatefields.prototype, "year", void 0);
    __decorate([
        Prop({ default: true })
    ], MDatefields.prototype, "month", void 0);
    __decorate([
        Prop({ default: true })
    ], MDatefields.prototype, "date", void 0);
    __decorate([
        Watch('value')
    ], MDatefields.prototype, "setInternal", null);
    MDatefields = __decorate([
        WithRender,
        Component({
            mixins: [
                InputState
            ]
        })
    ], MDatefields);
    return MDatefields;
}(ModulVue));
export { MDatefields };
var DatefieldsPlugin = {
    install: function (v, options) {
        v.prototype.$log.error('MDatefields will be deprecated in modul v.1.0');
        Vue.use(DropdownPlugin);
        Vue.use(I18nPlugin);
        Vue.use(IconButtonPlugin);
        Vue.use(SpinnerPlugin);
        v.component(DATEFIELDS_NAME, MDatefields);
    }
};
export default DatefieldsPlugin;
//# sourceMappingURL=datefields.js.map