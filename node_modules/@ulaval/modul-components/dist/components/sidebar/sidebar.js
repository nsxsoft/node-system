var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Component from 'vue-class-component';
import { Prop } from 'vue-property-decorator';
import { BackdropMode, Portal, PortalTransitionDuration } from '../../mixins/portal/portal';
import { ModulVue } from '../../utils/vue/vue';
import { SIDEBAR_NAME } from '../component-names';
import I18nPlugin from '../i18n/i18n';
import IconButtonPlugin from '../icon-button/icon-button';
import WithRender from './sidebar.html?style=./sidebar.scss';
export var MSidebarOrigin;
(function (MSidebarOrigin) {
    MSidebarOrigin["Top"] = "top";
    MSidebarOrigin["Right"] = "right";
    MSidebarOrigin["Bottom"] = "bottom";
    MSidebarOrigin["Left"] = "left";
})(MSidebarOrigin || (MSidebarOrigin = {}));
export var MSidebarCloseButtonPosition;
(function (MSidebarCloseButtonPosition) {
    MSidebarCloseButtonPosition["Left"] = "left";
    MSidebarCloseButtonPosition["Right"] = "right";
})(MSidebarCloseButtonPosition || (MSidebarCloseButtonPosition = {}));
var MSidebar = /** @class */ (function (_super) {
    __extends(MSidebar, _super);
    function MSidebar() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MSidebar.prototype, "popupBody", {
        get: function () {
            return this.$refs.article.querySelector('.m-popup__body');
        },
        enumerable: true,
        configurable: true
    });
    MSidebar.prototype.handlesFocus = function () {
        return this.focusManagement;
    };
    MSidebar.prototype.doCustomPropOpen = function (value) {
        return false;
    };
    MSidebar.prototype.getBackdropMode = function () {
        return BackdropMode.BackdropFast;
    };
    MSidebar.prototype.getPortalElement = function () {
        return this.$refs.article;
    };
    MSidebar.prototype.mounted = function () {
        this.as().transitionDuration = PortalTransitionDuration.Slow;
    };
    Object.defineProperty(MSidebar.prototype, "hasHeaderSlot", {
        get: function () {
            return !!this.$slots.header;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MSidebar.prototype, "hasDefaultSlot", {
        get: function () {
            return !!this.$slots.default;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MSidebar.prototype, "hasHeader", {
        get: function () {
            return this.hasHeaderSlot || this.hasTitle || (this.closeButton && this.origin !== MSidebarOrigin.Bottom);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MSidebar.prototype, "hasTitle", {
        get: function () {
            return !!this.title;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MSidebar.prototype, "hasFooterSlot", {
        get: function () {
            return !!this.$slots.footer;
        },
        enumerable: true,
        configurable: true
    });
    MSidebar.prototype.backdropClick = function () {
        if (this.closeOnBackdrop) {
            this.as().tryClose();
        }
    };
    MSidebar.prototype.closeModal = function () {
        this.as().tryClose();
    };
    Object.defineProperty(MSidebar.prototype, "marginLeft", {
        get: function () {
            return this.origin === MSidebarOrigin.Right ? 'calc(100% - ' + this.propWidth + ')' : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MSidebar.prototype, "propWidth", {
        get: function () {
            if (this.origin === MSidebarOrigin.Left || this.origin === MSidebarOrigin.Right) {
                return this.width ? this.width : '50%';
            }
            else {
                return '100%';
            }
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Prop({
            default: MSidebarOrigin.Bottom,
            validator: function (value) {
                return value === MSidebarOrigin.Top ||
                    value === MSidebarOrigin.Right ||
                    value === MSidebarOrigin.Left ||
                    value === MSidebarOrigin.Bottom;
            }
        })
    ], MSidebar.prototype, "origin", void 0);
    __decorate([
        Prop()
    ], MSidebar.prototype, "width", void 0);
    __decorate([
        Prop()
    ], MSidebar.prototype, "title", void 0);
    __decorate([
        Prop({ default: true })
    ], MSidebar.prototype, "closeButton", void 0);
    __decorate([
        Prop({
            default: MSidebarCloseButtonPosition.Right,
            validator: function (value) {
                return value === MSidebarCloseButtonPosition.Right ||
                    value === MSidebarCloseButtonPosition.Left;
            }
        })
    ], MSidebar.prototype, "closeButtonPosition", void 0);
    __decorate([
        Prop({ default: true })
    ], MSidebar.prototype, "focusManagement", void 0);
    __decorate([
        Prop({ default: true })
    ], MSidebar.prototype, "closeOnBackdrop", void 0);
    __decorate([
        Prop({ default: true })
    ], MSidebar.prototype, "padding", void 0);
    __decorate([
        Prop({ default: true })
    ], MSidebar.prototype, "paddingHeader", void 0);
    __decorate([
        Prop({ default: true })
    ], MSidebar.prototype, "paddingBody", void 0);
    __decorate([
        Prop({ default: true })
    ], MSidebar.prototype, "paddingFooter", void 0);
    MSidebar = __decorate([
        WithRender,
        Component({
            mixins: [Portal]
        })
    ], MSidebar);
    return MSidebar;
}(ModulVue));
export { MSidebar };
var SidebarPlugin = {
    install: function (v, options) {
        v.use(IconButtonPlugin);
        v.use(I18nPlugin);
        v.component(SIDEBAR_NAME, MSidebar);
    }
};
export default SidebarPlugin;
//# sourceMappingURL=sidebar.js.map