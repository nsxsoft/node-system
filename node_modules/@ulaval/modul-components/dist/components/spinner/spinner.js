var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Component from 'vue-class-component';
import { Prop, Watch } from 'vue-property-decorator';
import { BackdropMode } from '../../mixins/portal/portal';
import uuid from '../../utils/uuid/uuid';
import { ModulVue } from '../../utils/vue/vue';
import { SPINNER_NAME } from '../component-names';
import I18nPlugin from '../i18n/i18n';
import WithRender from './spinner.html?style=./spinner.scss';
export var MSpinnerStyle;
(function (MSpinnerStyle) {
    MSpinnerStyle["Dark"] = "dark";
    MSpinnerStyle["Regular"] = "regular";
    MSpinnerStyle["Light"] = "light";
    MSpinnerStyle["Lighter"] = "lighter";
})(MSpinnerStyle || (MSpinnerStyle = {}));
export var MSpinnerSize;
(function (MSpinnerSize) {
    MSpinnerSize["Large"] = "large";
    MSpinnerSize["Small"] = "small";
})(MSpinnerSize || (MSpinnerSize = {}));
export var PROCESSING_WARN = 'Change of property "processing" is not supported';
var SPINNER_ID = 'MSpinner';
var MSpinner = /** @class */ (function (_super) {
    __extends(MSpinner, _super);
    function MSpinner() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.spinnerId = SPINNER_ID + '-' + uuid.generate();
        _this.portalTargetEl = {}; // initialized to be responsive
        _this.initialized = false; // seems to be necessary since $refs are not responsive
        _this.visible = false;
        return _this;
    }
    MSpinner.prototype.created = function () {
        this.portalTargetEl = undefined;
    };
    MSpinner.prototype.beforeDestroy = function () {
        if (this.processing) {
            var el = document.getElementById(this.spinnerId);
            if (el) {
                document.body.removeChild(el);
            }
        }
    };
    MSpinner.prototype.onProcessingChange = function (value) {
        this.$log.warn("<" + SPINNER_NAME + ">: " + PROCESSING_WARN);
        if (!value) {
            this.removeBackdrop();
        }
    };
    Object.defineProperty(MSpinner.prototype, "spinnerElement", {
        get: function () {
            return this.processing ? this.portalTargetEl : this.$refs.spinnerContainer;
        },
        enumerable: true,
        configurable: true
    });
    MSpinner.prototype.onEnter = function () {
        if (!this.portalTargetEl && this.processing) {
            var element = document.createElement('div');
            element.setAttribute('id', this.spinnerId);
            document.body.appendChild(element);
            this.portalTargetEl = document.getElementById(this.spinnerId);
            this.stackId = this.$modul.pushElement(this.portalTargetEl, BackdropMode.BackdropSlow, false);
            this.portalTargetEl.style.position = 'absolute';
        }
        this.initialized = true;
        this.visible = true;
    };
    MSpinner.prototype.onLeave = function () {
        this.visible = false;
        if (this.processing) {
            this.removeBackdrop();
        }
    };
    MSpinner.prototype.removeBackdrop = function () {
        if (this.portalTargetEl) {
            this.$modul.popElement(this.stackId);
            this.portalTargetEl.style.position = '';
            this.portalTargetEl = undefined;
        }
    };
    Object.defineProperty(MSpinner.prototype, "hasTitleMessage", {
        get: function () {
            return this.titleMessage !== '' && this.titleMessage !== undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MSpinner.prototype, "hasDescriptionMessage", {
        get: function () {
            return this.descriptionMessage !== '' && this.descriptionMessage !== undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MSpinner.prototype, "hasTitle", {
        get: function () {
            return this.title || this.hasTitleMessage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MSpinner.prototype, "hasDescription", {
        get: function () {
            return this.description || this.hasDescriptionMessage;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Prop()
    ], MSpinner.prototype, "title", void 0);
    __decorate([
        Prop()
    ], MSpinner.prototype, "titleMessage", void 0);
    __decorate([
        Prop()
    ], MSpinner.prototype, "description", void 0);
    __decorate([
        Prop()
    ], MSpinner.prototype, "descriptionMessage", void 0);
    __decorate([
        Prop({
            default: MSpinnerStyle.Regular,
            validator: function (value) {
                return value === MSpinnerStyle.Dark ||
                    value === MSpinnerStyle.Light ||
                    value === MSpinnerStyle.Lighter ||
                    value === MSpinnerStyle.Regular;
            }
        })
    ], MSpinner.prototype, "skin", void 0);
    __decorate([
        Prop({
            default: MSpinnerSize.Large,
            validator: function (value) {
                return value === MSpinnerSize.Large ||
                    value === MSpinnerSize.Small;
            }
        })
    ], MSpinner.prototype, "size", void 0);
    __decorate([
        Prop()
    ], MSpinner.prototype, "processing", void 0);
    __decorate([
        Watch('processing')
    ], MSpinner.prototype, "onProcessingChange", null);
    MSpinner = __decorate([
        WithRender,
        Component
    ], MSpinner);
    return MSpinner;
}(ModulVue));
export { MSpinner };
var SpinnerPlugin = {
    install: function (v, options) {
        v.use(I18nPlugin);
        v.component(SPINNER_NAME, MSpinner);
    }
};
export default SpinnerPlugin;
//# sourceMappingURL=spinner.js.map