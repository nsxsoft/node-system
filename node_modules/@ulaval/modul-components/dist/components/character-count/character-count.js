var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Vue from 'vue';
import Component from 'vue-class-component';
import { Prop } from 'vue-property-decorator';
import AccordionTransitionPlugin from '../accordion/accordion-transition';
import { CHARACTER_COUNT_NAME } from '../component-names';
import WithRender from './character-count.html?style=./character-count.scss';
var MCharacterCount = /** @class */ (function (_super) {
    __extends(MCharacterCount, _super);
    function MCharacterCount() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MCharacterCount.prototype, "hasCounter", {
        get: function () {
            return this.maxLength > 0 && this.valueLength >= Math.max(0, Math.min(this.threshold, this.maxLength));
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Prop()
    ], MCharacterCount.prototype, "valueLength", void 0);
    __decorate([
        Prop({
            required: true, validator: function (value) {
                if (value === undefined) {
                    console.error('character-count component expects prop maxLength to be defined.');
                }
                return value !== undefined;
            }
        })
    ], MCharacterCount.prototype, "maxLength", void 0);
    __decorate([
        Prop({ default: 0 })
    ], MCharacterCount.prototype, "threshold", void 0);
    __decorate([
        Prop({ default: true })
    ], MCharacterCount.prototype, "transition", void 0);
    MCharacterCount = __decorate([
        WithRender,
        Component
    ], MCharacterCount);
    return MCharacterCount;
}(Vue));
export { MCharacterCount };
var CharacterCountPlugin = {
    install: function (v, options) {
        v.use(AccordionTransitionPlugin);
        v.component(CHARACTER_COUNT_NAME, MCharacterCount);
    }
};
export default CharacterCountPlugin;
//# sourceMappingURL=character-count.js.map