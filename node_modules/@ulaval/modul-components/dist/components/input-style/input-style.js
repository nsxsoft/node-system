var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Component from 'vue-class-component';
import { Prop, Watch } from 'vue-property-decorator';
import { InputState } from '../../mixins/input-state/input-state';
import { ModulVue } from '../../utils/vue/vue';
import { INPUT_STYLE_NAME } from '../component-names';
import I18nPlugin from '../i18n/i18n';
import SpinnerPlugin from '../spinner/spinner';
import WithRender from './input-style.html?style=./input-style.scss';
export var CSS_LABEL_DEFAULT_MARGIN = 10;
export var CSS_BODY_DEFAULT_MARGIN = '0';
var MInputStyle = /** @class */ (function (_super) {
    __extends(MInputStyle, _super);
    function MInputStyle() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.labelOffset = CSS_LABEL_DEFAULT_MARGIN + 'px';
        _this.bodyOffset = CSS_BODY_DEFAULT_MARGIN;
        _this.animReady = false;
        return _this;
    }
    MInputStyle.prototype.created = function () {
        var _this = this;
        setTimeout(function () {
            _this.animReady = true;
            _this.setInputWidth();
        }, 0);
    };
    MInputStyle.prototype.mounted = function () {
        this.calculateLabelOffset();
    };
    MInputStyle.prototype.setInputWidth = function () {
        var _this = this;
        // This is not very VueJs friendly.  It should be replaced by :style or something similar.
        this.$nextTick(function () {
            var labelEl = _this.$refs.label;
            var inputEl = _this.as().getInput();
            var adjustWidthAutoEl = _this.$refs.adjustWidthAuto;
            if (_this.width === 'auto' && _this.hasAdjustWidthAutoSlot) {
                setTimeout(function () {
                    if (inputEl !== undefined) {
                        inputEl.style.width = '0px';
                        setTimeout(function () {
                            if (inputEl !== null) {
                                var width = adjustWidthAutoEl.clientWidth < 50 ? 50 : adjustWidthAutoEl.clientWidth;
                                if (_this.hasLabel) {
                                    width = !_this.isLabelUp && (labelEl.clientWidth > width) ? labelEl.clientWidth : width;
                                }
                                inputEl.style.width = width + 'px';
                            }
                        }, 0);
                    }
                }, 0);
            }
            else if (inputEl) {
                if (inputEl.style.width) {
                    inputEl.style.removeProperty('width');
                }
            }
        });
    };
    MInputStyle.prototype.calculateLabelOffset = function () {
        if (this.isLabelUp) {
            var label = this.$refs.label;
            var rootStyle = window.getComputedStyle(this.$refs.root);
            if (label) {
                var labelOffset = label.clientHeight / 2;
                this.labelOffset = labelOffset > CSS_LABEL_DEFAULT_MARGIN ? labelOffset + 'px' : CSS_LABEL_DEFAULT_MARGIN + 'px';
                var bodyOffset = labelOffset - (parseFloat(rootStyle.getPropertyValue('padding-top')) + parseFloat(rootStyle.getPropertyValue('padding-bottom')));
                this.bodyOffset = bodyOffset < 0 ? CSS_BODY_DEFAULT_MARGIN : '-' + bodyOffset + 'px';
            }
        }
        else {
            this.bodyOffset = CSS_BODY_DEFAULT_MARGIN;
            this.labelOffset = CSS_LABEL_DEFAULT_MARGIN + 'px';
        }
    };
    Object.defineProperty(MInputStyle.prototype, "isLabelUp", {
        get: function () {
            return (this.hasValue || (this.isFocus && this.hasValue)) && this.hasLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MInputStyle.prototype, "hasValue", {
        get: function () {
            return this.hasDefaultSlot && !this.empty;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MInputStyle.prototype, "hasLabel", {
        get: function () {
            return !!this.label && this.label !== '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MInputStyle.prototype, "isFocus", {
        get: function () {
            var focus = this.focus && this.as().active;
            this.$emit('focus', focus);
            return focus;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MInputStyle.prototype, "hasDefaultSlot", {
        get: function () {
            return !!this.$slots.default;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MInputStyle.prototype, "hasAdjustWidthAutoSlot", {
        get: function () {
            return !!this.$slots['adjust-width-auto'];
        },
        enumerable: true,
        configurable: true
    });
    MInputStyle.prototype.onClick = function (event) {
        this.$emit('click', event);
    };
    MInputStyle.prototype.onMousedown = function (event) {
        this.$emit('mousedown', event);
    };
    MInputStyle.prototype.onMouseup = function (event) {
        this.$emit('mouseup', event);
    };
    __decorate([
        Prop({ default: '' })
    ], MInputStyle.prototype, "label", void 0);
    __decorate([
        Prop()
    ], MInputStyle.prototype, "labelFor", void 0);
    __decorate([
        Prop({ default: false })
    ], MInputStyle.prototype, "focus", void 0);
    __decorate([
        Prop({ default: true })
    ], MInputStyle.prototype, "empty", void 0);
    __decorate([
        Prop()
    ], MInputStyle.prototype, "width", void 0);
    __decorate([
        Prop()
    ], MInputStyle.prototype, "iconName", void 0);
    __decorate([
        Prop()
    ], MInputStyle.prototype, "requiredMarker", void 0);
    __decorate([
        Prop()
    ], MInputStyle.prototype, "readonly", void 0);
    __decorate([
        Prop({ default: false })
    ], MInputStyle.prototype, "cursorPointer", void 0);
    __decorate([
        Watch('isLabelUp')
    ], MInputStyle.prototype, "calculateLabelOffset", null);
    MInputStyle = __decorate([
        WithRender,
        Component({
            mixins: [InputState]
        })
    ], MInputStyle);
    return MInputStyle;
}(ModulVue));
export { MInputStyle };
var InputStylePlugin = {
    install: function (v, options) {
        v.use(I18nPlugin);
        v.use(SpinnerPlugin);
        v.component(INPUT_STYLE_NAME, MInputStyle);
    }
};
export default InputStylePlugin;
//# sourceMappingURL=input-style.js.map