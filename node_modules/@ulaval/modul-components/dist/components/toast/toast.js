var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Component from 'vue-class-component';
import { Emit, Prop } from 'vue-property-decorator';
import I18nFilterPlugin from '../../filters/i18n/i18n';
import { MediaQueries } from '../../mixins/media-queries/media-queries';
import { BackdropMode, Portal } from '../../mixins/portal/portal';
import MediaQueriesPlugin from '../../utils/media-queries/media-queries';
import { ModulVue } from '../../utils/vue/vue';
import { TOAST } from '../component-names';
import I18nPlugin from '../i18n/i18n';
import IconButtonPlugin from '../icon-button/icon-button';
import IconPlugin from '../icon/icon';
import LinkPlugin, { MLinkMode } from '../link/link';
import WithRender from './toast.html?style=./toast.scss';
export var MToastTimeout;
(function (MToastTimeout) {
    MToastTimeout["none"] = "none";
    MToastTimeout["short"] = "short";
    MToastTimeout["long"] = "long";
})(MToastTimeout || (MToastTimeout = {}));
export var MToastPosition;
(function (MToastPosition) {
    MToastPosition["TopLeft"] = "top-left";
    MToastPosition["TopCenter"] = "top-center";
    MToastPosition["TopRight"] = "top-right";
    MToastPosition["BottomLeft"] = "bottom-left";
    MToastPosition["BottomCenter"] = "bottom-center";
    MToastPosition["BottomRight"] = "bottom-right";
})(MToastPosition || (MToastPosition = {}));
export var MToastState;
(function (MToastState) {
    MToastState["Confirmation"] = "confirmation";
    MToastState["Information"] = "information";
    MToastState["Warning"] = "warning";
    MToastState["Error"] = "error";
})(MToastState || (MToastState = {}));
var MToast = /** @class */ (function (_super) {
    __extends(MToast, _super);
    function MToast() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.buttonMode = MLinkMode.Button;
        return _this;
    }
    MToast.prototype.doCustomPropOpen = function (value, el) {
        var _this = this;
        el.style.position = 'absolute';
        if (value) {
            if (this.offset !== '0') {
                this.getPortalElement().style.transform = "translateY(" + this.offset + ")";
            }
            this.internalTimeout = this.convertTimeout(this.timeout);
            if (this.internalTimeout > 0) {
                setTimeout(function () {
                    _this.onClose();
                }, this.internalTimeout);
            }
        }
        return true;
    };
    MToast.prototype.getPortalElement = function () {
        return this.$refs.toast;
    };
    MToast.prototype.getBackdropMode = function () {
        return BackdropMode.None;
    };
    MToast.prototype.handlesFocus = function () {
        return false;
    };
    MToast.prototype.mounted = function () {
        if (this.open === undefined || this.open === true) {
            this.as().propOpen = true;
        }
    };
    MToast.prototype.convertTimeout = function (timeout) {
        switch (timeout) {
            case MToastTimeout.long:
                return 15000;
            case MToastTimeout.short:
                return 5000;
            case MToastTimeout.none:
            default:
                return 0;
        }
    };
    MToast.prototype.onAction = function (event) {
        this.onClose();
    };
    MToast.prototype.onClose = function () {
        this.as().propOpen = false;
    };
    Object.defineProperty(MToast.prototype, "isStateInformation", {
        get: function () {
            return this.state === MToastState.Information;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MToast.prototype, "isStateWarning", {
        get: function () {
            return this.state === MToastState.Warning;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MToast.prototype, "isStateError", {
        get: function () {
            return this.state === MToastState.Error;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MToast.prototype, "isStateConfirmation", {
        get: function () {
            return this.state === MToastState.Confirmation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MToast.prototype, "isTop", {
        get: function () {
            return this.position === MToastPosition.TopLeft ||
                this.position === MToastPosition.TopCenter ||
                this.position === MToastPosition.TopRight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MToast.prototype, "isLeft", {
        get: function () {
            return this.position === MToastPosition.TopLeft ||
                this.position === MToastPosition.BottomLeft;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MToast.prototype, "isCenter", {
        get: function () {
            return this.position === MToastPosition.TopCenter ||
                this.position === MToastPosition.BottomCenter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MToast.prototype, "isRight", {
        get: function () {
            return this.position === MToastPosition.TopRight ||
                this.position === MToastPosition.BottomRight;
        },
        enumerable: true,
        configurable: true
    });
    MToast.prototype.getIcon = function () {
        var icon = '';
        switch (this.state) {
            case MToastState.Confirmation:
                icon = 'm-svg__confirmation';
                break;
            case MToastState.Information:
                icon = 'm-svg__information';
                break;
            case MToastState.Warning:
                icon = 'm-svg__warning';
                break;
            case MToastState.Error:
                icon = 'm-svg__error';
                break;
            default:
                break;
        }
        return icon;
    };
    __decorate([
        Prop({
            default: MToastState.Confirmation,
            validator: function (value) {
                return value === MToastState.Confirmation ||
                    value === MToastState.Information ||
                    value === MToastState.Warning ||
                    value === MToastState.Error;
            }
        })
    ], MToast.prototype, "state", void 0);
    __decorate([
        Prop({
            default: MToastPosition.BottomRight,
            validator: function (value) {
                return value === MToastPosition.TopRight ||
                    value === MToastPosition.TopCenter ||
                    value === MToastPosition.TopLeft ||
                    value === MToastPosition.BottomLeft ||
                    value === MToastPosition.BottomCenter ||
                    value === MToastPosition.BottomRight;
            }
        })
    ], MToast.prototype, "position", void 0);
    __decorate([
        Prop({
            default: MToastTimeout.none,
            validator: function (value) {
                return value === MToastTimeout.none ||
                    value === MToastTimeout.short ||
                    value === MToastTimeout.long;
            }
        })
    ], MToast.prototype, "timeout", void 0);
    __decorate([
        Prop()
    ], MToast.prototype, "open", void 0);
    __decorate([
        Prop()
    ], MToast.prototype, "actionLabel", void 0);
    __decorate([
        Prop({
            default: true
        })
    ], MToast.prototype, "icon", void 0);
    __decorate([
        Prop({
            default: '0'
        })
    ], MToast.prototype, "offset", void 0);
    __decorate([
        Emit('action-button')
    ], MToast.prototype, "onAction", null);
    MToast = __decorate([
        WithRender,
        Component({
            mixins: [MediaQueries, Portal]
        })
    ], MToast);
    return MToast;
}(ModulVue));
export { MToast };
var ToastPlugin = {
    install: function (v, options) {
        v.use(I18nFilterPlugin);
        v.use(IconPlugin);
        v.use(LinkPlugin);
        v.use(IconButtonPlugin);
        v.use(I18nPlugin);
        v.use(MediaQueriesPlugin);
        v.component(TOAST, MToast);
    }
};
export default ToastPlugin;
//# sourceMappingURL=toast.js.map