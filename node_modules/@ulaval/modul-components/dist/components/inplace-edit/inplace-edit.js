var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Vue from 'vue';
import { Component, Emit, Prop, Watch } from 'vue-property-decorator';
import { MediaQueries } from '../../mixins/media-queries/media-queries';
import { ModulVue } from '../../utils/vue/vue';
import AccordionTransitionPlugin from '../accordion/accordion-transition';
import ButtonPlugin from '../button/button';
import { INPLACE_EDIT_NAME } from '../component-names';
import OverlayPlugin from '../overlay/overlay';
import WithRender from './inplace-edit.html?style=./inplace-edit.scss';
var MInplaceEdit = /** @class */ (function (_super) {
    __extends(MInplaceEdit, _super);
    function MInplaceEdit() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.internalEditMode = false;
        return _this;
    }
    MInplaceEdit.prototype.onOk = function () { };
    MInplaceEdit.prototype.onCancel = function () { };
    MInplaceEdit.prototype.onClick = function (event) { };
    MInplaceEdit.prototype.confirm = function (event) {
        if (this.editMode) {
            this.onOk();
        }
    };
    MInplaceEdit.prototype.cancel = function (event) {
        if (this.editMode) {
            this.propEditMode = false;
            this.onCancel();
        }
    };
    MInplaceEdit.prototype.onEditMode = function (value) {
        this.internalEditMode = value;
    };
    MInplaceEdit.prototype.onMaxS = function (value, old) {
        if (this.mqMounted) {
            this.propEditMode = false;
        }
    };
    Object.defineProperty(MInplaceEdit.prototype, "propPadding", {
        get: function () {
            if (!this.propEditMode && this.padding) {
                return 'padding:' + this.padding;
            }
            else if (this.propEditMode && this.editModePadding) {
                return 'padding:' + this.editModePadding;
            }
            else {
                return '';
            }
        },
        enumerable: true,
        configurable: true
    });
    MInplaceEdit.prototype.mounted = function () {
        var _this = this;
        // should be in next tick to skip the media query initial trigger on mounted
        this.$nextTick(function () { return _this.mqMounted = true; });
    };
    Object.defineProperty(MInplaceEdit.prototype, "propEditMode", {
        get: function () {
            return this.editMode || this.internalEditMode;
        },
        set: function (value) {
            this.internalEditMode = value;
            this.$emit('update:editMode', value);
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Prop()
    ], MInplaceEdit.prototype, "editMode", void 0);
    __decorate([
        Prop()
    ], MInplaceEdit.prototype, "error", void 0);
    __decorate([
        Prop()
    ], MInplaceEdit.prototype, "waiting", void 0);
    __decorate([
        Prop()
    ], MInplaceEdit.prototype, "padding", void 0);
    __decorate([
        Prop()
    ], MInplaceEdit.prototype, "editModePadding", void 0);
    __decorate([
        Prop({
            default: function () { return (Vue.prototype).$i18n.translate('m-inplace-edit:modify'); }
        })
    ], MInplaceEdit.prototype, "title", void 0);
    __decorate([
        Emit('ok')
    ], MInplaceEdit.prototype, "onOk", null);
    __decorate([
        Emit('cancel')
    ], MInplaceEdit.prototype, "onCancel", null);
    __decorate([
        Emit('click')
    ], MInplaceEdit.prototype, "onClick", null);
    __decorate([
        Watch('editMode')
    ], MInplaceEdit.prototype, "onEditMode", null);
    __decorate([
        Watch('isMqMaxS')
    ], MInplaceEdit.prototype, "onMaxS", null);
    MInplaceEdit = __decorate([
        WithRender,
        Component({
            mixins: [MediaQueries]
        })
    ], MInplaceEdit);
    return MInplaceEdit;
}(ModulVue));
export { MInplaceEdit };
var InplaceEditPlugin = {
    install: function (v, options) {
        v.use(AccordionTransitionPlugin);
        v.use(OverlayPlugin);
        v.use(ButtonPlugin);
        v.component(INPLACE_EDIT_NAME, MInplaceEdit);
    }
};
export default InplaceEditPlugin;
//# sourceMappingURL=inplace-edit.js.map