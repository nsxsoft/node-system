var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Component from 'vue-class-component';
import { Prop } from 'vue-property-decorator';
import { ModulVue } from '../../utils/vue/vue';
import { MESSAGE_PAGE_NAME } from '../component-names';
import IconPlugin from '../icon/icon';
import LinkPlugin from '../link/link';
import { MMessageState } from '../message/message';
import ModalPlugin from '../modal/modal';
import WithRender from './message-page.html?style=./message-page.scss';
/**
 * Utility class to manage the properties related to the link displayed in the error pages.
 */
var Link = /** @class */ (function () {
    /**
     * Constructor
     * @param label Label for the url link to display.
     * @param url Target for the location to navigate to, can be relative.
     * @param external Defines to the target is external (opens in new tab), or internal (opens in same tab) to the application.
     */
    function Link(label, url, external) {
        if (external === void 0) { external = false; }
        this.label = label;
        this.url = url;
        this.external = external;
    }
    return Link;
}());
export { Link };
export var MMessagePageSkin;
(function (MMessagePageSkin) {
    MMessagePageSkin["Default"] = "default";
    MMessagePageSkin["Light"] = "light";
})(MMessagePageSkin || (MMessagePageSkin = {}));
export var MMessagePageImageSize;
(function (MMessagePageImageSize) {
    MMessagePageImageSize["Default"] = "130px";
    MMessagePageImageSize["Small"] = "76px";
})(MMessagePageImageSize || (MMessagePageImageSize = {}));
var MMessagePage = /** @class */ (function (_super) {
    __extends(MMessagePage, _super);
    function MMessagePage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MMessagePage.prototype, "isSvg", {
        get: function () {
            return (this.svgName !== undefined) && (this.svgName.trim().length > 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMessagePage.prototype, "hasHints", {
        get: function () {
            return this.hints.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMessagePage.prototype, "hasLinks", {
        get: function () {
            return this.links.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMessagePage.prototype, "styleObject", {
        get: function () {
            return {
                width: this.propImageSize
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMessagePage.prototype, "propImageSize", {
        get: function () {
            if (this.imageSize) {
                return this.imageSize;
            }
            return this.isSkinLight ? MMessagePageImageSize.Small : MMessagePageImageSize.Default;
        },
        enumerable: true,
        configurable: true
    });
    MMessagePage.prototype.isTargetExternal = function (isExternal) {
        return isExternal ? '_blank' : '';
    };
    MMessagePage.prototype.created = function () {
        if (this.svgName) {
            this.svg = require("../../assets/icons/svg/" + this.svgName + ".svg");
        }
    };
    Object.defineProperty(MMessagePage.prototype, "hasLinksAndSlot", {
        get: function () {
            return this.hasLinks || !!this.$slots.default;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMessagePage.prototype, "hasBody", {
        get: function () {
            return this.hasHints || this.hasLinks || !!this.$slots.default;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMessagePage.prototype, "isSkinDefault", {
        get: function () {
            return this.skin === MMessagePageSkin.Default;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMessagePage.prototype, "isSkinLight", {
        get: function () {
            return this.skin === MMessagePageSkin.Light;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMessagePage.prototype, "isStateInformation", {
        get: function () {
            return this.state === MMessageState.Information;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMessagePage.prototype, "isStateWarning", {
        get: function () {
            return this.state === MMessageState.Warning;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMessagePage.prototype, "isStateError", {
        get: function () {
            return this.state === MMessageState.Error;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMessagePage.prototype, "isStateConfirmation", {
        get: function () {
            return this.state === MMessageState.Confirmation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMessagePage.prototype, "iconNameProp", {
        get: function () {
            if (this.iconName) {
                return this.iconName;
            }
            else {
                switch (this.state) {
                    case MMessageState.Confirmation:
                        return 'm-svg__confirmation';
                    case MMessageState.Information:
                        return 'm-svg__information';
                    case MMessageState.Warning:
                        return 'm-svg__warning';
                    default:
                        return 'm-svg__error';
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Prop({
            default: 'error',
            validator: function (value) {
                return value === MMessageState.Information ||
                    value === MMessageState.Warning ||
                    value === MMessageState.Confirmation ||
                    value === MMessageState.Error;
            }
        })
    ], MMessagePage.prototype, "state", void 0);
    __decorate([
        Prop({
            default: MMessagePageSkin.Default,
            validator: function (value) {
                return value === MMessagePageSkin.Default ||
                    value === MMessagePageSkin.Light;
            }
        })
    ], MMessagePage.prototype, "skin", void 0);
    __decorate([
        Prop()
    ], MMessagePage.prototype, "iconName", void 0);
    __decorate([
        Prop()
    ], MMessagePage.prototype, "svgName", void 0);
    __decorate([
        Prop()
    ], MMessagePage.prototype, "imageSize", void 0);
    __decorate([
        Prop()
    ], MMessagePage.prototype, "title", void 0);
    __decorate([
        Prop({ default: function () { return []; } })
    ], MMessagePage.prototype, "hints", void 0);
    __decorate([
        Prop({ default: function () { return []; } })
    ], MMessagePage.prototype, "links", void 0);
    MMessagePage = __decorate([
        WithRender,
        Component
    ], MMessagePage);
    return MMessagePage;
}(ModulVue));
export { MMessagePage };
var MessagePagePlugin = {
    install: function (v, options) {
        v.prototype.$log.debug(MESSAGE_PAGE_NAME, 'plugin.install');
        v.use(LinkPlugin);
        v.use(IconPlugin);
        v.use(ModalPlugin);
        v.component(MESSAGE_PAGE_NAME, MMessagePage);
    }
};
export default MessagePagePlugin;
//# sourceMappingURL=message-page.js.map