var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Component from 'vue-class-component';
import { Prop } from 'vue-property-decorator';
import { BackdropMode, Portal } from '../../mixins/portal/portal';
import { ModulVue } from '../../utils/vue/vue';
import ButtonPlugin from '../button/button';
import { DIALOG_NAME } from '../component-names';
import I18nPlugin from '../i18n/i18n';
import LinkPlugin from '../link/link';
import WithRender from './dialog.html?style=./dialog.scss';
export var MDialogWidth;
(function (MDialogWidth) {
    MDialogWidth["Default"] = "default";
    MDialogWidth["Large"] = "large";
})(MDialogWidth || (MDialogWidth = {}));
var MDialog = /** @class */ (function (_super) {
    __extends(MDialog, _super);
    function MDialog() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MDialog.prototype.handlesFocus = function () {
        return true;
    };
    MDialog.prototype.doCustomPropOpen = function (value) {
        return false;
    };
    MDialog.prototype.getBackdropMode = function () {
        return BackdropMode.BackdropFast;
    };
    MDialog.prototype.getPortalElement = function () {
        return this.$refs.article;
    };
    MDialog.prototype.onOk = function () {
        this.as().propOpen = false;
        this.$emit('ok');
    };
    MDialog.prototype.onCancel = function () {
        this.as().propOpen = false;
        this.$emit('cancel');
    };
    Object.defineProperty(MDialog.prototype, "hasDefaultSlot", {
        get: function () {
            return !!this.$slots.default;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDialog.prototype, "hasFooterSlot", {
        get: function () {
            return !!this.$slots.footer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDialog.prototype, "hasTitle", {
        get: function () {
            return !!this.title;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDialog.prototype, "hasMessage", {
        get: function () {
            return !!this.message;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDialog.prototype, "hasOkLabel", {
        get: function () {
            return !!this.okLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDialog.prototype, "hasOkPrecision", {
        get: function () {
            return !!this.okPrecision;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDialog.prototype, "hasCancelLabel", {
        get: function () {
            return !!this.cancelLabel;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDialog.prototype, "hasWidthLarge", {
        get: function () {
            return this.width === MDialogWidth.Large;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Prop()
    ], MDialog.prototype, "title", void 0);
    __decorate([
        Prop()
    ], MDialog.prototype, "message", void 0);
    __decorate([
        Prop()
    ], MDialog.prototype, "okLabel", void 0);
    __decorate([
        Prop()
    ], MDialog.prototype, "okPrecision", void 0);
    __decorate([
        Prop()
    ], MDialog.prototype, "cancelLabel", void 0);
    __decorate([
        Prop({ default: true })
    ], MDialog.prototype, "negativeLink", void 0);
    __decorate([
        Prop({
            default: MDialogWidth.Default,
            validator: function (value) {
                return value === MDialogWidth.Default ||
                    value === MDialogWidth.Large;
            }
        })
    ], MDialog.prototype, "width", void 0);
    MDialog = __decorate([
        WithRender,
        Component({
            mixins: [Portal]
        })
    ], MDialog);
    return MDialog;
}(ModulVue));
export { MDialog };
var DialogPlugin = {
    install: function (v, options) {
        v.use(ButtonPlugin);
        v.use(I18nPlugin);
        v.use(LinkPlugin);
        v.component(DIALOG_NAME, MDialog);
    }
};
export default DialogPlugin;
//# sourceMappingURL=dialog.js.map