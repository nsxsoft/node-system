var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Component from 'vue-class-component';
import { Prop } from 'vue-property-decorator';
import { extractExtension } from '../../../utils/file/file';
import { ModulVue } from '../../../utils/vue/vue';
import WithRender from './tree-icon.html?style=./tree-icon.scss';
var FOLDER_OPEN = 'm-svg__folder-open';
var FOLDER_CLOSED = 'm-svg__folder';
var MTreeIcon = /** @class */ (function (_super) {
    __extends(MTreeIcon, _super);
    function MTreeIcon() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MTreeIcon.prototype, "folderIcon", {
        get: function () {
            return this.isFolderOpen ? FOLDER_OPEN : FOLDER_CLOSED;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MTreeIcon.prototype, "extensionFile", {
        get: function () {
            return '.' + extractExtension(this.filename);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MTreeIcon.prototype, "showFolderIcon", {
        get: function () {
            return this.isFolder && this.useFilesIcons;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Prop()
    ], MTreeIcon.prototype, "filename", void 0);
    __decorate([
        Prop()
    ], MTreeIcon.prototype, "isFolderOpen", void 0);
    __decorate([
        Prop({ default: false })
    ], MTreeIcon.prototype, "isFolder", void 0);
    __decorate([
        Prop({ default: false })
    ], MTreeIcon.prototype, "useFilesIcons", void 0);
    MTreeIcon = __decorate([
        WithRender,
        Component
    ], MTreeIcon);
    return MTreeIcon;
}(ModulVue));
export { MTreeIcon };
//# sourceMappingURL=tree-icon.js.map