var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import Vue from 'vue';
import Component from 'vue-class-component';
import { Emit, Model, Prop, Watch } from 'vue-property-decorator';
import PopupPluginDirective from '../../directives/popup/popup';
import { InputLabel } from '../../mixins/input-label/input-label';
import { InputPopup } from '../../mixins/input-popup/input-popup';
import { InputState } from '../../mixins/input-state/input-state';
import { InputWidth } from '../../mixins/input-width/input-width';
import { MediaQueries } from '../../mixins/media-queries/media-queries';
import MediaQueriesPlugin from '../../utils/media-queries/media-queries';
import { normalizeString } from '../../utils/str/str';
import UserAgentUtil from '../../utils/user-agent/user-agent';
import uuid from '../../utils/uuid/uuid';
import ButtonPlugin from '../button/button';
import { DROPDOWN_ITEM_NAME, DROPDOWN_NAME } from '../component-names';
import { MDropdownGroup } from '../dropdown-group/dropdown-group';
import InputStylePlugin from '../input-style/input-style';
import PopupPlugin, { MPopup } from '../popup/popup';
import RadioStylePlugin from '../radio-style/radio-style';
import { MSidebar } from '../sidebar/sidebar';
import ValidationMessagePlugin from '../validation-message/validation-message';
import { InputManagement } from './../../mixins/input-management/input-management';
import { BaseDropdown, MDropdownItem } from './dropdown-item/dropdown-item';
import WithRender from './dropdown.html?style=./dropdown.scss';
var DROPDOWN_MAX_WIDTH = '288px'; // 320 - (16*2)
var DROPDOWN_STYLE_TRANSITION = 'max-height 0.3s ease';
var MDropdown = /** @class */ (function (_super) {
    __extends(MDropdown, _super);
    function MDropdown() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.internalFilter = '';
        _this.internalFilterRegExp = / /;
        _this.internalItems = [];
        _this.internalSelectedText = '';
        _this.internalIsFocus = false;
        _this.focusedIndex = -1;
        _this.internalOpen = false;
        _this.dirty = false;
        _this.id = "mDropdown-" + uuid.generate();
        _this.itemsHeightStyleInternal = {};
        return _this;
    }
    MDropdown.prototype.matchFilter = function (text) {
        var result = true;
        if (text !== undefined && this.dirty && (this.internalFilterRegExp)) {
            result = this.internalFilterRegExp.test(text);
        }
        return result;
    };
    MDropdown.prototype.onFocusIn = function () {
        if (!this.filterable) {
            this.$refs.input.setSelectionRange(0, 0);
        }
        this.internalIsFocus = true;
    };
    MDropdown.prototype.onFocusOut = function () {
        this.internalIsFocus = false;
    };
    MDropdown.prototype.groupHasItems = function (group) {
        return this.internalItems.some(function (i) {
            return i.group === group;
        });
    };
    MDropdown.prototype.created = function () {
        this.setInternalValue(this.value);
    };
    MDropdown.prototype.mounted = function () {
        if (this.focus) {
            this.focusChanged(this.focus);
        }
    };
    MDropdown.prototype.beforeDestroy = function () {
        if (this.observer) {
            this.observer.disconnect();
        }
    };
    Object.defineProperty(MDropdown.prototype, "open", {
        get: function () {
            return this.internalOpen;
        },
        set: function (value) {
            if (value && value !== this.internalOpen) {
                this.focusedIndex = -1;
            }
            if (this.as().active) {
                this.internalOpen = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    MDropdown.prototype.onOpen = function () {
        return __awaiter(this, void 0, void 0, function () {
            var inputEl;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$nextTick()];
                    case 1:
                        _a.sent();
                        inputEl = this.$refs.input;
                        setTimeout(function () {
                            inputEl.focus();
                        });
                        this.focusSelected();
                        this.scrollToFocused();
                        // Reset the height of the list before calculating its height
                        // (this code is executed before the method calculateFilterableListeHeight())
                        this.itemsHeightStyle = undefined;
                        return [2 /*return*/];
                }
            });
        });
    };
    MDropdown.prototype.onClose = function () {
        this.internalFilter = '';
    };
    Object.defineProperty(MDropdown.prototype, "itemsHeightStyle", {
        get: function () {
            return this.itemsHeightStyleInternal;
        },
        set: function (value) {
            this.itemsHeightStyleInternal = value === undefined ? undefined : { height: value + 'px' };
        },
        enumerable: true,
        configurable: true
    });
    MDropdown.prototype.calculateFilterableListeHeight = function () {
        var _this = this;
        // To display the contents of the list above the device keyboard,
        // fixed the height of the list when the dropdown is filterable and in mobile mode.
        if (this.filterable && !UserAgentUtil.isAndroid() && this.as().isMqMaxS) {
            this.$children.forEach(function (popup, index) {
                // Find the MPopup component that has the MSidebar child component
                if (popup.$options.name === MPopup.name) {
                    popup.$children.forEach(function (sidebar, index) {
                        if (sidebar.$options.name === MSidebar.name) {
                            // Set height of the list with height of MSidebar body
                            var sidebarComponent = sidebar;
                            _this.itemsHeightStyle = sidebarComponent.$refs.body.clientHeight;
                            sidebarComponent.$refs.body.style.overflow = 'hidden';
                        }
                    });
                }
            });
        }
    };
    MDropdown.prototype.setInternalValue = function (value) {
        this.setModel(value, false);
    };
    MDropdown.prototype.focusChanged = function (focus) {
        if (focus && !this.as().isDisabled) {
            this.selectText();
        }
        else {
            this.$refs.input.blur();
            this.internalOpen = false;
        }
    };
    Object.defineProperty(MDropdown.prototype, "model", {
        get: function () {
            return this.value === undefined ? this.as().internalValue : this.value;
        },
        set: function (value) {
            this.setModel(value, true);
        },
        enumerable: true,
        configurable: true
    });
    MDropdown.prototype.setModel = function (value, emit) {
        this.as().internalValue = value;
        if (emit) {
            this.$emit('change', value);
        }
        this.dirty = false;
        this.internalOpen = false;
        this.setInputWidth();
    };
    MDropdown.prototype.portalContentMounted = function () {
        var _this = this;
        this.buildItemsMap();
        this.observer = new MutationObserver(function () {
            _this.buildItemsMap();
        });
        if (this.$refs.items) {
            // todo: mobile
            this.observer.observe(this.$refs.items, { subtree: true, childList: true });
        }
    };
    MDropdown.prototype.setInputWidth = function () {
        var _this = this;
        this.$nextTick(function () {
            _this.$refs.mInputStyle.setInputWidth();
        });
    };
    Object.defineProperty(MDropdown.prototype, "inputStyletWidth", {
        get: function () {
            return this.as().inputWidth === 'auto' && this.as().maxWidth === 'none' ? 'auto' : '100%';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDropdown.prototype, "focused", {
        get: function () {
            return this.focusedIndex > -1 ? this.internalNavigationItems[this.focusedIndex].value : this.model;
        },
        enumerable: true,
        configurable: true
    });
    MDropdown.prototype.onIsMqMaxS = function (value, old) {
        var _this = this;
        if (value !== old) {
            this.$nextTick(function () { return _this.buildItemsMap(); });
        }
    };
    Object.defineProperty(MDropdown.prototype, "selectedText", {
        get: function () {
            var _this = this;
            var result = '';
            if (this.dirty) {
                result = this.internalFilter;
            }
            else if (this.internalItems.every(function (item) {
                if (item.value === _this.model) {
                    result = item.propLabel;
                    return false;
                }
                return true;
            })) {
                result = '';
            }
            return result;
        },
        set: function (value) {
            this.dirty = true;
            this.internalFilter = value;
            var parsedQuery = normalizeString(this.internalFilter).replace(/(\^|\(|\)|\[|\]|\$|\*|\+|\.|\?|\\|\{|\}|\|)/g, '\\$1');
            this.internalFilterRegExp = new RegExp(parsedQuery, 'i');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDropdown.prototype, "isEmpty", {
        get: function () {
            return (this.filterable && this.open) || this.as().hasValue || (this.as().hasPlaceholder() && this.open) ? false : true;
        },
        enumerable: true,
        configurable: true
    });
    MDropdown.prototype.buildItemsMap = function () {
        this.focusedIndex = -1;
        // all visible items
        var items = [];
        // items that can be reached with the keyboard (!disabled)
        var navigation = [];
        this.$refs.popup.$children[0].$children.forEach(function (item) {
            if (item instanceof MDropdownItem && !item.inactive && !item.filtered) {
                items.push(item);
                if (!item.disabled) {
                    navigation.push(item);
                }
            }
            else if (item instanceof MDropdownGroup) {
                item.$children.forEach(function (groupItem) {
                    if (groupItem instanceof MDropdownItem && !groupItem.inactive && !groupItem.filtered) {
                        items.push(groupItem);
                        if (!groupItem.disabled) {
                            navigation.push(groupItem);
                        }
                    }
                });
            }
        });
        this.internalItems = items;
        this.internalNavigationItems = navigation;
        this.focusSelected();
    };
    Object.defineProperty(MDropdown.prototype, "propTextNoData", {
        get: function () {
            return (this.textNoData ? this.textNoData : this.$i18n.translate('m-dropdown:no-data'));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDropdown.prototype, "propTextNoMatch", {
        get: function () {
            return (this.textNoMatch ? this.textNoMatch : this.$i18n.translate('m-dropdown:no-result'));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDropdown.prototype, "hasItems", {
        get: function () {
            return this.internalItems.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDropdown.prototype, "noItemsLabel", {
        get: function () {
            return (!this.internalItems || this.internalItems.length === 0) ? this.propTextNoData : this.propTextNoMatch;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDropdown.prototype, "ariaControls", {
        get: function () {
            return this.id + '-controls';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDropdown.prototype, "inactive", {
        get: function () {
            return this.as().isDisabled || this.as().isWaiting;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MDropdown.prototype, "hasFooterSlot", {
        get: function () {
            return !!this.$slots.footer;
        },
        enumerable: true,
        configurable: true
    });
    MDropdown.prototype.onKeydownUp = function ($event) {
        if (!this.open) {
            this.open = true;
        }
        else {
            this.focusPreviousItem();
        }
    };
    MDropdown.prototype.onKeydownDown = function ($event) {
        if (!this.open) {
            this.open = true;
        }
        else {
            this.focusNextItem();
        }
    };
    MDropdown.prototype.onKeydownEnter = function ($event) {
        if (!this.open) {
            this.open = true;
        }
        if (this.focusedIndex > -1) {
            var item = this.internalNavigationItems[this.focusedIndex];
            this.model = item.value;
        }
        this.selectText();
    };
    MDropdown.prototype.onKeydownTab = function ($event) {
        if (this.as().isMqMinS) {
            if (this.focusedIndex > -1 && this.internalItems.length === 1) {
                var item = this.internalNavigationItems[this.focusedIndex];
                this.model = item.value;
            }
            this.open = false;
        }
    };
    MDropdown.prototype.onKeydownEsc = function () {
        this.open = false;
    };
    MDropdown.prototype.focusOnResearchInput = function () {
        this.$refs.researchInput.focus();
    };
    MDropdown.prototype.selectText = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$nextTick()];
                    case 1:
                        _a.sent();
                        this.$refs.input.focus();
                        if (this.filterable) {
                            this.$refs.input.setSelectionRange(0, this.selectedText.length);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    MDropdown.prototype.focusSelected = function () {
        var _this = this;
        this.internalNavigationItems.every(function (item, i) {
            if (item.value === _this.model) {
                _this.focusedIndex = i;
                return false;
            }
            else if (_this.filterable && _this.internalFilter !== '' && _this.model === undefined) {
                _this.focusedIndex = 0;
                return false;
            }
            else {
                _this.focusedIndex = -1;
                return true;
            }
        });
    };
    MDropdown.prototype.focusNextItem = function () {
        if (this.focusedIndex > -1) {
            this.focusedIndex++;
            if (this.focusedIndex >= this.internalNavigationItems.length) {
                this.focusedIndex = 0;
            }
        }
        else {
            this.focusedIndex = this.internalNavigationItems.length === 0 ? -1 : 0;
        }
        this.scrollToFocused();
    };
    MDropdown.prototype.focusPreviousItem = function () {
        if (this.focusedIndex > -1) {
            this.focusedIndex--;
            if (this.focusedIndex < 0) {
                this.focusedIndex = this.internalNavigationItems.length - 1;
            }
        }
        else {
            this.focusedIndex = this.internalNavigationItems.length - 1;
        }
        this.scrollToFocused();
    };
    MDropdown.prototype.scrollToFocused = function () {
        var _this = this;
        if (this.focusedIndex > -1 && this.as().isMqMinS) {
            this.$nextTick(function () {
                var container = _this.$refs.items;
                if (container) {
                    var focusedItem = _this.internalNavigationItems[_this.focusedIndex];
                    var top_1 = focusedItem.$el.offsetTop;
                    var bottom = focusedItem.$el.offsetTop + focusedItem.$el.offsetHeight;
                    var viewRectTop = container.scrollTop;
                    var viewRectBottom = viewRectTop + container.clientHeight;
                    if (top_1 < viewRectTop) {
                        container.scrollTop = top_1;
                    }
                    else if (bottom > viewRectBottom) {
                        container.scrollTop = bottom - container.clientHeight;
                    }
                }
            });
        }
    };
    MDropdown.prototype.transitionEnter = function (el, done) {
        var _this = this;
        this.$nextTick(function () {
            el.style.opacity = '0';
            el.style.width = _this.$el.clientWidth + 'px';
            setTimeout(function () {
                if (_this.as().isMqMinS) {
                    var height_1 = el.clientHeight;
                    // tslint:disable-next-line: deprecation
                    el.style.webkitTransition = DROPDOWN_STYLE_TRANSITION;
                    el.style.transition = DROPDOWN_STYLE_TRANSITION;
                    el.style.overflowY = 'hidden';
                    el.style.maxHeight = '0';
                    el.style.width = _this.$el.clientWidth + 'px';
                    el.style.minWidth = _this.listMinWidth;
                    el.style.removeProperty('opacity');
                    setTimeout(function () {
                        el.style.maxHeight = height_1 + 'px';
                        done();
                    }, 0);
                }
                else {
                    done();
                }
            }, 0);
        });
    };
    MDropdown.prototype.transitionLeave = function (el, done) {
        var _this = this;
        this.$nextTick(function () {
            if (_this.as().isMqMinS) {
                var height = el.clientHeight;
                el.style.width = _this.$el.clientWidth + 'px';
                el.style.minWidth = _this.listMinWidth;
                el.style.maxHeight = height + 'px';
                el.style.maxHeight = '0';
                setTimeout(function () {
                    el.style.maxHeight = 'none';
                    done();
                }, 300);
            }
            else {
                done();
            }
        });
    };
    Object.defineProperty(MDropdown.prototype, "hasPointer", {
        get: function () {
            return !this.filterable || (this.filterable && !this.open);
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Model('change'),
        Prop()
    ], MDropdown.prototype, "value", void 0);
    __decorate([
        Prop()
    ], MDropdown.prototype, "placeholder", void 0);
    __decorate([
        Prop()
    ], MDropdown.prototype, "filterable", void 0);
    __decorate([
        Prop()
    ], MDropdown.prototype, "textNoData", void 0);
    __decorate([
        Prop()
    ], MDropdown.prototype, "textNoMatch", void 0);
    __decorate([
        Prop()
    ], MDropdown.prototype, "listMinWidth", void 0);
    __decorate([
        Prop()
    ], MDropdown.prototype, "focus", void 0);
    __decorate([
        Emit('open')
    ], MDropdown.prototype, "onOpen", null);
    __decorate([
        Emit('close')
    ], MDropdown.prototype, "onClose", null);
    __decorate([
        Watch('value')
    ], MDropdown.prototype, "setInternalValue", null);
    __decorate([
        Watch('focus')
    ], MDropdown.prototype, "focusChanged", null);
    __decorate([
        Watch('isMqMaxS')
    ], MDropdown.prototype, "onIsMqMaxS", null);
    MDropdown = __decorate([
        WithRender,
        Component({
            mixins: [
                InputState,
                InputPopup,
                MediaQueries,
                InputManagement,
                InputWidth,
                InputLabel
            ]
        })
    ], MDropdown);
    return MDropdown;
}(BaseDropdown));
export { MDropdown };
var DropdownPlugin = {
    install: function (v, options) {
        Vue.use(RadioStylePlugin);
        Vue.use(InputStylePlugin);
        Vue.use(ButtonPlugin);
        Vue.use(PopupPlugin);
        Vue.use(PopupPluginDirective);
        Vue.use(ValidationMessagePlugin);
        Vue.use(MediaQueriesPlugin);
        v.component(DROPDOWN_ITEM_NAME, MDropdownItem);
        v.component(DROPDOWN_NAME, MDropdown);
    }
};
export default DropdownPlugin;
//# sourceMappingURL=dropdown.js.map