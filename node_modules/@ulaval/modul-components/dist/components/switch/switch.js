var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Component from 'vue-class-component';
import { Model, Prop, Watch } from 'vue-property-decorator';
import { InputState } from '../../mixins/input-state/input-state';
import uuid from '../../utils/uuid/uuid';
import { ModulVue } from '../../utils/vue/vue';
import { SWITCH_NAME } from '../component-names';
import ValidationMessagePlugin from '../validation-message/validation-message';
import WithRender from './switch.html?style=./switch.scss';
export var MSwitchPosition;
(function (MSwitchPosition) {
    MSwitchPosition["Left"] = "left";
    MSwitchPosition["Right"] = "right";
})(MSwitchPosition || (MSwitchPosition = {}));
var MSwitch = /** @class */ (function (_super) {
    __extends(MSwitch, _super);
    function MSwitch() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.internalValue = false;
        _this.isFocus = false;
        _this.id = "switch" + uuid.generate();
        return _this;
    }
    MSwitch.prototype.onValueChange = function (value) {
        this.internalValue = value;
    };
    Object.defineProperty(MSwitch.prototype, "propChecked", {
        get: function () {
            return this.value !== undefined ? this.value : this.internalValue;
        },
        set: function (value) {
            this.$emit('change', value);
            this.internalValue = value;
        },
        enumerable: true,
        configurable: true
    });
    MSwitch.prototype.onClick = function (event) {
        this.$emit('click', event);
        this.$refs['switch']['blur']();
    };
    Object.defineProperty(MSwitch.prototype, "hasSwitchLeft", {
        get: function () {
            return ((this.position === MSwitchPosition.Right) ? false : true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MSwitch.prototype, "label", {
        get: function () {
            return !!this.$slots.default;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Model('change'),
        Prop()
    ], MSwitch.prototype, "value", void 0);
    __decorate([
        Prop({
            default: MSwitchPosition.Left,
            validator: function (value) {
                return value === MSwitchPosition.Left ||
                    value === MSwitchPosition.Right;
            }
        })
    ], MSwitch.prototype, "position", void 0);
    __decorate([
        Prop({ default: true })
    ], MSwitch.prototype, "stateText", void 0);
    __decorate([
        Watch('value')
    ], MSwitch.prototype, "onValueChange", null);
    MSwitch = __decorate([
        WithRender,
        Component({
            mixins: [InputState]
        })
    ], MSwitch);
    return MSwitch;
}(ModulVue));
export { MSwitch };
var SwitchPlugin = {
    install: function (v, options) {
        v.use(ValidationMessagePlugin);
        v.component(SWITCH_NAME, MSwitch);
    }
};
export default SwitchPlugin;
//# sourceMappingURL=switch.js.map