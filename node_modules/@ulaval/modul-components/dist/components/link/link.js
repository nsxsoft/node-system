var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Component from 'vue-class-component';
import { Prop, Watch } from 'vue-property-decorator';
import { KeyCode } from '../../utils/keycode/keycode';
import { ModulVue } from '../../utils/vue/vue';
import { LINK_NAME } from '../component-names';
import I18nPlugin from '../i18n/i18n';
import IconPlugin from '../icon/icon';
import WithRender from './link.html?style=./link.scss';
export var MLinkMode;
(function (MLinkMode) {
    MLinkMode["RouterLink"] = "router-link";
    MLinkMode["Link"] = "link";
    MLinkMode["Button"] = "button";
})(MLinkMode || (MLinkMode = {}));
export var MLinkIconPosition;
(function (MLinkIconPosition) {
    MLinkIconPosition["Left"] = "left";
    MLinkIconPosition["Right"] = "right";
})(MLinkIconPosition || (MLinkIconPosition = {}));
export var MLinkSkin;
(function (MLinkSkin) {
    MLinkSkin["Default"] = "default";
    MLinkSkin["Light"] = "light";
    MLinkSkin["Text"] = "text";
})(MLinkSkin || (MLinkSkin = {}));
var ICON_NAME_DEFAULT = 'm-svg__chevron--right';
var MLink = /** @class */ (function (_super) {
    __extends(MLink, _super);
    function MLink() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MLink.prototype.mounted = function () {
        this.isButtonChanged(this.mode === MLinkMode.Button);
    };
    MLink.prototype.isButtonChanged = function (isButton) {
        var _this = this;
        if (isButton) {
            this.$nextTick(function () {
                _this.$el.setAttribute('role', 'button');
            });
        }
        else {
            this.$nextTick(function () {
                if (_this.$el.hasAttribute('role')) {
                    _this.$el.removeAttribute('role');
                }
            });
        }
    };
    MLink.prototype.onClick = function (event) {
        this.$el.blur();
        if (this.isButton || this.disabled) {
            event.preventDefault();
        }
        if (!this.disabled) {
            this.$emit('click', event);
        }
    };
    Object.defineProperty(MLink.prototype, "isRouterLink", {
        get: function () {
            return this.mode === MLinkMode.RouterLink;
        },
        enumerable: true,
        configurable: true
    });
    MLink.prototype.onKeyup = function (event) {
        event = event || window.event;
        if (event.keyCode === KeyCode.M_SPACE && this.isButton) {
            this.onClick(event);
        }
    };
    Object.defineProperty(MLink.prototype, "isButton", {
        get: function () {
            return this.mode === MLinkMode.Button;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MLink.prototype, "isSkinText", {
        get: function () {
            return this.skin === MLinkSkin.Text;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MLink.prototype, "isSkinLight", {
        get: function () {
            return this.skin === MLinkSkin.Light;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MLink.prototype, "isUnvisited", {
        get: function () {
            return this.isButton ? true : this.unvisited;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MLink.prototype, "isIconPositionLeft", {
        get: function () {
            return this.hasIcon && this.iconPosition === MLinkIconPosition.Left;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MLink.prototype, "isIconPositionRight", {
        get: function () {
            return this.hasIcon && this.iconPosition === MLinkIconPosition.Right;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MLink.prototype, "hasIcon", {
        get: function () {
            return this.iconName !== undefined && this.iconName !== ''
                ? true
                : this.icon;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MLink.prototype, "propIconName", {
        get: function () {
            return this.iconName !== undefined && this.iconName !== ''
                ? this.iconName
                : ICON_NAME_DEFAULT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MLink.prototype, "propUrl", {
        get: function () {
            return this.isButton
                ? '#'
                : !this.disabled ? this.url : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MLink.prototype, "isTargetBlank", {
        get: function () {
            return this.target === '_blank';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MLink.prototype, "routerLinkUrl", {
        get: function () {
            return this.isObject(this.url) ? this.url : { path: this.url };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MLink.prototype, "routerEvent", {
        get: function () {
            return this.disabled ? '' : 'click';
        },
        enumerable: true,
        configurable: true
    });
    MLink.prototype.isObject = function (a) {
        return !!a && a.constructor === Object;
    };
    __decorate([
        Prop({ default: '/' })
    ], MLink.prototype, "url", void 0);
    __decorate([
        Prop({
            default: MLinkMode.RouterLink,
            validator: function (value) {
                return value === MLinkMode.RouterLink ||
                    value === MLinkMode.Link ||
                    value === MLinkMode.Button;
            }
        })
    ], MLink.prototype, "mode", void 0);
    __decorate([
        Prop()
    ], MLink.prototype, "disabled", void 0);
    __decorate([
        Prop()
    ], MLink.prototype, "unvisited", void 0);
    __decorate([
        Prop({ default: true })
    ], MLink.prototype, "underline", void 0);
    __decorate([
        Prop({
            default: MLinkSkin.Default,
            validator: function (value) {
                return value === MLinkSkin.Default ||
                    value === MLinkSkin.Light ||
                    value === MLinkSkin.Text;
            }
        })
    ], MLink.prototype, "skin", void 0);
    __decorate([
        Prop()
    ], MLink.prototype, "target", void 0);
    __decorate([
        Prop()
    ], MLink.prototype, "icon", void 0);
    __decorate([
        Prop()
    ], MLink.prototype, "iconName", void 0);
    __decorate([
        Prop({
            default: MLinkIconPosition.Left,
            validator: function (value) {
                return value === MLinkIconPosition.Left || value === MLinkIconPosition.Right;
            }
        })
    ], MLink.prototype, "iconPosition", void 0);
    __decorate([
        Prop({ default: '12px' })
    ], MLink.prototype, "iconSize", void 0);
    __decorate([
        Prop({ default: '0' })
    ], MLink.prototype, "tabindex", void 0);
    __decorate([
        Watch('isButton')
    ], MLink.prototype, "isButtonChanged", null);
    MLink = __decorate([
        WithRender,
        Component
    ], MLink);
    return MLink;
}(ModulVue));
export { MLink };
var LinkPlugin = {
    install: function (v, options) {
        v.use(IconPlugin);
        v.use(I18nPlugin);
        v.component(LINK_NAME, MLink);
    }
};
export default LinkPlugin;
//# sourceMappingURL=link.js.map