var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Vue from 'vue';
import Component from 'vue-class-component';
import { Prop } from 'vue-property-decorator';
import WithRender from './dynamic-template.html';
import uuid from '../../utils/uuid/uuid';
import { DYNAMIC_TEMPLATE_NAME } from '../component-names';
var MDynamicTemplate = /** @class */ (function (_super) {
    __extends(MDynamicTemplate, _super);
    function MDynamicTemplate() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.tag = 'm-dt-' + uuid.generate();
        return _this;
    }
    MDynamicTemplate.prototype.mounted = function () {
        this.$emit('mounted', this.$children);
    };
    MDynamicTemplate.prototype.updated = function () {
        this.$emit('updated', this.$children);
    };
    Object.defineProperty(MDynamicTemplate.prototype, "internalTemplate", {
        get: function () {
            if (typeof this.template === 'string') {
                Vue.component(this.tag, {
                    template: "<div>" + this.template + "</div>"
                });
            }
            else {
                Vue.component(this.tag, this.template);
            }
            return this.tag;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Prop()
    ], MDynamicTemplate.prototype, "template", void 0);
    MDynamicTemplate = __decorate([
        WithRender,
        Component
    ], MDynamicTemplate);
    return MDynamicTemplate;
}(Vue));
export { MDynamicTemplate };
var DynamicTemplatePlugin = {
    install: function (v, options) {
        v.component(DYNAMIC_TEMPLATE_NAME, MDynamicTemplate);
    }
};
export default DynamicTemplatePlugin;
//# sourceMappingURL=dynamic-template.js.map