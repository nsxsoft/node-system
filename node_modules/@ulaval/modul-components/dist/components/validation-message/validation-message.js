var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Component from 'vue-class-component';
import { Prop } from 'vue-property-decorator';
import { InputState } from '../../mixins/input-state/input-state';
import { ModulVue } from '../../utils/vue/vue';
import AccordionTransitionPlugin from '../accordion/accordion-transition';
import { VALIDATION_MESSAGE_NAME } from '../component-names';
import IconPlugin from '../icon/icon';
import WithRender from './validation-message.html?style=./validation-message.scss';
var MValidationMessage = /** @class */ (function (_super) {
    __extends(MValidationMessage, _super);
    function MValidationMessage() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.transition = true;
        _this.titleErrorIcon = _this.$i18n.translate('m-validation-message:title-error-icon');
        _this.titleValidIcon = _this.$i18n.translate('m-validation-message:title-valid-icon');
        return _this;
    }
    MValidationMessage.prototype.onClick = function (event) {
        this.$emit('click', event);
    };
    __decorate([
        Prop({ default: true })
    ], MValidationMessage.prototype, "transition", void 0);
    MValidationMessage = __decorate([
        WithRender,
        Component({
            mixins: [InputState]
        })
    ], MValidationMessage);
    return MValidationMessage;
}(ModulVue));
export { MValidationMessage };
var ValidationMessagePlugin = {
    install: function (v, options) {
        v.use(IconPlugin);
        v.use(AccordionTransitionPlugin);
        v.component(VALIDATION_MESSAGE_NAME, MValidationMessage);
    }
};
export default ValidationMessagePlugin;
//# sourceMappingURL=validation-message.js.map