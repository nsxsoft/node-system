var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Component from 'vue-class-component';
import { Prop, Watch } from 'vue-property-decorator';
import BadgePlugin, { MBadgeState } from '../../directives/badge/badge';
import FileDropPlugin from '../../directives/file-drop/file-drop';
import FileSizeFilterPlugin from '../../filters/filesize/filesize';
import { MediaQueries } from '../../mixins/media-queries/media-queries';
import FilePlugin, { DEFAULT_STORE_NAME, MFileRejectionCause, MFileStatus } from '../../utils/file/file';
import MediaQueriesPlugin from '../../utils/media-queries/media-queries';
import UserAgentUtil from '../../utils/user-agent/user-agent';
import { ModulVue } from '../../utils/vue/vue';
import ButtonPlugin from '../button/button';
import { FILE_UPLOAD_NAME } from '../component-names';
import FileSelectPlugin from '../file-select/file-select';
import I18nPlugin from '../i18n/i18n';
import IconButtonPlugin from '../icon-button/icon-button';
import IconPlugin from '../icon/icon';
import LinkPlugin from '../link/link';
import MessagePlugin from '../message/message';
import ModalPlugin from '../modal/modal';
import ProgressPlugin, { MProgressState } from '../progress/progress';
import WithRender from './file-upload.html?style=./file-upload.scss';
var COMPLETED_FILES_VISUAL_HINT_DELAY = 1000;
var defaultDragEvent = function (e) {
    e.preventDefault();
    e.stopPropagation();
    e.dataTransfer.dropEffect = 'none';
};
var MFileUpload = /** @class */ (function (_super) {
    __extends(MFileUpload, _super);
    function MFileUpload() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.internalOpen = false;
        _this.tooltipCancel = _this.$i18n.translate('m-file-upload:cancelFileUpload');
        _this.tooltipDelete = _this.$i18n.translate('m-file-upload:deleteUploadedFile');
        return _this;
    }
    Object.defineProperty(MFileUpload.prototype, "isDropZoneEnabled", {
        get: function () {
            return UserAgentUtil.isDesktop() && this.$mq.state.isMqMinS;
        },
        enumerable: true,
        configurable: true
    });
    MFileUpload.prototype.created = function () {
        this.updateValidationOptions();
    };
    MFileUpload.prototype.destroyed = function () {
        this.$file.destroy(this.storeName);
    };
    MFileUpload.prototype.updateValidationOptions = function () {
        this.$file.setValidationOptions({
            allowedExtensions: this.allowedExtensions,
            rejectedExtensions: this.rejectedExtensions,
            maxSizeKb: this.maxSizeKb,
            maxFiles: this.propMaxFiles
        }, this.storeName);
    };
    MFileUpload.prototype.openChanged = function (open) {
        this.internalOpen = open;
    };
    MFileUpload.prototype.onFilesChanged = function () {
        var newReadyFiles = [];
        for (var _i = 0, _a = this.readyFiles; _i < _a.length; _i++) {
            var f = _a[_i];
            if (!f.hasOwnProperty('completeHinted')) {
                this.$set(f, 'completeHinted', false);
                newReadyFiles.push(f);
            }
        }
        if (newReadyFiles.length > 0) {
            this.$emit('files-ready', this.readyFiles);
        }
    };
    MFileUpload.prototype.onFreshlyCompletedFilesChanged = function () {
        var _this = this;
        if (this.freshlyCompletedFiles.length > 0) {
            setTimeout(function () {
                for (var _i = 0, _a = _this.freshlyCompletedFiles; _i < _a.length; _i++) {
                    var f = _a[_i];
                    f.completeHinted = true;
                }
            }, COMPLETED_FILES_VISUAL_HINT_DELAY);
        }
    };
    MFileUpload.prototype.onFilesRejected = function () {
        var nbNewRejection = this.rejectedFiles.reduce(function (cnt, f) {
            var nbNewRejection = 0;
            if (!f.isOldRejection) {
                ++nbNewRejection;
                f.isOldRejection = true;
            }
            return cnt + nbNewRejection;
        }, 0);
        if (nbNewRejection > 0) {
            this.$refs.modal.$refs.body.scrollTop = 0;
            // TODO Change function to have a smooth scroll when it will work on a diferent element than the body of the page
            // ScrollTo.startScroll(bodyRef, 0, ScrollToDuration.Regular);
        }
    };
    MFileUpload.prototype.onPortalContentVisible = function () {
        var _this = this;
        this.dropEvents.forEach(function (evt) {
            _this.$refs.modal.$refs.modalWrap.addEventListener(evt, defaultDragEvent);
        });
    };
    MFileUpload.prototype.onMessageClose = function () {
        for (var _i = 0, _a = this.rejectedFiles; _i < _a.length; _i++) {
            var f = _a[_i];
            this.$file.remove(f.uid, this.storeName);
        }
    };
    MFileUpload.prototype.onAddClick = function () {
        this.$emit('done', this.completedFiles);
        this.$refs.modal.closeModal();
    };
    MFileUpload.prototype.onCancelClick = function () {
        this.$emit('cancel');
        this.$refs.modal.closeModal();
    };
    MFileUpload.prototype.onUploadCancel = function (file) {
        file.status === MFileStatus.UPLOADING
            ? this.$emit('file-upload-cancel', file)
            : this.onFileRemove(file);
    };
    MFileUpload.prototype.onFileRemove = function (file) {
        this.$emit('file-remove', file);
        this.$file.remove(file.uid, this.storeName);
    };
    MFileUpload.prototype.onOpen = function () {
        this.$emit('open');
        this.propOpen = true;
        this.updateValidationOptions();
    };
    MFileUpload.prototype.onClose = function () {
        var _this = this;
        this.propOpen = false;
        this.$emit('close');
        this.allFiles
            .filter(function (f) { return f.status === MFileStatus.UPLOADING; })
            .forEach(this.onUploadCancel);
        this.$file.clear(this.storeName);
        this.dropEvents.forEach(function (evt) {
            _this.$refs.modal.$refs.modalWrap.removeEventListener(evt, defaultDragEvent);
        });
    };
    MFileUpload.prototype.getFileStatus = function (file) {
        switch (file.status) {
            case MFileStatus.FAILED:
                return MProgressState.Error;
            case MFileStatus.COMPLETED:
                return MProgressState.Completed;
            default:
                return MProgressState.InProgress;
        }
    };
    MFileUpload.prototype.getBadgeState = function (file) {
        switch (file.status) {
            case MFileStatus.FAILED:
                return MBadgeState.Error;
            case MFileStatus.COMPLETED:
                return MBadgeState.Completed;
            default:
                return undefined;
        }
    };
    MFileUpload.prototype.hasExtensionsRejection = function (file) {
        return file.rejection === MFileRejectionCause.FILE_TYPE;
    };
    MFileUpload.prototype.hasSizeRejection = function (file) {
        return file.rejection === MFileRejectionCause.FILE_SIZE;
    };
    MFileUpload.prototype.hasMaxFilesRejection = function (file) {
        return file.rejection === MFileRejectionCause.MAX_FILES;
    };
    Object.defineProperty(MFileUpload.prototype, "title", {
        get: function () {
            return this.fileReplacement ? this.$i18n.translate('m-file-upload:header-title-file-replacement') : this.$i18n.translate('m-file-upload:header-title', {}, this.propMaxFiles);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MFileUpload.prototype, "buttonAdd", {
        get: function () {
            return this.fileReplacement ? this.$i18n.translate('m-file-upload:replace') : this.$i18n.translate('m-file-upload:add');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MFileUpload.prototype, "fileAllowedExtensions", {
        get: function () {
            return this.allowedExtensions.join(', ');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MFileUpload.prototype, "isAddBtnEnabled", {
        get: function () {
            return (this.completedFiles.length > 0 && this.uploadingFilesOnly.length === 0);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MFileUpload.prototype, "readyFiles", {
        get: function () {
            return this.allFiles.filter(function (f) { return f.status === MFileStatus.READY; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MFileUpload.prototype, "freshlyCompletedFiles", {
        get: function () {
            return this.allFiles.filter(function (f) { return f.status === MFileStatus.COMPLETED && !f.completeHinted; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MFileUpload.prototype, "uploadingFilesOnly", {
        get: function () {
            return this.allFiles.filter(function (f) {
                return f.status === MFileStatus.UPLOADING ||
                    (f.status === MFileStatus.COMPLETED && !f.completeHinted);
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MFileUpload.prototype, "uploadingFiles", {
        get: function () {
            return this.allFiles.filter(function (f) {
                return f.status === MFileStatus.UPLOADING ||
                    f.status === MFileStatus.FAILED ||
                    (f.status === MFileStatus.COMPLETED && !f.completeHinted);
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MFileUpload.prototype, "completedFiles", {
        get: function () {
            return this.allFiles.filter(function (f) { return f.status === MFileStatus.COMPLETED && f.completeHinted; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MFileUpload.prototype, "rejectedFiles", {
        get: function () {
            return this.allFiles.filter(function (f) { return f.status === MFileStatus.REJECTED; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MFileUpload.prototype, "allFiles", {
        get: function () {
            return this.$file.files(this.storeName);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MFileUpload.prototype, "hasUploadingFiles", {
        get: function () {
            return this.uploadingFiles.length === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MFileUpload.prototype, "hasCompletedFiles", {
        get: function () {
            return this.completedFiles.length === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MFileUpload.prototype, "buttonCompletedStyle", {
        get: function () {
            return !this.hasCompletedFiles ? 'display: flex;' : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MFileUpload.prototype, "hasRejectedFiles", {
        get: function () {
            return this.rejectedFiles.length !== 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MFileUpload.prototype, "hasAllowedExtensions", {
        get: function () {
            return this.allowedExtensions.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MFileUpload.prototype, "propOpen", {
        get: function () {
            return this.open ? this.open : this.internalOpen;
        },
        set: function (value) {
            if (value !== this.internalOpen) {
                this.internalOpen = value;
                this.$emit('update:open', value);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MFileUpload.prototype, "propMaxFiles", {
        get: function () {
            return this.fileReplacement ? 1 : this.maxFiles;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MFileUpload.prototype, "multipleSelection", {
        get: function () {
            return this.propMaxFiles !== undefined && this.propMaxFiles > 1;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MFileUpload.prototype, "dropEvents", {
        get: function () {
            return ['drag', 'dragstart', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop'];
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Prop({ default: function () { return []; } })
    ], MFileUpload.prototype, "allowedExtensions", void 0);
    __decorate([
        Prop({ default: function () { return []; } })
    ], MFileUpload.prototype, "rejectedExtensions", void 0);
    __decorate([
        Prop()
    ], MFileUpload.prototype, "maxSizeKb", void 0);
    __decorate([
        Prop()
    ], MFileUpload.prototype, "maxFiles", void 0);
    __decorate([
        Prop({
            default: DEFAULT_STORE_NAME
        })
    ], MFileUpload.prototype, "storeName", void 0);
    __decorate([
        Prop()
    ], MFileUpload.prototype, "open", void 0);
    __decorate([
        Prop({ default: false })
    ], MFileUpload.prototype, "fileReplacement", void 0);
    __decorate([
        Watch('allowedExtensions'),
        Watch('rejectedExtensions'),
        Watch('maxSizeKb'),
        Watch('maxFiles')
    ], MFileUpload.prototype, "updateValidationOptions", null);
    __decorate([
        Watch('open')
    ], MFileUpload.prototype, "openChanged", null);
    __decorate([
        Watch('readyFiles')
    ], MFileUpload.prototype, "onFilesChanged", null);
    __decorate([
        Watch('freshlyCompletedFiles')
    ], MFileUpload.prototype, "onFreshlyCompletedFilesChanged", null);
    __decorate([
        Watch('rejectedFiles')
    ], MFileUpload.prototype, "onFilesRejected", null);
    MFileUpload = __decorate([
        WithRender,
        Component({
            mixins: [
                MediaQueries
            ]
        })
    ], MFileUpload);
    return MFileUpload;
}(ModulVue));
export { MFileUpload };
var FileUploadPlugin = {
    install: function (v, options) {
        v.use(FilePlugin);
        v.use(FileDropPlugin);
        v.use(FileSelectPlugin);
        v.use(ModalPlugin);
        v.use(ProgressPlugin);
        v.use(IconPlugin);
        v.use(I18nPlugin);
        v.use(IconButtonPlugin);
        v.use(ButtonPlugin);
        v.use(MessagePlugin);
        v.use(LinkPlugin);
        v.use(MediaQueriesPlugin);
        v.use(FileSizeFilterPlugin);
        v.use(BadgePlugin);
        v.component(FILE_UPLOAD_NAME, MFileUpload);
    }
};
export default FileUploadPlugin;
//# sourceMappingURL=file-upload.js.map