var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Component from 'vue-class-component';
import { Prop, Watch } from 'vue-property-decorator';
import { ElementQueries } from '../../mixins/element-queries/element-queries';
import { MediaQueries } from '../../mixins/media-queries/media-queries';
import { ModulVue } from '../../utils/vue/vue';
import { LIMIT_TEXT_NAME } from '../component-names';
import DynamicTemplatePlugin from '../dynamic-template/dynamic-template';
import I18nPlugin from '../i18n/i18n';
import WithRender from './limit-text.html?style=./limit-text.scss';
var MLimitText = /** @class */ (function (_super) {
    __extends(MLimitText, _super);
    function MLimitText() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.reduceContent = '';
        _this.testingContent = '';
        _this.fullContent = '';
        _this.internalOpen = false;
        _this.hasFinish = false;
        _this.contentTooTall = false;
        _this.initLineHeigh = '';
        _this.maxHeight = 0;
        return _this;
    }
    MLimitText.prototype.mounted = function () {
        var _this = this;
        this.internalOpen = this.open;
        // ------------ Resize section ------------
        this.$nextTick(function () {
            _this.as().$on('resizeDone', _this.reset);
        });
        // ---------------------------------------
        // ------------ Watch slot content -------
        this.observer = new MutationObserver(function () {
            _this.reset();
        });
        this.observer.observe(this.$refs.originalText, { subtree: true, childList: true, characterData: true });
        // ---------------------------------------
        this.initialize();
    };
    MLimitText.prototype.destroyed = function () {
        if (this.child) {
            this.child.$off('click');
        }
        this.observer.disconnect();
    };
    MLimitText.prototype.initialize = function () {
        this.el = this.$refs.testingText;
        if (this.el) {
            this.el.innerHTML = this.$refs.originalText.innerHTML;
            this.testingContent = this.el.innerHTML;
            this.el.style.whiteSpace = 'nowrap';
            for (var i = 1; i < this.el.children.length; i++) {
                this.el.children[i].style.display = 'none';
            }
            this.initLineHeigh = this.el.clientHeight;
            for (var i = 1; i < this.el.children.length; i++) {
                this.el.children[i].style.display = 'block';
            }
            this.el.style.whiteSpace = 'normal';
            this.maxHeight = this.lines * this.initLineHeigh;
            // Generate the full content - Add the close link if an HTML tag is present
            if (this.testingContent.match('</')) {
                var tagIndex = this.testingContent.lastIndexOf('</');
                this.fullContent = this.testingContent.substring(0, tagIndex) + this.closeLink + this.testingContent.substring(tagIndex);
            }
            else {
                this.fullContent = this.testingContent + this.closeLink;
            }
            // Get the limited text
            this.adjustText();
        }
    };
    MLimitText.prototype.adjustText = function () {
        if (this.isContentTooTall(false)) {
            this.contentTooTall = true;
            this.hasFinish = false;
            this.getReduceContent();
            this.hasFinish = true;
        }
        else {
            this.contentTooTall = false;
            this.hasFinish = true;
        }
    };
    MLimitText.prototype.isContentTooTall = function (update) {
        if (update) {
            this.updateContent(this.reduceContent, this.el);
        }
        var currentHeight = (this.el).clientHeight;
        return (currentHeight > this.maxHeight);
    };
    MLimitText.prototype.updateContent = function (content, el) {
        el.innerHTML = content;
    };
    MLimitText.prototype.reset = function () {
        var _this = this;
        this.hasFinish = false;
        this.reduceContent = '';
        this.testingContent = '';
        this.$nextTick(function () {
            _this.initialize();
        });
    };
    MLimitText.prototype.getReduceContent = function () {
        var HTMLcontent = this.fullContent;
        var index = 0;
        var lastValidContent = '';
        var closingTag = '';
        while (index < HTMLcontent.length && !this.isContentTooTall(true)) {
            if (HTMLcontent[index] === '<' && (index + 1) < HTMLcontent.length) {
                switch (true) {
                    // Opening tag
                    case /\w/.test(HTMLcontent[index + 1]):
                        var tag = '</';
                        index++;
                        var endTagName = false;
                        while (HTMLcontent[index] !== '>') {
                            if (!endTagName && /\w/.test(HTMLcontent[index])) {
                                tag += HTMLcontent[index];
                            }
                            else {
                                endTagName = true;
                            }
                            index++;
                        }
                        tag += '>';
                        // Do not keep the tag if it is a "self closing" tag
                        if (!/<\/(area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)>$/.test(tag)) {
                            closingTag = tag + closingTag;
                        }
                        break;
                    // Closing tag
                    case (HTMLcontent[index + 1] === '/'):
                        var endTag = '</';
                        index += 2;
                        while (HTMLcontent[index] !== '>') {
                            endTag += HTMLcontent[index];
                            index++;
                        }
                        endTag += '>';
                        closingTag = closingTag.slice(endTag.length);
                        break;
                }
            }
            lastValidContent = this.reduceContent;
            this.reduceContent = HTMLcontent.substring(0, index + 1) + this.openLinkOriginal + closingTag;
            index++;
        }
        this.reduceContent = lastValidContent.replace(this.openLinkOriginal, this.openLink);
    };
    Object.defineProperty(MLimitText.prototype, "getReduceText", {
        get: function () {
            return this.reduceContent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MLimitText.prototype, "getFullText", {
        get: function () {
            return this.fullContent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MLimitText.prototype, "openLinkOriginal", {
        get: function () {
            return this.openLabel ? "...&nbsp;<m-link style=\"font-weight:400;\" mode=\"button\" title=\"" + this.getOpenLabelTitle + "\" hiddenText=\"" + this.getOpenLabelTitle + "\" :underline=\"false\">[" + this.openLabel.replace(/\s/g, '\xa0') + "]</m-link>" :
                "...&nbsp;<m-link style=\"font-weight:400;\" mode=\"button\" title=\"" + this.getOpenLabelTitle + "\" hiddenText=\"" + this.getOpenLabelTitle + "\" :underline=\"false\">[" + '\xa0+\xa0' + "]</m-link>";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MLimitText.prototype, "openLink", {
        get: function () {
            return this.openLabel ? "...&nbsp;<m-link mode=\"button\" title=\"" + this.openLabel.replace(/\s/g, '\xa0') + "\" hiddenText=\"" + this.openLabel.replace(/\s/g, '\xa0') + "\" :underline=\"false\">[" + this.openLabel.replace(/\s/g, '\xa0') + "]</m-link>" :
                "...&nbsp;<m-link mode=\"button\" title=\"" + this.$i18n.translate('m-limit-text:open') + "\" hiddenText=\"" + this.$i18n.translate('m-limit-text:open') + "\" :underline=\"false\">[" + '\xa0+\xa0' + "]</m-link>";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MLimitText.prototype, "closeLink", {
        get: function () {
            return this.closeLabel ? "<m-link mode=\"button\" title=\"" + this.getCloseLabelTitle + "\" hiddenText=\"" + this.getCloseLabelTitle + "\" :underline=\"false\">[" + this.closeLabel.replace(/\s/g, '\xa0') + "]</m-link>" :
                "<m-link mode=\"button\" title=\"" + this.getCloseLabelTitle + "\" hiddenText=\"" + this.getCloseLabelTitle + "\" :underline=\"false\">[" + '\xa0-\xa0' + "]</m-link>";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MLimitText.prototype, "getOpenLabelTitle", {
        get: function () {
            return this.openLabel ? this.openLabel.replace(/\s/g, '\xa0') : this.$i18n.translate('m-limit-text:open');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MLimitText.prototype, "getCloseLabelTitle", {
        get: function () {
            return this.closeLabel ? this.closeLabel.replace(/\s/g, '\xa0') : this.$i18n.translate('m-limit-text:close');
        },
        enumerable: true,
        configurable: true
    });
    MLimitText.prototype.openChanged = function (open) {
        this.internalOpen = open;
    };
    MLimitText.prototype.openText = function () {
        this.internalOpen = true;
        this.$emit('open');
    };
    MLimitText.prototype.closeText = function () {
        this.internalOpen = false;
        this.$emit('close');
    };
    MLimitText.prototype.onUpdatedOpen = function (component) {
        var _this = this;
        if (this.child) {
            this.child.$off('click');
        }
        if (component[0].$children.length > 0) {
            this.child = component[0].$children[0];
        }
        this.child.$on('click', function () { return _this.openText(); });
    };
    MLimitText.prototype.onUpdatedClose = function (component) {
        var _this = this;
        if (this.child) {
            this.child.$off('click');
        }
        if (component[0].$children.length > 0) {
            this.child = component[0].$children[0];
        }
        this.child.$on('click', function () { return _this.closeText(); });
    };
    __decorate([
        Prop()
    ], MLimitText.prototype, "open", void 0);
    __decorate([
        Prop({ default: 4 })
    ], MLimitText.prototype, "lines", void 0);
    __decorate([
        Prop()
    ], MLimitText.prototype, "openLabel", void 0);
    __decorate([
        Prop()
    ], MLimitText.prototype, "closeLabel", void 0);
    __decorate([
        Prop()
    ], MLimitText.prototype, "html", void 0);
    __decorate([
        Watch('open')
    ], MLimitText.prototype, "openChanged", null);
    MLimitText = __decorate([
        WithRender,
        Component({
            mixins: [MediaQueries, ElementQueries]
        })
    ], MLimitText);
    return MLimitText;
}(ModulVue));
export { MLimitText };
var LimitTextPlugin = {
    install: function (v, options) {
        v.use(I18nPlugin);
        v.use(DynamicTemplatePlugin);
        v.component(LIMIT_TEXT_NAME, MLimitText);
    }
};
export default LimitTextPlugin;
//# sourceMappingURL=limit-text.js.map