var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Vue from 'vue';
import Component from 'vue-class-component';
import { Prop } from 'vue-property-decorator';
import { MZingGestureDirections, MZingTapInteractions, MZingTouchGestures } from './enums';
import WithRender from './touch.html';
import ZingTouchUtil from './zingtouch';
import { TOUCH_NAME } from '../component-names';
export var MTouchSwipeDirection;
(function (MTouchSwipeDirection) {
    MTouchSwipeDirection["horizontal"] = "horizontal";
    MTouchSwipeDirection["vertical"] = "vertical";
    MTouchSwipeDirection["both"] = "both";
})(MTouchSwipeDirection || (MTouchSwipeDirection = {}));
var MTouch = /** @class */ (function (_super) {
    __extends(MTouch, _super);
    function MTouch() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MTouch.prototype, "internalSwipeOptions", {
        get: function () {
            var swipeOptions = this.swipeOptions || {};
            return Object.assign({
                direction: swipeOptions.direction || MTouchSwipeDirection.both,
                angleThreshold: swipeOptions.angleThreshold || 20,
                velocity: swipeOptions.velocity || 0.3
            });
        },
        enumerable: true,
        configurable: true
    });
    MTouch.prototype.mounted = function () {
        this.initializeZingTouch();
    };
    MTouch.prototype.beforeDestroy = function () {
        this.destroyZingTouch();
    };
    MTouch.prototype.initializeZingTouch = function () {
        this.destroyZingTouch();
        this.zingRegion = ZingTouchUtil.setupRegion(this.$el, false, false);
        this.configureZingSwipe();
        this.configureZingTap();
    };
    MTouch.prototype.configureZingSwipe = function () {
        var _this = this;
        this.zingRegion.bind(this.$el, ZingTouchUtil.GestureFactory.getGesture(MZingTouchGestures.Swipe, this.internalSwipeOptions), function (event) {
            switch (_this.internalSwipeOptions.direction) {
                case MTouchSwipeDirection.both:
                case MTouchSwipeDirection.horizontal:
                    _this.handleHorizontalSwipe(event);
                    break;
            }
        });
    };
    MTouch.prototype.handleHorizontalSwipe = function (event) {
        var swipeOptions = this.internalSwipeOptions;
        switch (ZingTouchUtil.detectDirection(event, swipeOptions.angleThreshold)) {
            case MZingGestureDirections.Right:
                this.handleZingEvent(event);
                this.$emit('swiperight', event);
                break;
            case MZingGestureDirections.Left:
                this.handleZingEvent(event);
                this.$emit('swipeleft', event);
                break;
        }
    };
    MTouch.prototype.configureZingTap = function () {
        var _this = this;
        this.zingRegion.bind(this.$el, ZingTouchUtil.GestureFactory.getGesture(MZingTouchGestures.Tap), function (event) {
            switch (ZingTouchUtil.detectTap(event)) {
                case MZingTapInteractions.Tap:
                    _this.handleZingEvent(event);
                    _this.$emit('tap', event);
                    break;
                case MZingTapInteractions.Click:
                    _this.handleZingEvent(event);
                    _this.$emit('click', event);
                    break;
            }
        });
    };
    MTouch.prototype.destroyZingTouch = function () {
        if (this.zingRegion) {
            this.zingRegion.unbind(this.$el);
        }
        this.zingRegion = undefined;
    };
    MTouch.prototype.handleZingEvent = function (event) {
        // Since we reemit the event, we stop event propagation.  Event whould be handled twice from each listener otherwise.
        event.stopPropagation();
    };
    __decorate([
        Prop({ default: 'div' })
    ], MTouch.prototype, "tag", void 0);
    __decorate([
        Prop()
    ], MTouch.prototype, "swipeOptions", void 0);
    MTouch = __decorate([
        WithRender,
        Component
    ], MTouch);
    return MTouch;
}(Vue));
export { MTouch };
var TouchPlugin = {
    install: function (v, options) {
        v.component(TOUCH_NAME, MTouch);
    }
};
export default TouchPlugin;
//# sourceMappingURL=touch.js.map