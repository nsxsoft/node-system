import ZingTouch from 'zingtouch';
import { MZingGestureDirections, MZingTapInteractions } from './enums';
var MZingTouchGestureFactory = /** @class */ (function () {
    function MZingTouchGestureFactory() {
    }
    MZingTouchGestureFactory.prototype.getGesture = function (gesture, params) {
        switch (gesture) {
            case 'tap':
                return new ZingTouch.Tap(params || {});
            case 'swipe':
                return new ZingTouch.Swipe(params || {});
            default: throw new Error("ZingTouchUtil: Unrecognized gesture " + gesture + ".");
        }
    };
    return MZingTouchGestureFactory;
}());
export { MZingTouchGestureFactory };
var MZingTouchUtil = /** @class */ (function () {
    function MZingTouchUtil() {
        this.GestureFactory = new MZingTouchGestureFactory();
    }
    MZingTouchUtil.prototype.setupRegion = function (element, capture, preventDefault) {
        if (capture === void 0) { capture = true; }
        if (preventDefault === void 0) { preventDefault = true; }
        element.style.touchAction = '';
        return new ZingTouch.Region(element, capture, preventDefault);
    };
    MZingTouchUtil.prototype.detectDirection = function (event, threshold) {
        if (threshold === void 0) { threshold = 0; }
        var angle = event.detail.data[0].currentDirection;
        if ((angle >= 360 - threshold && angle <= 360) || (angle <= threshold && angle >= 0)) {
            event.detail.events.forEach(function (event) { return event.originalEvent.preventDefault(); });
            return MZingGestureDirections.Right;
        }
        else if (angle >= 180 - threshold && angle <= 180 + threshold) {
            event.detail.events.forEach(function (event) { return event.originalEvent.preventDefault(); });
            return MZingGestureDirections.Left;
        }
        return MZingGestureDirections.None;
    };
    MZingTouchUtil.prototype.detectTap = function (event) {
        var interval = event.detail.interval;
        if (interval <= 5) {
            return MZingTapInteractions.Click;
        }
        else {
            return MZingTapInteractions.Tap;
        }
    };
    return MZingTouchUtil;
}());
export { MZingTouchUtil };
export default new MZingTouchUtil();
//# sourceMappingURL=zingtouch.js.map