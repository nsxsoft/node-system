var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Component, Prop, Vue } from 'vue-property-decorator';
import uuid from '../../../utils/uuid/uuid';
import { DatePrecision } from './../../../utils/modul-date/modul-date';
import { MAbstractCalendarRenderer } from './abstract-calendar-renderer';
import WithRender from './simple-calendar.html?style=./simple-calendar.scss';
var TRANSLATION_ROOT = 'm-calendar' + ':';
var TRANSLATION_MONTHS = TRANSLATION_ROOT + 'month';
var TRANSLATION_WEEKDAYS = TRANSLATION_ROOT + 'weekday';
var TRANSLATION_SUFFIXE = '.short';
var NB_YEARS_PER_ROW = 4;
var NB_MONTHS_PER_ROW = 3;
var MonthsNames;
(function (MonthsNames) {
    MonthsNames["JANUARY"] = "january";
    MonthsNames["FEBRUARY"] = "february";
    MonthsNames["MARCH"] = "march";
    MonthsNames["APRIL"] = "april";
    MonthsNames["MAY"] = "may";
    MonthsNames["JUNE"] = "june";
    MonthsNames["JULY"] = "july";
    MonthsNames["AUGUST"] = "august";
    MonthsNames["SEPTEMBER"] = "september";
    MonthsNames["OCTOBER"] = "october";
    MonthsNames["NOVEMBER"] = "november";
    MonthsNames["DECEMBER"] = "december";
})(MonthsNames || (MonthsNames = {}));
var WeekdayNames;
(function (WeekdayNames) {
    WeekdayNames["SUNDAY"] = "sunday";
    WeekdayNames["MONDAY"] = "monday";
    WeekdayNames["TUESDAY"] = "tuesday";
    WeekdayNames["WEDNESDAY"] = "wednesday";
    WeekdayNames["THURSDAY"] = "thursday";
    WeekdayNames["FRIDAY"] = "friday";
    WeekdayNames["SATURDAY"] = "saturday";
})(WeekdayNames || (WeekdayNames = {}));
export var PickerMode;
(function (PickerMode) {
    PickerMode["DAY"] = "day";
    PickerMode["MONTH"] = "month";
    PickerMode["YEAR"] = "year";
})(PickerMode || (PickerMode = {}));
var MSimpleCalendar = /** @class */ (function (_super) {
    __extends(MSimpleCalendar, _super);
    function MSimpleCalendar() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.previousMonthLabel = _this.$i18n.translate('m-calendar:previous.month');
        _this.nextMonthLabel = _this.$i18n.translate('m-calendar:next.month');
        _this.previousYearLabel = _this.$i18n.translate('m-calendar:previous.year');
        _this.nextYearLabel = _this.$i18n.translate('m-calendar:next.year');
        _this.id = "m-simple-calendar-" + uuid.generate();
        _this.currentPickerMode = _this.initialPickerMode;
        return _this;
    }
    MSimpleCalendar.prototype.onYearClick = function () {
        this.currentPickerMode = PickerMode.YEAR;
    };
    MSimpleCalendar.prototype.onYearSelect = function (year) {
        _super.prototype.onYearSelect.call(this, year);
        this.currentPickerMode = PickerMode.MONTH;
    };
    MSimpleCalendar.prototype.onYearNext = function (event) {
        _super.prototype.onYearNext.call(this, event);
    };
    MSimpleCalendar.prototype.onYearPrevious = function (event) {
        _super.prototype.onYearPrevious.call(this, event);
    };
    MSimpleCalendar.prototype.onMonthClick = function () {
        this.currentPickerMode = PickerMode.MONTH;
    };
    MSimpleCalendar.prototype.onMonthSelect = function (month) {
        _super.prototype.onMonthSelect.call(this, month);
        this.currentPickerMode = PickerMode.DAY;
    };
    MSimpleCalendar.prototype.onMonthNext = function (event) {
        _super.prototype.onMonthNext.call(this, event);
    };
    MSimpleCalendar.prototype.onMonthPrevious = function (event) {
        _super.prototype.onMonthPrevious.call(this, event);
    };
    MSimpleCalendar.prototype.onDaySelect = function (day) {
        var _this = this;
        _super.prototype.onDaySelect.call(this, day);
        // TODO when there will be a directive to manage focus, replace this behaviour with it
        this.$nextTick(function () { return _this.$refs[_this.buildRef('day', day)][0].focus(); });
    };
    MSimpleCalendar.prototype.onDayMouseEnter = function (day) {
        _super.prototype.onDayMouseEnter.call(this, day);
    };
    MSimpleCalendar.prototype.onDayMouseLeave = function (day) {
        _super.prototype.onDayMouseLeave.call(this, day);
    };
    MSimpleCalendar.prototype.hideDay = function (day) {
        return (day.isInNextMonth || day.isInPreviousMonth) && !this.showMonthBeforeAfter;
    };
    MSimpleCalendar.prototype.buildRef = function (prefix, state) {
        var parts = [prefix];
        if ('year' in state) {
            parts.push(this.padString(state.year.toString(), 4));
        }
        if ('month' in state) {
            parts.push(this.padString((state.month + 1).toString()));
        }
        if ('day' in state) {
            parts.push(this.padString(state.day.toString()));
        }
        return parts.join('');
    };
    MSimpleCalendar.prototype.monthIndexToShortName = function (index) {
        return this.monthsNames[index];
    };
    Object.defineProperty(MSimpleCalendar.prototype, "currentYear", {
        get: function () {
            return this.calendar.dates.current.fullYear();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MSimpleCalendar.prototype, "currentMonth", {
        get: function () {
            return this.calendar.dates.current.month();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MSimpleCalendar.prototype, "currentMonthName", {
        get: function () {
            return this.monthsNamesLong[this.currentMonth];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MSimpleCalendar.prototype, "weekdaysLabels", {
        get: function () {
            return this.daysNames;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MSimpleCalendar.prototype, "years", {
        get: function () {
            return this.prepareDataForTableLayout(this.calendar.years, NB_YEARS_PER_ROW);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MSimpleCalendar.prototype, "months", {
        get: function () {
            return this.prepareDataForTableLayout(this.calendar.months, NB_MONTHS_PER_ROW);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MSimpleCalendar.prototype, "isPickerModeYear", {
        get: function () {
            return this.currentPickerMode === PickerMode.YEAR;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MSimpleCalendar.prototype, "isPickerModeMonth", {
        get: function () {
            return this.currentPickerMode === PickerMode.MONTH;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MSimpleCalendar.prototype, "isPickerModeDay", {
        get: function () {
            return this.currentPickerMode === PickerMode.DAY;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MSimpleCalendar.prototype, "isMinYear", {
        get: function () {
            return this.currentYear === Math.min.apply(Math, this.calendar.years.map(function (year) { return year.year; }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MSimpleCalendar.prototype, "isMaxYear", {
        get: function () {
            return this.currentYear === Math.max.apply(Math, this.calendar.years.map(function (year) { return year.year; }));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MSimpleCalendar.prototype, "isMinMonth", {
        get: function () {
            return this.calendar.dates.current.isSameOrBefore(this.calendar.dates.min, DatePrecision.MONTH);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MSimpleCalendar.prototype, "isMaxMonth", {
        get: function () {
            return this.calendar.dates.current.isSameOrAfter(this.calendar.dates.max, DatePrecision.MONTH);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MSimpleCalendar.prototype, "daysOfMonth", {
        get: function () {
            return this.prepareDataForTableLayout(this.calendar.days, 7);
        },
        enumerable: true,
        configurable: true
    });
    MSimpleCalendar.prototype.prepareDataForTableLayout = function (data, nbItemPerRow) {
        var nbRow = Math.ceil(data.length / nbItemPerRow);
        var dataTable = [];
        var count = 0;
        for (var row = 0; row < nbRow; row++) {
            var newRow = [];
            for (var index = 0; index < nbItemPerRow; index++) {
                newRow.push(data[count]);
                count++;
            }
            dataTable.push(newRow);
        }
        return dataTable;
    };
    MSimpleCalendar.prototype.padString = function (value, length) {
        if (length === void 0) { length = 2; }
        return ('000' + value).slice(-1 * length);
    };
    __decorate([
        Prop({ default: PickerMode.DAY })
    ], MSimpleCalendar.prototype, "initialPickerMode", void 0);
    __decorate([
        Prop({ default: true })
    ], MSimpleCalendar.prototype, "showMonthBeforeAfter", void 0);
    __decorate([
        Prop({
            default: function () {
                return Object.keys(MonthsNames).map(function (key) {
                    return Vue.prototype.$i18n.translate(TRANSLATION_MONTHS + "." + MonthsNames[key] + TRANSLATION_SUFFIXE);
                });
            }
        })
    ], MSimpleCalendar.prototype, "monthsNames", void 0);
    __decorate([
        Prop({
            default: function () {
                return Object.keys(MonthsNames).map(function (key) {
                    return Vue.prototype.$i18n.translate(TRANSLATION_MONTHS + "." + MonthsNames[key]);
                });
            }
        })
    ], MSimpleCalendar.prototype, "monthsNamesLong", void 0);
    __decorate([
        Prop({
            default: function () {
                return Object.keys(WeekdayNames).map(function (key) {
                    return Vue.prototype.$i18n.translate(TRANSLATION_WEEKDAYS + "." + WeekdayNames[key] + TRANSLATION_SUFFIXE);
                });
            }
        })
    ], MSimpleCalendar.prototype, "daysNames", void 0);
    MSimpleCalendar = __decorate([
        WithRender,
        Component
    ], MSimpleCalendar);
    return MSimpleCalendar;
}(MAbstractCalendarRenderer));
export default MSimpleCalendar;
//# sourceMappingURL=simple-calendar.js.map