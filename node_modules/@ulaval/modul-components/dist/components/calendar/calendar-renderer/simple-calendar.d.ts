import { DayState, MonthState, YearState } from '../calendar-state/state/calendar-state';
import { MAbstractCalendarRenderer } from './abstract-calendar-renderer';
export declare enum PickerMode {
    DAY = "day",
    MONTH = "month",
    YEAR = "year"
}
export default class MSimpleCalendar extends MAbstractCalendarRenderer {
    initialPickerMode: PickerMode;
    showMonthBeforeAfter: boolean;
    monthsNames: string[];
    monthsNamesLong: string[];
    daysNames: string[];
    previousMonthLabel: string;
    nextMonthLabel: string;
    previousYearLabel: string;
    nextYearLabel: string;
    id: string;
    private currentPickerMode;
    onYearClick(): void;
    onYearSelect(year: YearState): void;
    onYearNext(event: Event): void;
    onYearPrevious(event: Event): void;
    onMonthClick(): void;
    onMonthSelect(month: MonthState): void;
    onMonthNext(event: Event): void;
    onMonthPrevious(event: Event): void;
    onDaySelect(day: DayState): void;
    onDayMouseEnter(day: DayState): void;
    onDayMouseLeave(day: DayState): void;
    hideDay(day: DayState): boolean;
    buildRef(prefix: string, state: DayState | MonthState | YearState): string;
    monthIndexToShortName(index: number): string;
    readonly currentYear: number;
    readonly currentMonth: number;
    readonly currentMonthName: string;
    readonly weekdaysLabels: string[];
    readonly years: number[];
    readonly months: number[];
    readonly isPickerModeYear: boolean;
    readonly isPickerModeMonth: boolean;
    readonly isPickerModeDay: boolean;
    readonly isMinYear: boolean;
    readonly isMaxYear: boolean;
    readonly isMinMonth: boolean;
    readonly isMaxMonth: boolean;
    readonly daysOfMonth: DayState[];
    private prepareDataForTableLayout;
    private padString;
}
//# sourceMappingURL=simple-calendar.d.ts.map