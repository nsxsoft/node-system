var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Vue from 'vue';
import { Component, Emit, Prop, Watch } from 'vue-property-decorator';
import uuid from '../../utils/uuid/uuid';
import { ModulVue } from '../../utils/vue/vue';
import { CALENDAR_NAME } from '../component-names';
import IconButtonPlugin from '../icon-button/icon-button';
import MSimpleCalendar from './calendar-renderer/simple-calendar';
import MCalendarStateMachine from './calendar-state/calendar-state-machine';
import WithRender from './calendar.html';
export var CalendarMode;
(function (CalendarMode) {
    CalendarMode["SINGLE_DATE"] = "single-date";
    CalendarMode["DATE_RANGE"] = "date-range";
})(CalendarMode || (CalendarMode = {}));
var MCalendar = /** @class */ (function (_super) {
    __extends(MCalendar, _super);
    function MCalendar() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.innerValue = _this.value;
        _this.id = "m-calendar-" + uuid.generate();
        return _this;
    }
    MCalendar.prototype.refreshValue = function () {
        this.validateInputModel();
        this.innerValue = this.value;
    };
    MCalendar.prototype.created = function () {
        this.validateInputModel();
    };
    MCalendar.prototype.onInput = function () {
        return this.innerValue;
    };
    Object.defineProperty(MCalendar.prototype, "isSingleDate", {
        get: function () {
            return this.mode === CalendarMode.SINGLE_DATE;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MCalendar.prototype, "isDateRange", {
        get: function () {
            return this.mode === CalendarMode.DATE_RANGE;
        },
        enumerable: true,
        configurable: true
    });
    MCalendar.prototype.validateInputModel = function () {
        switch (this.mode) {
            case CalendarMode.SINGLE_DATE:
                if (typeof this.value !== 'string') {
                    throw new Error("In '" + CalendarMode.SINGLE_DATE + "' mode, the model type should be a 'string'");
                }
                break;
            case CalendarMode.DATE_RANGE:
                if (typeof this.value !== 'object') {
                    throw new Error("In '" + CalendarMode.DATE_RANGE + "' mode, the model type should be an 'object'");
                }
                break;
        }
    };
    __decorate([
        Prop({ default: '' })
    ], MCalendar.prototype, "value", void 0);
    __decorate([
        Prop({ default: CalendarMode.SINGLE_DATE })
    ], MCalendar.prototype, "mode", void 0);
    __decorate([
        Prop()
    ], MCalendar.prototype, "minDate", void 0);
    __decorate([
        Prop()
    ], MCalendar.prototype, "maxDate", void 0);
    __decorate([
        Prop({ default: true })
    ], MCalendar.prototype, "showMonthBeforeAfter", void 0);
    __decorate([
        Watch('value')
    ], MCalendar.prototype, "refreshValue", null);
    __decorate([
        Emit('input')
    ], MCalendar.prototype, "onInput", null);
    MCalendar = __decorate([
        WithRender,
        Component({
            components: {
                MCalendarStateMachine: MCalendarStateMachine,
                MSimpleCalendar: MSimpleCalendar
            }
        })
    ], MCalendar);
    return MCalendar;
}(ModulVue));
export { MCalendar };
var CalendarPlugin = {
    install: function (v, options) {
        v.prototype.$log.warn(CALENDAR_NAME + ' is not ready for production');
        Vue.use(IconButtonPlugin);
        v.component(CALENDAR_NAME, MCalendar);
    }
};
export default CalendarPlugin;
//# sourceMappingURL=calendar.js.map