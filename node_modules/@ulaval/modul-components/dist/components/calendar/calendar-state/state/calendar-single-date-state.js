var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import ModulDate, { DatePrecision } from './../../../../utils/modul-date/modul-date';
import AbstractCalendarState from './abstract-calendar-state';
var CalendarSingleDateState = /** @class */ (function (_super) {
    __extends(CalendarSingleDateState, _super);
    function CalendarSingleDateState() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CalendarSingleDateState.prototype.updateState = function (value, minDate, maxDate) {
        this.initDates(value, minDate, maxDate);
    };
    CalendarSingleDateState.prototype.assembleValue = function () {
        return this.currentDate ? this.currentDate.toString() : '';
    };
    CalendarSingleDateState.prototype.selectDay = function (selectedDay) {
        _super.prototype.selectDay.call(this, selectedDay);
        if (!selectedDay.isDisabled) {
            var newDate = this.selectedDayToDate(selectedDay);
            this.currentDate = newDate;
            this.updateCurrentlyDisplayedDate(newDate.fullYear(), newDate.month(), newDate.day());
            this.emitUpdate(this.assembleValue());
        }
    };
    CalendarSingleDateState.prototype.initCurrentValue = function (value) {
        if (value) {
            this.currentDate = new ModulDate(value);
        }
        else {
            this.currentDate = undefined;
        }
    };
    CalendarSingleDateState.prototype.initCurrentlyDisplayedDate = function () {
        if (this.currentDate) {
            this.updateCurrentlyDisplayedDate(this.currentDate.fullYear(), this.currentDate.month(), this.currentDate.day());
        }
        else {
            this.updateCurrentlyDisplayedDate(this.now.fullYear(), this.now.month(), this.now.day());
        }
    };
    CalendarSingleDateState.prototype.isDaySelected = function (date) {
        return !!this.currentDate && date.isSame(this.currentDate, DatePrecision.DAY);
    };
    return CalendarSingleDateState;
}(AbstractCalendarState));
export default CalendarSingleDateState;
//# sourceMappingURL=calendar-single-date-state.js.map