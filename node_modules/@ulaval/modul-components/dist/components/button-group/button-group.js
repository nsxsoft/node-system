var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Component from 'vue-class-component';
import { Emit, Model, Prop } from 'vue-property-decorator';
import uuid from '../../utils/uuid/uuid';
import { BUTTON_GROUP_NAME } from '../component-names';
import RadioPlugin, { BaseButtonGroup, MRadioPosition, MRadioVerticalAlignement } from '../radio/radio';
import WithRender from './button-group.html?style=./button-group.scss';
var MButtonGroup = /** @class */ (function (_super) {
    __extends(MButtonGroup, _super);
    function MButtonGroup() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.stateIsError = false;
        _this.stateIsValid = false;
        _this.name = uuid.generate();
        _this.internalValue = '';
        return _this;
    }
    MButtonGroup.prototype.onFocus = function (event) { };
    MButtonGroup.prototype.onBlur = function (event) { };
    MButtonGroup.prototype.getValue = function () {
        return this.model;
    };
    Object.defineProperty(MButtonGroup.prototype, "stateIsDisabled", {
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    MButtonGroup.prototype.updateValue = function (value) {
        this.model = value;
    };
    Object.defineProperty(MButtonGroup.prototype, "model", {
        get: function () {
            return this.value === undefined ? this.internalValue : this.value;
        },
        set: function (value) {
            this.internalValue = value;
            this.$emit('change', value);
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Model('change'),
        Prop()
    ], MButtonGroup.prototype, "value", void 0);
    __decorate([
        Prop()
    ], MButtonGroup.prototype, "disabled", void 0);
    __decorate([
        Prop()
    ], MButtonGroup.prototype, "fullSize", void 0);
    __decorate([
        Prop({ default: true })
    ], MButtonGroup.prototype, "inline", void 0);
    __decorate([
        Prop({
            default: MRadioPosition.Left,
            validator: function (value) {
                return value === MRadioPosition.Left ||
                    value === MRadioPosition.Right;
            }
        })
    ], MButtonGroup.prototype, "radiosPosition", void 0);
    __decorate([
        Prop({
            default: MRadioVerticalAlignement.Top,
            validator: function (value) {
                return value === MRadioVerticalAlignement.Top ||
                    value === MRadioVerticalAlignement.Center;
            }
        })
    ], MButtonGroup.prototype, "radiosVerticalAlign", void 0);
    __decorate([
        Prop()
    ], MButtonGroup.prototype, "radiosMarginTop", void 0);
    __decorate([
        Prop({
            default: false
        })
    ], MButtonGroup.prototype, "readOnly", void 0);
    __decorate([
        Emit('focus')
    ], MButtonGroup.prototype, "onFocus", null);
    __decorate([
        Emit('blur')
    ], MButtonGroup.prototype, "onBlur", null);
    MButtonGroup = __decorate([
        WithRender,
        Component
    ], MButtonGroup);
    return MButtonGroup;
}(BaseButtonGroup));
export { MButtonGroup };
var ButtonGroupPlugin = {
    install: function (v, options) {
        v.prototype.$log.error('MButtonGroup will be deprecated in modul v.1.0');
        v.use(RadioPlugin);
        v.component(BUTTON_GROUP_NAME, MButtonGroup);
    }
};
export default ButtonGroupPlugin;
//# sourceMappingURL=button-group.js.map