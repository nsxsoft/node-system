var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Component from 'vue-class-component';
import { Prop } from 'vue-property-decorator';
import { BackdropMode, Portal, PortalTransitionDuration } from '../../mixins/portal/portal';
import UserAgentUtil from '../../utils/user-agent/user-agent';
import { ModulVue } from '../../utils/vue/vue';
import ButtonPlugin from '../button/button';
import { OVERLAY_NAME } from '../component-names';
import I18nPlugin from '../i18n/i18n';
import WithRender from './overlay.html?style=./overlay.scss';
var MOverlay = /** @class */ (function (_super) {
    __extends(MOverlay, _super);
    function MOverlay() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.hasKeyboard = false;
        return _this;
    }
    MOverlay.prototype.mounted = function () {
        this.as().transitionDuration = PortalTransitionDuration.Regular + PortalTransitionDuration.XSlow;
    };
    Object.defineProperty(MOverlay.prototype, "popupBody", {
        get: function () {
            return (this.$refs.article).querySelector('.m-popup__body');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MOverlay.prototype, "isAndroid", {
        get: function () {
            return UserAgentUtil.isAndroid();
        },
        enumerable: true,
        configurable: true
    });
    MOverlay.prototype.onFocusIn = function () {
        if (this.isAndroid) {
            this.hasKeyboard = true;
        }
    };
    MOverlay.prototype.onFocusOut = function () {
        if (this.isAndroid) {
            this.hasKeyboard = false;
        }
    };
    MOverlay.prototype.handlesFocus = function () {
        return this.focusManagement;
    };
    MOverlay.prototype.doCustomPropOpen = function (value) {
        return false;
    };
    MOverlay.prototype.getBackdropMode = function () {
        return BackdropMode.ScrollOnly;
    };
    MOverlay.prototype.getPortalElement = function () {
        return this.$refs.article;
    };
    Object.defineProperty(MOverlay.prototype, "hasHeaderRightSlot", {
        get: function () {
            return !!this.$slots['header-right'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MOverlay.prototype, "isSaveButtonDisabled", {
        get: function () {
            return this.disableSaveButton;
        },
        enumerable: true,
        configurable: true
    });
    MOverlay.prototype.save = function (e) {
        this.$emit('save', e);
    };
    MOverlay.prototype.cancel = function (e) {
        this.$emit('cancel', e);
        this.close();
    };
    MOverlay.prototype.close = function () {
        this.as().tryClose();
    };
    __decorate([
        Prop({ default: true })
    ], MOverlay.prototype, "focusManagement", void 0);
    __decorate([
        Prop({ default: true })
    ], MOverlay.prototype, "padding", void 0);
    __decorate([
        Prop({ default: true })
    ], MOverlay.prototype, "paddingHeader", void 0);
    __decorate([
        Prop({ default: true })
    ], MOverlay.prototype, "paddingBody", void 0);
    __decorate([
        Prop({ default: true })
    ], MOverlay.prototype, "paddingFooter", void 0);
    __decorate([
        Prop({ default: false })
    ], MOverlay.prototype, "disableSaveButton", void 0);
    MOverlay = __decorate([
        WithRender,
        Component({
            mixins: [Portal]
        })
    ], MOverlay);
    return MOverlay;
}(ModulVue));
export { MOverlay };
var OverlayPlugin = {
    install: function (v, options) {
        v.use(ButtonPlugin);
        v.use(I18nPlugin);
        v.component(OVERLAY_NAME, MOverlay);
    }
};
export default OverlayPlugin;
//# sourceMappingURL=overlay.js.map