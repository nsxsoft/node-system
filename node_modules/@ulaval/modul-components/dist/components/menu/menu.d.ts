import { PluginObject } from 'vue';
import { ModulVue } from '../../utils/vue/vue';
export declare abstract class BaseMenu extends ModulVue {
}
export interface Menu {
    model: string;
    propOpen: boolean;
    propDisabled: boolean;
    animReady: boolean;
    closeOnSelectionInAction: boolean;
    updateValue(value: string | undefined): void;
    onClick(event: Event, value: string): void;
}
export declare enum MMenuSkin {
    Light = "light",
    Dark = "dark"
}
export declare class MMenu extends BaseMenu implements Menu {
    selected: string;
    open: boolean;
    closeOnSelection: boolean;
    skin: MMenuSkin;
    disabled: boolean;
    idAriaControls: string;
    $refs: {
        menu: HTMLElement;
        buttonMenu: HTMLElement;
    };
    animReady: boolean;
    closeOnSelectionInAction: boolean;
    private internalValue;
    private internalOpen;
    private internalDisabled;
    private internalItems;
    private observer;
    updateValue(value: string | undefined): void;
    onClick(event: Event, value: string): void;
    protected mounted(): void;
    private buildItemsMap;
    private selectedItem;
    model: any;
    private openChanged;
    private disabledChanged;
    propDisabled: boolean;
    propOpen: boolean;
    private toggleMenu;
    private readonly hasSlotTrigger;
}
declare const MenuPlugin: PluginObject<any>;
export default MenuPlugin;
//# sourceMappingURL=menu.d.ts.map