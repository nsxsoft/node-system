var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Component from 'vue-class-component';
import { Emit, Prop, Watch } from 'vue-property-decorator';
import uuid from '../../utils/uuid/uuid';
import { ModulVue } from '../../utils/vue/vue';
import AccordionTransitionPlugin from '../accordion/accordion-transition';
import { MENU_ITEM_NAME, MENU_NAME } from '../component-names';
import I18nPlugin from '../i18n/i18n';
import IconButtonPlugin from '../icon-button/icon-button';
import IconPlugin from '../icon/icon';
import PlusPlugin from '../plus/plus';
import { MMenuItem } from './menu-item/menu-item';
import WithRender from './menu.html?style=./menu.scss';
var BaseMenu = /** @class */ (function (_super) {
    __extends(BaseMenu, _super);
    function BaseMenu() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return BaseMenu;
}(ModulVue));
export { BaseMenu };
export var MMenuSkin;
(function (MMenuSkin) {
    MMenuSkin["Light"] = "light";
    MMenuSkin["Dark"] = "dark";
})(MMenuSkin || (MMenuSkin = {}));
var MMenu = /** @class */ (function (_super) {
    __extends(MMenu, _super);
    function MMenu() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.animReady = false;
        _this.closeOnSelectionInAction = false;
        _this.internalValue = '';
        _this.internalOpen = false;
        _this.internalDisabled = false;
        _this.internalItems = [];
        return _this;
    }
    MMenu.prototype.updateValue = function (value) {
        this.model = value;
    };
    MMenu.prototype.onClick = function (event, value) { };
    MMenu.prototype.mounted = function () {
        var _this = this;
        this.model = this.selected;
        this.propOpen = this.open;
        this.propDisabled = this.disabled;
        this.$nextTick(function () {
            _this.buildItemsMap();
            _this.observer = new MutationObserver(function () {
                _this.buildItemsMap();
            });
            if (_this.$refs.menu) {
                _this.observer.observe(_this.$refs.menu, { subtree: true, childList: true });
            }
        });
        setTimeout(function () {
            _this.animReady = true;
        });
    };
    MMenu.prototype.buildItemsMap = function () {
        var items = [];
        this.$children.forEach(function (item) {
            if (item instanceof MMenuItem) {
                items.push(item);
                if (item.group) {
                    item.$children.forEach(function (groupItem) {
                        if (groupItem instanceof MMenuItem) {
                            groupItem.insideGroup = true;
                            items.push(groupItem);
                        }
                    });
                }
            }
        });
        this.internalItems = items;
    };
    MMenu.prototype.selectedItem = function () {
        var _this = this;
        if (this.internalItems) {
            this.internalItems.forEach(function (item) {
                if (!item.isDisabled) {
                    if (item.value === _this.model) {
                        item.selected = true;
                    }
                    else if (item.selected) {
                        item.selected = false;
                    }
                }
            });
            this.internalItems.forEach(function (item) {
                if (!item.isDisabled) {
                    if (item.group) {
                        if (!_this.open) {
                            item.propOpen = false;
                        }
                        var groupSelected_1 = false;
                        item.$children.forEach(function (itemGroup) {
                            if (itemGroup instanceof MMenuItem && itemGroup.selected) {
                                item.propOpen = true;
                                groupSelected_1 = true;
                            }
                        });
                        item.groupSelected = groupSelected_1;
                    }
                }
            });
        }
    };
    Object.defineProperty(MMenu.prototype, "model", {
        get: function () {
            return this.internalValue;
        },
        set: function (value) {
            var _this = this;
            if (!this.closeOnSelectionInAction) {
                this.internalValue = value;
                this.selectedItem();
                this.$emit('update:selected', value);
                if (this.closeOnSelection) {
                    this.closeOnSelectionInAction = true;
                    // Add a delay before closing the menu to display the selected item
                    setTimeout(function () {
                        _this.propOpen = false;
                        _this.closeOnSelectionInAction = false;
                    }, 600);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    MMenu.prototype.openChanged = function (open) {
        this.propOpen = open;
    };
    MMenu.prototype.disabledChanged = function (disabled) {
        this.propDisabled = disabled;
    };
    Object.defineProperty(MMenu.prototype, "propDisabled", {
        get: function () {
            return this.internalDisabled;
        },
        set: function (disabled) {
            this.internalDisabled = disabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MMenu.prototype, "propOpen", {
        get: function () {
            return this.internalOpen;
        },
        set: function (open) {
            this.animReady = false;
            this.selectedItem();
            this.internalOpen = open;
            this.$emit('update:open', open);
            this.animReady = true;
        },
        enumerable: true,
        configurable: true
    });
    MMenu.prototype.toggleMenu = function (event) {
        if (!this.propDisabled) {
            this.propOpen = !this.propOpen;
            this.$refs.buttonMenu.blur();
            this.onClick(event, '');
        }
    };
    Object.defineProperty(MMenu.prototype, "hasSlotTrigger", {
        get: function () {
            return !!this.$slots.trigger;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Prop()
    ], MMenu.prototype, "selected", void 0);
    __decorate([
        Prop()
    ], MMenu.prototype, "open", void 0);
    __decorate([
        Prop({ default: true })
    ], MMenu.prototype, "closeOnSelection", void 0);
    __decorate([
        Prop({
            default: MMenuSkin.Dark,
            validator: function (value) {
                return value === MMenuSkin.Light ||
                    value === MMenuSkin.Dark;
            }
        })
    ], MMenu.prototype, "skin", void 0);
    __decorate([
        Prop()
    ], MMenu.prototype, "disabled", void 0);
    __decorate([
        Prop({ default: "mMenu-" + uuid.generate() + "-controls" })
    ], MMenu.prototype, "idAriaControls", void 0);
    __decorate([
        Watch('selected')
    ], MMenu.prototype, "updateValue", null);
    __decorate([
        Emit('click')
    ], MMenu.prototype, "onClick", null);
    __decorate([
        Watch('open')
    ], MMenu.prototype, "openChanged", null);
    __decorate([
        Watch('disabled')
    ], MMenu.prototype, "disabledChanged", null);
    MMenu = __decorate([
        WithRender,
        Component
    ], MMenu);
    return MMenu;
}(BaseMenu));
export { MMenu };
var MenuPlugin = {
    install: function (v, options) {
        v.use(AccordionTransitionPlugin);
        v.use(I18nPlugin);
        v.use(PlusPlugin);
        v.use(IconPlugin);
        v.use(IconButtonPlugin);
        v.component(MENU_ITEM_NAME, MMenuItem);
        v.component(MENU_NAME, MMenu);
    }
};
export default MenuPlugin;
//# sourceMappingURL=menu.js.map