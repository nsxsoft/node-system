var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import Component from 'vue-class-component';
import { Model, Prop, Watch } from 'vue-property-decorator';
import { ModulVue } from '../../utils/vue/vue';
export var InputManagementAutocomplete;
(function (InputManagementAutocomplete) {
    InputManagementAutocomplete["Off"] = "off";
    InputManagementAutocomplete["On"] = "on";
})(InputManagementAutocomplete || (InputManagementAutocomplete = {}));
var InputManagement = /** @class */ (function (_super) {
    __extends(InputManagement, _super);
    function InputManagement() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.trimWordWrap = false;
        _this.internalValue = '';
        _this.internalIsFocus = false;
        return _this;
    }
    InputManagement.prototype.focusInput = function () {
        var inputEl = this.as().getInput();
        if (inputEl) {
            inputEl.focus();
        }
    };
    Object.defineProperty(InputManagement.prototype, "hasValue", {
        get: function () {
            return !!(this.model || '').toString().trim();
        },
        enumerable: true,
        configurable: true
    });
    InputManagement.prototype.beforeMount = function () {
        // Don't use this.model because we don't want to emit 'input' when the component isn't Mount
        this.internalValue = this.getTrimValue(this.value ? this.value : '');
    };
    InputManagement.prototype.mounted = function () {
        if (this.focus) {
            this.focusChanged(this.focus);
        }
    };
    InputManagement.prototype.focusChanged = function (focus) {
        this.internalIsFocus = focus && this.as().active;
        var inputEl = this.as().getInput();
        if (inputEl) {
            if (this.internalIsFocus) {
                inputEl.focus();
            }
            else {
                inputEl.blur();
            }
        }
    };
    InputManagement.prototype.onClick = function (event) {
        this.internalIsFocus = this.as().active;
        var inputEl = this.as().getInput();
        if (this.internalIsFocus && inputEl) {
            inputEl.focus();
        }
        this.$emit('click');
    };
    InputManagement.prototype.onFocus = function (event) {
        this.internalIsFocus = this.as().active;
        if (this.internalIsFocus) {
            this.$emit('focus', event);
        }
    };
    InputManagement.prototype.onBlur = function (event) {
        this.internalIsFocus = false;
        this.$emit('blur', event);
    };
    InputManagement.prototype.onKeyup = function (event) {
        if (this.as().active) {
            this.$emit('keyup', event, this.model);
        }
    };
    InputManagement.prototype.onKeydown = function (event) {
        if (this.as().active) {
            this.$emit('keydown', event);
        }
    };
    InputManagement.prototype.onChange = function (event) {
        this.$emit('change', this.model);
    };
    InputManagement.prototype.onPaste = function (event) {
        this.$emit('paste', event);
    };
    InputManagement.prototype.getTrimValue = function (value) {
        return /\n/g.test(value) && this.trimWordWrap ? value.replace(/\n/g, '') : value;
    };
    InputManagement.prototype.onValueChange = function (value) {
        this.model = value;
    };
    Object.defineProperty(InputManagement.prototype, "model", {
        get: function () {
            return this.internalValue;
        },
        set: function (value) {
            this.internalValue = this.getTrimValue(value);
            this.$emit('input', this.internalValue);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputManagement.prototype, "isEmpty", {
        get: function () {
            return this.isFocus || this.hasValue ? false : true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputManagement.prototype, "isFocus", {
        get: function () {
            return this.internalIsFocus;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Prop(),
        Model('input')
    ], InputManagement.prototype, "value", void 0);
    __decorate([
        Prop()
    ], InputManagement.prototype, "placeholder", void 0);
    __decorate([
        Prop()
    ], InputManagement.prototype, "readonly", void 0);
    __decorate([
        Prop({
            default: undefined,
            validator: function (value) {
                return value === InputManagementAutocomplete.Off ||
                    value === InputManagementAutocomplete.On ||
                    value === undefined;
            }
        })
    ], InputManagement.prototype, "autocomplete", void 0);
    __decorate([
        Prop()
    ], InputManagement.prototype, "focus", void 0);
    __decorate([
        Watch('focus')
    ], InputManagement.prototype, "focusChanged", null);
    __decorate([
        Watch('value')
    ], InputManagement.prototype, "onValueChange", null);
    InputManagement = __decorate([
        Component
    ], InputManagement);
    return InputManagement;
}(ModulVue));
export { InputManagement };
//# sourceMappingURL=input-management.js.map