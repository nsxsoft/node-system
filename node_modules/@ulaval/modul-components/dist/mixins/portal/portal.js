var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import Component from 'vue-class-component';
import { Prop, Watch } from 'vue-property-decorator';
import { MouseButtons } from '../../utils/mouse/mouse';
import uuid from '../../utils/uuid/uuid';
import { ModulVue } from '../../utils/vue/vue';
import { MediaQueries } from '../media-queries/media-queries';
import { MOpenTrigger, OpenTrigger } from '../open-trigger/open-trigger';
export var BackdropMode;
(function (BackdropMode) {
    BackdropMode[BackdropMode["None"] = 0] = "None";
    BackdropMode[BackdropMode["ScrollOnly"] = 1] = "ScrollOnly";
    BackdropMode[BackdropMode["BackdropFast"] = 2] = "BackdropFast";
    BackdropMode[BackdropMode["BackdropSlow"] = 3] = "BackdropSlow";
})(BackdropMode || (BackdropMode = {}));
export var PortalTransitionDuration;
(function (PortalTransitionDuration) {
    PortalTransitionDuration[PortalTransitionDuration["Fast"] = 200] = "Fast";
    PortalTransitionDuration[PortalTransitionDuration["Regular"] = 300] = "Regular";
    PortalTransitionDuration[PortalTransitionDuration["Slow"] = 450] = "Slow";
    PortalTransitionDuration[PortalTransitionDuration["XSlow"] = 600] = "XSlow";
})(PortalTransitionDuration || (PortalTransitionDuration = {}));
var Portal = /** @class */ (function (_super) {
    __extends(Portal, _super);
    function Portal() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.loaded = false;
        _this.internalTrigger = undefined;
        _this.propId = '';
        _this.internalOpen = false;
        _this.internalTransitionDuration = PortalTransitionDuration.Regular;
        _this.opening = false;
        _this.portalTargetCreated = false;
        _this.portalTargetMounted = false;
        return _this;
    }
    Portal.prototype.setFocusToPortal = function () {
        if (this.as().handlesFocus()) {
            var el = this.as().getPortalElement();
            var x = window.pageXOffset; // AEL-53
            var y = window.pageYOffset; // AEL-53
            el.setAttribute('tabindex', '0');
            el.focus();
            window.scrollTo(x, y); // AEL-53
            el.blur();
            el.removeAttribute('tabindex');
        }
    };
    Portal.prototype.setFocusToTrigger = function () {
        if (this.as().handlesFocus() && this.internalTrigger) {
            this.internalTrigger.setAttribute('tabindex', '0');
            this.internalTrigger.focus();
            this.internalTrigger.blur();
            this.internalTrigger.removeAttribute('tabindex');
        }
    };
    Portal.prototype.getPortalElement = function () {
        return this.portalTargetEl;
    };
    Portal.prototype.getTrigger = function () {
        return this.internalTrigger;
    };
    Portal.prototype.tryClose = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.$toast) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.$toast.clear()];
                    case 1:
                        _a.sent(); // @todo Portal should not know toast
                        _a.label = 2;
                    case 2:
                        if (this.$modul.peekElement() === this.stackId) {
                            if (this.$listeners && this.$listeners.beforeClose) {
                                this.$emit('beforeClose', function (close) {
                                    _this.propOpen = !close;
                                });
                            }
                            else {
                                this.propOpen = false;
                            }
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Portal.prototype.created = function () {
        if (!this.$modul) {
            throw new Error('Portal mixin -> this.$modul is undefined, you must install the Modul plugin.');
        }
    };
    Portal.prototype.mounted = function () {
        this.portalTargetEl = document.getElementById(this.propId);
        this.handleTrigger();
        if (!this.lazy) {
            this.ensurePortalTargetEl();
        }
    };
    Portal.prototype.beforeDestroy = function () {
        this.propOpen = false;
        if (this.internalTrigger) {
            this.internalTrigger.removeEventListener('click', this.toggle);
            this.internalTrigger.removeEventListener('mouseenter', this.handleMouseEnter);
        }
        if (this.portalTargetEl && this.portalTargetEl.parentNode) {
            this.portalTargetEl.parentNode.removeChild(this.portalTargetEl);
            this.portalTargetCreated = false;
            this.portalTargetMounted = false;
        }
    };
    Object.defineProperty(Portal.prototype, "propOpen", {
        get: function () {
            var open = (this.open === undefined ? this.internalOpen : this.open) && !this.disabled;
            if (open) {
                this.loaded = true;
            }
            return open;
        },
        set: function (value) {
            var _this = this;
            if (value !== this.internalOpen) {
                if (value) {
                    this.ensurePortalTargetEl(function () {
                        if (_this.portalTargetEl) {
                            _this.stackId = _this.$modul.pushElement(_this.portalTargetEl, _this.as().getBackdropMode(), _this.as().isMqMaxS);
                            if (!_this.as().doCustomPropOpen(value, _this.portalTargetEl)) {
                                _this.portalTargetEl.style.position = 'absolute';
                                _this.portalTargetEl.style.top = '0';
                                _this.portalTargetEl.style.left = '0';
                                // this.opening is important since it's fix a race condition where the portal
                                // could appear behind the content of the page if it was toggled too quickly.
                                _this.opening = true;
                                setTimeout(function () {
                                    _this.$emit('portal-content-visible');
                                    _this.setFocusToPortal();
                                    _this.opening = false;
                                }, _this.transitionDuration);
                            }
                            else {
                                _this.$emit('portal-content-visible');
                            }
                        }
                    });
                }
                else {
                    if (this.portalTargetEl) {
                        this.$modul.popElement(this.stackId);
                        if (!this.as().doCustomPropOpen(value, this.portalTargetEl)) {
                            this.setFocusToTrigger();
                            setTimeout(function () {
                                // $emit update:open has been launched, animation already occurs
                                if (!_this.opening) {
                                    _this.portalTargetEl.style.position = '';
                                }
                            }, this.transitionDuration);
                        }
                    }
                }
                if (value !== this.internalOpen) {
                    // really closing, reset focus
                    this.$emit(value ? 'open' : 'close');
                }
            }
            this.internalOpen = value;
            this.$emit('update:open', value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Portal.prototype, "transitionDuration", {
        get: function () {
            return this.internalTransitionDuration;
        },
        set: function (speed) {
            this.internalTransitionDuration = speed;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Portal.prototype, "portalTargetSelector", {
        get: function () {
            return this.propId ? "#" + this.propId : '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Portal.prototype, "portalCreated", {
        get: function () {
            return this.portalTargetCreated;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Portal.prototype, "portalMounted", {
        get: function () {
            return (this.propOpen || this.preload || this.loaded) && (this.portalTargetMounted || !this.lazy);
        },
        enumerable: true,
        configurable: true
    });
    Portal.prototype.onTriggerChange = function () {
        this.handleTrigger();
    };
    Portal.prototype.onTriggerHookChange = function () {
        this.handleTrigger();
    };
    Portal.prototype.handleTrigger = function () {
        if (this.internalTrigger) {
            this.$log.warn('portal.ts : Trigger change or multiple triggers not supported');
        }
        if (this.trigger) {
            this.internalTrigger = this.trigger;
        }
        else if (this.$slots.trigger && this.$slots.trigger[0]) {
            this.internalTrigger = this.$slots.trigger[0].elm;
        }
        else if (this.as().triggerHook) {
            this.internalTrigger = this.as().triggerHook;
        }
        if (this.internalTrigger) {
            switch (this.openTrigger) {
                case MOpenTrigger.Click:
                    this.internalTrigger.addEventListener('click', this.toggle);
                    break;
                case MOpenTrigger.MouseDown:
                    this.internalTrigger.addEventListener('mousedown', this.toggle);
                    break;
                case MOpenTrigger.Hover:
                    this.internalTrigger.addEventListener('mouseenter', this.handleMouseEnter);
                    // Closing not supported for the moment, check source code history for how was handled mouse leave
                    break;
            }
        }
    };
    Portal.prototype.toggle = function (event) {
        if (event.button !== undefined && event.button === MouseButtons.LEFT) {
            this.propOpen = !this.propOpen;
            this.$emit('click', event);
        }
    };
    Portal.prototype.handleMouseEnter = function () {
        this.propOpen = true;
    };
    Portal.prototype.ensurePortalTargetEl = function (onPortalReady) {
        var _this = this;
        if (onPortalReady === void 0) { onPortalReady = function () { }; }
        if (!this.portalTargetEl) {
            this.propId = this.id === undefined ? 'mPortal-' + uuid.generate() : this.id;
            this.portalTargetEl = document.createElement('div');
            this.portalTargetEl.setAttribute('id', this.propId);
            this.portalTargetEl.classList.add('m-u--app-body');
            document.body.appendChild(this.portalTargetEl);
            this.portalTargetCreated = true;
            // We wait for the portal creation / mounting.
            this.$nextTick(function () {
                _this.portalTargetMounted = true;
                _this.portalTargetEl = document.querySelector(_this.portalTargetSelector);
                _this.$emit('portal-content-mounted');
                onPortalReady();
            });
        }
        else {
            onPortalReady();
        }
    };
    Portal.prototype.openChanged = function (open) {
        this.propOpen = open;
    };
    __decorate([
        Prop({
            default: MOpenTrigger.Click,
            validator: function (value) {
                return value === MOpenTrigger.Click ||
                    value === MOpenTrigger.Hover ||
                    value === MOpenTrigger.Manual ||
                    value === MOpenTrigger.MouseDown;
            }
        })
    ], Portal.prototype, "openTrigger", void 0);
    __decorate([
        Prop()
    ], Portal.prototype, "open", void 0);
    __decorate([
        Prop()
    ], Portal.prototype, "id", void 0);
    __decorate([
        Prop()
    ], Portal.prototype, "disabled", void 0);
    __decorate([
        Prop()
    ], Portal.prototype, "trigger", void 0);
    __decorate([
        Prop()
    ], Portal.prototype, "className", void 0);
    __decorate([
        Prop()
    ], Portal.prototype, "preload", void 0);
    __decorate([
        Prop({ default: true })
    ], Portal.prototype, "lazy", void 0);
    __decorate([
        Watch('trigger')
    ], Portal.prototype, "onTriggerChange", null);
    __decorate([
        Watch('internalTriggerHook')
    ], Portal.prototype, "onTriggerHookChange", null);
    __decorate([
        Watch('open', {
            immediate: true
        })
    ], Portal.prototype, "openChanged", null);
    Portal = __decorate([
        Component({
            mixins: [OpenTrigger, MediaQueries]
        })
    ], Portal);
    return Portal;
}(ModulVue));
export { Portal };
//# sourceMappingURL=portal.js.map