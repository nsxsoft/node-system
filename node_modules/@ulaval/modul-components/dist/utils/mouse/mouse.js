// Inspiration => https://acko.net/blog/mouse-handling-and-absolute-positions-in-javascript/.
var getRelativeMousePos = function (event, reference) {
    var x = 0;
    var y = 0;
    var mouseEvent = event;
    var pos;
    var el = undefined;
    if (mouseEvent && mouseEvent.offsetX !== undefined && mouseEvent.offsetY !== undefined) {
        pos = { x: mouseEvent.offsetX, y: mouseEvent.offsetY };
        el = mouseEvent.target;
    }
    var customEvent = event;
    if (customEvent && customEvent.detail && customEvent.detail.offsetX !== undefined && customEvent.detail.offsetY !== undefined) {
        pos = { x: customEvent.detail.offsetX, y: customEvent.detail.offsetY };
        el = customEvent.detail.target;
    }
    if (el === reference) {
        return { x: pos.x, y: pos.y };
    }
    if (!pos || !el) {
        return { x: 0, y: 0 };
    }
    // Fix for firefox.
    var recursiveElement = el;
    while (recursiveElement.nodeType === Node.TEXT_NODE) {
        recursiveElement = recursiveElement.parentElement;
    }
    // Send the coordinates upwards through the offsetParent chain.
    while (recursiveElement) {
        recursiveElement.mouseX = pos.x || 0;
        recursiveElement.mouseY = pos.y || 0;
        pos.x += (recursiveElement).offsetLeft || 0;
        pos.y += (recursiveElement).offsetTop || 0;
        recursiveElement = (recursiveElement).offsetParent;
    }
    // Look for the coordinates starting from the reference element.
    var recursiveReference = reference;
    var offset = { x: 0, y: 0 };
    while (recursiveReference) {
        if (typeof recursiveReference.mouseX !== 'undefined') {
            x = recursiveReference.mouseX - offset.x;
            y = recursiveReference.mouseY - offset.y;
            break;
        }
        offset.x += recursiveReference.offsetLeft || 0;
        offset.y += recursiveReference.offsetTop || 0;
        recursiveReference = recursiveReference.offsetParent;
    }
    // Reset stored coordinates
    var recursiveCleanup = el;
    while (recursiveCleanup) {
        recursiveCleanup.mouseX = undefined;
        recursiveCleanup.mouseY = undefined;
        recursiveCleanup = recursiveCleanup.offsetParent;
    }
    // Subtract distance to middle
    return { x: x, y: y };
};
export var mousePositionElement = function (e, relativeToEl) {
    return getRelativeMousePos(e, relativeToEl);
};
export var isInElement = function (e, relativeToEl, threshold) {
    if (threshold === void 0) { threshold = 3; }
    var mousePosition = mousePositionElement(e, relativeToEl);
    return mousePosition.x > 0 && mousePosition.y > 0
        && mousePosition.x + threshold <= relativeToEl.offsetWidth
        && mousePosition.y + threshold <= relativeToEl.offsetHeight;
};
var MouseButtons = /** @class */ (function () {
    function MouseButtons() {
    }
    MouseButtons.LEFT = 0;
    MouseButtons.WHEEL = 1;
    MouseButtons.RIGHT = 2;
    MouseButtons.BROWSER_BACK = 3;
    MouseButtons.BROWSER_FORWARD = 4;
    return MouseButtons;
}());
export { MouseButtons };
//# sourceMappingURL=mouse.js.map