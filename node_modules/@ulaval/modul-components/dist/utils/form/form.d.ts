import { FormField } from './form-field/form-field';
import { FormValidation } from './form-validation/form-validation';
export declare type FormValidationCallback = (formInstance: Form) => FormValidation;
export declare type FormFieldGroup = {
    [name: string]: FormField<any>;
};
/**
 * Form Class
 */
export declare class Form {
    private fieldGroup;
    private validationCallbacks;
    id: string;
    private internalState;
    /**
     *
     * @param fieldGroup the group of field that populate the form
     * @param validationCallbacks a list of function to call to verify the form's state
     */
    constructor(fieldGroup: FormFieldGroup, validationCallbacks?: FormValidationCallback[]);
    /**
     * return the form fields
     */
    readonly fields: FormField<any>[];
    /**
     * Total number of errors
     */
    readonly totalNbOfErrors: number;
    /**
     * Number of fields that have errors
     */
    readonly nbFieldsThatHasError: number;
    /**
     * Number of form errors
     */
    readonly nbOfErrors: number;
    /**
     * return true if the form contains no field with errors
     */
    readonly isValid: boolean;
    /**
     * Return the formField with the coresponding name
     *
     * @param formFieldName the name of the formfield to access
     */
    get(formFieldName: string): FormField<any>;
    /**
     * reset all fields in the form without validating
     */
    reset(): void;
    /**
     * returns all the messages that must be shown in the summary
     */
    getErrorsForSummary(): string[];
    focusFirstFieldWithError(): void;
    /**
     * validate all fields in the form
     */
    validateAll(): void;
    private changeState;
}
//# sourceMappingURL=form.d.ts.map