import { Form } from '../form';
export interface MFormEventParams {
    form?: Form;
    totalNbOfErrors?: number;
    errorsToShowInMessagesCallback?: (errors: string[]) => void;
}
declare type ListenerCallback = (params?: MFormEventParams) => void;
export declare enum MFormEvents {
    formErrorClear = 0,
    formError = 1
}
export declare class MFormListener {
    readonly eventType: MFormEvents;
    readonly callback: ListenerCallback;
    constructor(eventType: MFormEvents, callback: ListenerCallback);
}
export declare class FormClearToastBehavior extends MFormListener {
    constructor();
}
export declare class FormErrorToastBehavior extends MFormListener {
    constructor();
}
export declare class FormErrorFocusBehavior extends MFormListener {
    constructor();
}
export declare class FormErrorMessagesBehavior extends MFormListener {
    constructor();
}
export declare class MFormService {
    private _listeners;
    constructor(listeners: MFormListener[]);
    readonly listeners: MFormListener[];
}
export {};
//# sourceMappingURL=form-service.d.ts.map