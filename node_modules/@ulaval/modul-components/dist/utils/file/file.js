var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import axios from 'axios';
import Vue from 'vue';
import uuid from '../uuid/uuid';
export var DEFAULT_STORE_NAME = 'DEFAULT';
export var MFileRejectionCause;
(function (MFileRejectionCause) {
    MFileRejectionCause["FILE_SIZE"] = "file-size";
    MFileRejectionCause["FILE_TYPE"] = "file-type";
    MFileRejectionCause["MAX_FILES"] = "max-files";
})(MFileRejectionCause || (MFileRejectionCause = {}));
export var MFileStatus;
(function (MFileStatus) {
    MFileStatus["READY"] = "ready";
    MFileStatus["UPLOADING"] = "uploading";
    MFileStatus["COMPLETED"] = "completed";
    MFileStatus["FAILED"] = "failed";
    MFileStatus["REJECTED"] = "rejected";
    MFileStatus["CANCELED"] = "canceled";
})(MFileStatus || (MFileStatus = {}));
var FileService = /** @class */ (function () {
    function FileService() {
        this.stores = {};
    }
    FileService.prototype.files = function (storeName) {
        return this.getStore(storeName).files;
    };
    FileService.prototype.setValidationOptions = function (options, storeName) {
        this.getStore(storeName).validationOptions = options;
    };
    FileService.prototype.add = function (files, storeName) {
        this.getStore(storeName).add(files);
    };
    FileService.prototype.remove = function (fileuid, storeName) {
        this.getStore(storeName).remove(fileuid);
    };
    FileService.prototype.clear = function (storeName) {
        this.getStore(storeName).clear();
    };
    FileService.prototype.destroy = function (storeName) {
        this.getStore(storeName).destroy();
        delete this.stores[this.getStoreName(storeName)];
    };
    FileService.prototype.upload = function (fileuid, options, storeName) {
        return this.getStore(storeName).upload(fileuid, options);
    };
    FileService.prototype.uploadTemp = function (files, storeName) {
        this.getStore(storeName).uploadTemp(files);
    };
    FileService.prototype.cancelUpload = function (fileuid, storeName) {
        this.getStore(storeName).cancelUpload(fileuid);
    };
    FileService.prototype.getStoreName = function (name) {
        return name ? name : DEFAULT_STORE_NAME;
    };
    FileService.prototype.getStore = function (name) {
        var storeName = this.getStoreName(name);
        var store = this.stores[storeName];
        if (!store) {
            store = this.stores[storeName] = new FileStore();
        }
        return store;
    };
    return FileService;
}());
export { FileService };
export function extractExtension(filename) {
    if (filename) {
        var match = filename.match(/\.([a-zA-Z0-9]{2,4})$/);
        return match ? match[1].toLowerCase() : '';
    }
    return '';
}
var FileStore = /** @class */ (function () {
    function FileStore() {
        this.filesmap = {};
        this.cancelTokens = {};
        this.rx = new Vue({
            data: {
                files: []
            }
        });
    }
    Object.defineProperty(FileStore.prototype, "validationOptions", {
        set: function (options) {
            this.options = options;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FileStore.prototype, "files", {
        get: function () {
            return this.rx.files;
        },
        enumerable: true,
        configurable: true
    });
    FileStore.prototype.getFile = function (uid) {
        return this.filesmap[uid];
    };
    FileStore.prototype.add = function (files) {
        var _loop_1 = function (i) {
            var file = files[i];
            var mfile = {
                uid: uuid.generate(),
                name: file.name,
                file: file,
                status: MFileStatus.READY,
                progress: 0,
                get extension() {
                    return extractExtension(file.name);
                }
            };
            this_1.validate(mfile);
            Object.freeze(mfile.file); // disable vuejs reactivity
            this_1.filesmap[mfile.uid] = mfile;
        };
        var this_1 = this;
        for (var i = 0; i < files.length; ++i) {
            _loop_1(i);
        }
        this.refreshRx();
    };
    FileStore.prototype.remove = function (uid) {
        delete this.filesmap[uid];
        this.refreshRx();
    };
    FileStore.prototype.clear = function () {
        this.filesmap = {};
        this.rx.files = [];
    };
    FileStore.prototype.destroy = function () {
        this.rx.$destroy();
    };
    FileStore.prototype.upload = function (fileuid, options) {
        var _this = this;
        var file = this.getFile(fileuid);
        var onUploadProgress = function (e) {
            file.progress = e.loaded / e.total * 100;
            if (options.onUploadProgress) {
                options.onUploadProgress(e);
            }
        };
        var httpService = Vue.prototype.$http;
        var cfg = __assign({ method: 'POST', rawUrl: options.url, data: file.file, headers: {
                'Content-Type': file.file.type
            } }, options.config);
        var cancelToken = axios.CancelToken.source();
        this.cancelTokens[fileuid] = cancelToken;
        var axiosOptions = {
            onUploadProgress: onUploadProgress,
            cancelToken: cancelToken.token
        };
        file.status = MFileStatus.UPLOADING;
        return httpService.execute(cfg, axiosOptions)
            .then(function (value) {
            file.status = MFileStatus.COMPLETED;
            file.progress = 100;
            return value;
        }, function (ex) {
            file.status = axios.isCancel(ex)
                ? MFileStatus.CANCELED
                : MFileStatus.FAILED;
            if (file.status === MFileStatus.FAILED) {
                return Promise.reject(ex);
            }
        })
            .then(function (value) {
            delete _this.cancelTokens[fileuid];
            return value;
        });
    };
    FileStore.prototype.uploadTemp = function (files) {
        var _this = this;
        files.forEach(function (file) {
            var storeFile = _this.getFile(file.uid);
            storeFile.url = URL.createObjectURL(file.file);
            storeFile.status = MFileStatus.COMPLETED;
            storeFile.progress = 100;
        });
    };
    FileStore.prototype.cancelUpload = function (fileuid) {
        this.cancelTokens[fileuid].cancel();
        delete this.cancelTokens[fileuid];
    };
    FileStore.prototype.validate = function (file) {
        this.validateExtension(file);
        if (!this.options) {
            return;
        }
        if (this.options.maxSizeKb) {
            this.validateSize(file);
        }
        if (this.options.maxFiles) {
            this.validateMaxFiles(file);
        }
    };
    /**
     * If the extension is not specified, it'll be rejected.
     * If the extension is a part of acceptedExtensions or if acceptedExtensions is empty or undefined, we accept all extensions.
     * If the extension is a part of rejectedExtensions, it'll be rejected.
     * If the extension is a part of the accepted and rejected extensions, it'll be rejected.
     */
    FileStore.prototype.validateExtension = function (file) {
        var ext = extractExtension(file.file.name);
        if (ext === '' || this.extensionInRejectedExtensions(ext) || !this.extensionInAcceptedExtensions(ext)) {
            file.status = MFileStatus.REJECTED;
            file.rejection = MFileRejectionCause.FILE_TYPE;
        }
    };
    FileStore.prototype.extensionInAcceptedExtensions = function (extension) {
        return this.options === undefined || this.options.allowedExtensions === undefined || this.options.allowedExtensions.length === 0 || this.options.allowedExtensions.indexOf(extension) !== -1;
    };
    FileStore.prototype.extensionInRejectedExtensions = function (extension) {
        return this.options !== undefined && this.options.rejectedExtensions !== undefined && this.options.rejectedExtensions.length > 0 && this.options.rejectedExtensions.indexOf(extension) !== -1;
    };
    FileStore.prototype.validateSize = function (file) {
        if (file.file.size / 1024 > this.options.maxSizeKb) {
            file.status = MFileStatus.REJECTED;
            file.rejection = MFileRejectionCause.FILE_SIZE;
        }
    };
    FileStore.prototype.validateMaxFiles = function (file) {
        var _this = this;
        var nbValidFiles = Object.keys(this.filesmap).reduce(function (t, uid) {
            var f = _this.filesmap[uid];
            return (t =
                f.status === MFileStatus.COMPLETED ||
                    f.status === MFileStatus.READY ||
                    f.status === MFileStatus.UPLOADING
                    ? t + 1
                    : t);
        }, 0);
        if (nbValidFiles >= this.options.maxFiles) {
            file.status = MFileStatus.REJECTED;
            file.rejection = MFileRejectionCause.MAX_FILES;
        }
    };
    FileStore.prototype.refreshRx = function () {
        var files = [];
        for (var f in this.filesmap) {
            files.push(this.filesmap[f]);
        }
        this.rx.files = files;
    };
    return FileStore;
}());
var FilePlugin = {
    install: function (v, options) {
        v.prototype.$log.debug('$file', 'plugin.install');
        var file = new FileService();
        (v.prototype).$file = file;
    }
};
export default FilePlugin;
//# sourceMappingURL=file.js.map