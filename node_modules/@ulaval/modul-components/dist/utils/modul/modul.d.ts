import Vue, { PluginObject } from 'vue';
import { BackdropMode } from '../../mixins/portal/portal';
/**
 * Augment the typings of Vue.js
 */
declare module 'vue/types/vue' {
    interface Vue {
        $modul: Modul;
    }
}
export declare class Modul {
    htmlEl: HTMLElement;
    bodyEl: HTMLElement;
    event: import("vue/types/vue").CombinedVueInstance<Vue, object, object, object, Record<never, any>>;
    scrollPosition: number;
    stopScrollPosition: number;
    scrollDown: boolean;
    scrollUp: boolean;
    backdropElement: HTMLElement | undefined;
    windowZIndex: number;
    private windowStack;
    private windowStackMap;
    private lastScrollPosition;
    private doneScrollEvent;
    private doneResizeEvent;
    private internalScrollActive;
    constructor();
    /**
     * @deprecated Don't use this function to emit events between two components
     */
    updateAfterResize(): void;
    pushElement(element: HTMLElement, backdropMode: BackdropMode, viewportIsSmall: boolean): string;
    popElement(stackId: string): void;
    peekElement(): string | undefined;
    private onClick;
    private onScroll;
    private onResize;
    private ensureBackdrop;
    private removeBackdrop;
    private scrollActive;
}
declare const ModulPlugin: PluginObject<any>;
export default ModulPlugin;
//# sourceMappingURL=modul.d.ts.map