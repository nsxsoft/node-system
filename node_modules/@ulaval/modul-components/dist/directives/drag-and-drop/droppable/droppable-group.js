var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { DROPPABLE_GROUP_NAME } from '../../directive-names';
import { MDOMPlugin, MElementDomPlugin } from '../../domPlugin';
var MDroppableGroup = /** @class */ (function (_super) {
    __extends(MDroppableGroup, _super);
    function MDroppableGroup() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MDroppableGroup.prototype.attach = function (mount) {
        if (this.options) {
            mount(function () { });
        }
    };
    MDroppableGroup.prototype.update = function (options, refresh) {
        var _this = this;
        if (options) {
            refresh(function () { return _this._options = options; });
        }
    };
    MDroppableGroup.prototype.detach = function () { };
    MDroppableGroup.defaultMountPoint = '__mdroppablegroup__';
    return MDroppableGroup;
}(MElementDomPlugin));
export { MDroppableGroup };
var Directive = {
    bind: function (element, binding, node) {
        MDOMPlugin.attach(MDroppableGroup, element, binding.value);
    },
    update: function (element, binding, node) {
        MDOMPlugin.attach(MDroppableGroup, element, binding.value);
    },
    unbind: function (element, binding) {
        MDOMPlugin.detach(MDroppableGroup, element);
    }
};
var DroppableGroupPlugin = {
    install: function (v, options) {
        v.directive(DROPPABLE_GROUP_NAME, Directive);
    }
};
export default DroppableGroupPlugin;
//# sourceMappingURL=droppable-group.js.map