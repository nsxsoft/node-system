import { RIPPLE_EFFECT_NAME } from '../directive-names';
var RippleEffect = /** @class */ (function () {
    function RippleEffect() {
    }
    RippleEffect.prototype.initRipple = function (event, el) {
        this.el = el;
        this.rippleEl = document.createElement('span');
        this.rippleELStyle = this.rippleEl.style;
        this.clickEl = event.target;
        this.boundingRectEl = this.el.getBoundingClientRect();
        this.clickEl.style.position = 'relative';
        this.addRipple(event);
    };
    RippleEffect.prototype.addRipple = function (event) {
        if (this.isActive) {
            this.setPosition(event);
            this.setStyle();
            this.clickEl.appendChild(this.rippleEl);
            this.setStyleAnimation();
            this.removeRipple(event);
        }
    };
    RippleEffect.prototype.setPosition = function (event) {
        this.positionX = event.offsetX;
        if (this.positionX !== undefined) {
            this.positionY = event.offsetY;
        }
        else {
            this.positionX = event.clientX - this.boundingRectEl.left;
            this.positionY = event.clientY - this.boundingRectEl.top;
        }
        if (this.boundingRectEl.width === this.boundingRectEl.height) {
            this.maxWidth = this.boundingRectEl.width * 1.412;
        }
        else {
            this.maxWidth = Math.sqrt((this.boundingRectEl.width * this.boundingRectEl.width) + (this.boundingRectEl.height * this.boundingRectEl.height));
        }
        this.dimension = (this.maxWidth * 2);
    };
    RippleEffect.prototype.setStyle = function () {
        this.rippleEl.className = RIPPLE_EFFECT_NAME;
        this.rippleELStyle.position = 'absolute';
        this.rippleELStyle.borderRadius = '50%';
        this.rippleELStyle.width = this.dimension + 'px';
        this.rippleELStyle.height = this.dimension + 'px';
        this.rippleELStyle.left = -this.maxWidth + this.positionX + 'px';
        this.rippleELStyle.top = -this.maxWidth + this.positionY + 'px';
        this.rippleELStyle.pointerEvents = 'none';
        this.rippleELStyle.userSelect = 'none';
        this.rippleELStyle.borderRadius = '50%';
        this.rippleELStyle.backgroundColor = '#CCFAFF';
        this.rippleELStyle.backgroundClip = 'padding-box';
        this.rippleELStyle.opacity = '0.2';
        this.rippleELStyle.transform = 'scale(0)';
        this.rippleELStyle.transition = 'transform 0.6s ease-out, opacity 0.6s ease-out';
    };
    RippleEffect.prototype.setStyleAnimation = function () {
        var _this = this;
        setTimeout(function () {
            _this.rippleEl.className += ' enter-active';
            _this.rippleELStyle.opacity = '0.4';
            _this.rippleELStyle.transform = 'scale(1)';
        }, 0);
    };
    RippleEffect.prototype.removeRipple = function (event) {
        var _this = this;
        var releaseEvent = (event.type === 'mousedown' ? 'mouseup' : 'touchend');
        var release = function () {
            document.removeEventListener(releaseEvent, release);
            _this.rippleEl.className = RIPPLE_EFFECT_NAME + ' leave-active';
            _this.rippleELStyle.opacity = '0';
            setTimeout(function () {
                document.body.removeChild(_this.rippleEl);
            }, 450);
        };
        document.addEventListener(releaseEvent, release);
    };
    return RippleEffect;
}());
export { RippleEffect };
var RippleEffectLib = new RippleEffect();
export default RippleEffectLib;
//# sourceMappingURL=ripple-effect-lib.js.map