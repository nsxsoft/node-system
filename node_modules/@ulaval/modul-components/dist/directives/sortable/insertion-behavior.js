import { mousePositionElement } from '../../utils/mouse/mouse';
import { MDroppable } from '../drag-and-drop/droppable/droppable';
import { MSortInsertPositions } from './sortable';
var MSortableDefaultInsertionMarkerBehavior = /** @class */ (function () {
    function MSortableDefaultInsertionMarkerBehavior() {
    }
    MSortableDefaultInsertionMarkerBehavior.prototype.getInsertPosition = function (event) {
        if (MDroppable.currentHoverDroppable) {
            var mousePosition = mousePositionElement(event, MDroppable.currentHoverDroppable.element);
            if (mousePosition.y < MDroppable.currentHoverDroppable.element.offsetHeight / 2) {
                return MSortInsertPositions.Before;
            }
            else {
                return MSortInsertPositions.After;
            }
        }
        return MSortInsertPositions.After;
    };
    return MSortableDefaultInsertionMarkerBehavior;
}());
export { MSortableDefaultInsertionMarkerBehavior };
var MSortableGroupingInsertionMarkerBehavior = /** @class */ (function () {
    function MSortableGroupingInsertionMarkerBehavior() {
    }
    MSortableGroupingInsertionMarkerBehavior.prototype.getInsertPosition = function (event) {
        if (!MDroppable.currentHoverDroppable) {
            return MSortInsertPositions.After;
        }
        var mousePosition = mousePositionElement(event, MDroppable.currentHoverDroppable.element);
        if (mousePosition.y <= 10) {
            return MSortInsertPositions.Before;
        }
        if (mousePosition.y > MDroppable.currentHoverDroppable.element.offsetHeight - 10) {
            return MSortInsertPositions.After;
        }
        return MSortInsertPositions.In;
    };
    return MSortableGroupingInsertionMarkerBehavior;
}());
export { MSortableGroupingInsertionMarkerBehavior };
//# sourceMappingURL=insertion-behavior.js.map