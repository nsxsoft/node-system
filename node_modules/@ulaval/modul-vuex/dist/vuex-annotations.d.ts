import * as Vuex from 'vuex';
declare type GetterFunc = (target: any, key: any, descriptor: TypedPropertyDescriptor<any>) => any;
export declare function Getter(): GetterFunc;
declare type MutationFunc = (target: any, key: any, descriptor: TypedPropertyDescriptor<any>) => any;
export declare function Mutation(params?: {
    options: Vuex.CommitOptions;
}): MutationFunc;
declare type ActionFunc = (target: any, key: any, descriptor: TypedPropertyDescriptor<any>) => any;
export declare function Action(): ActionFunc;
/**
 * This class is the required base class to be able to use the Getter, Mutation, and Action decorators.
 *
 * The constructor will register itself with the store as a named module.
 *
 * It sets a 'state' and 'store' properties that should be used by child classes.
 */
export declare abstract class ModuleBase<S> {
    protected moduleName: string;
    protected state: S;
    store: Vuex.Store<any>;
    constructor(moduleName: string, state: S, store: Vuex.Store<any>);
}
export {};
